
sdtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064bc  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08006648  08006648  00007648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800677c  0800677c  00008024  2**0
                  CONTENTS
  4 .ARM          00000008  0800677c  0800677c  0000777c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006784  08006784  00008024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006784  08006784  00007784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006788  08006788  00007788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  0800678c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000024  080067b0  00008024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080067b0  00008178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103f9  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002746  00000000  00000000  0001844d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  0001ab98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b2d  00000000  00000000  0001ba28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002187a  00000000  00000000  0001c555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001338d  00000000  00000000  0003ddcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c27b7  00000000  00000000  0005115c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113913  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b1c  00000000  00000000  00113958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00117474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000024 	.word	0x20000024
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08006630 	.word	0x08006630

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000028 	.word	0x20000028
 80001c8:	08006630 	.word	0x08006630

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b5b0      	push	{r4, r5, r7, lr}
 80004be:	f5ad 6dad 	sub.w	sp, sp, #1384	@ 0x568
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fab3 	bl	8000a2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f84e 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f91c 	bl	8000708 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 f8ea 	bl	80006a8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004d4:	f000 f8aa 	bl	800062c <MX_SPI1_Init>
  MX_FATFS_Init();
 80004d8:	f003 f980 	bl	80037dc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80004dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004e0:	f000 fb1a 	bl	8000b18 <HAL_Delay>
  FATFS FatFs;
  FIL fil; //filehandle
  FRESULT fres; //result

  fres = f_mount(&FatFs, "", 1);
 80004e4:	f507 734d 	add.w	r3, r7, #820	@ 0x334
 80004e8:	2201      	movs	r2, #1
 80004ea:	491c      	ldr	r1, [pc, #112]	@ (800055c <main+0xa0>)
 80004ec:	4618      	mov	r0, r3
 80004ee:	f005 fbf9 	bl	8005ce4 <f_mount>
 80004f2:	4603      	mov	r3, r0
 80004f4:	f887 3567 	strb.w	r3, [r7, #1383]	@ 0x567
  if (fres != FR_OK) {
 80004f8:	f897 3567 	ldrb.w	r3, [r7, #1383]	@ 0x567
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <main+0x48>
	  while(1);
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <main+0x44>
  }

  fres = f_open(&fil, "pleasework.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000504:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000508:	221a      	movs	r2, #26
 800050a:	4915      	ldr	r1, [pc, #84]	@ (8000560 <main+0xa4>)
 800050c:	4618      	mov	r0, r3
 800050e:	f005 fc2f 	bl	8005d70 <f_open>
 8000512:	4603      	mov	r3, r0
 8000514:	f887 3567 	strb.w	r3, [r7, #1383]	@ 0x567
  char buf[256];
  strncpy(buf, "a new file is made!", 19);
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	4a12      	ldr	r2, [pc, #72]	@ (8000564 <main+0xa8>)
 800051c:	461c      	mov	r4, r3
 800051e:	4615      	mov	r5, r2
 8000520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000524:	682b      	ldr	r3, [r5, #0]
 8000526:	461a      	mov	r2, r3
 8000528:	8022      	strh	r2, [r4, #0]
 800052a:	3402      	adds	r4, #2
 800052c:	0c1b      	lsrs	r3, r3, #16
 800052e:	7023      	strb	r3, [r4, #0]
  UINT byteswrote;
  fres = f_write(&fil, buf, 19, &byteswrote);
 8000530:	463b      	mov	r3, r7
 8000532:	1d39      	adds	r1, r7, #4
 8000534:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 8000538:	2213      	movs	r2, #19
 800053a:	f005 fdd3 	bl	80060e4 <f_write>
 800053e:	4603      	mov	r3, r0
 8000540:	f887 3567 	strb.w	r3, [r7, #1383]	@ 0x567
  f_close(&fil);
 8000544:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000548:	4618      	mov	r0, r3
 800054a:	f005 ffbe 	bl	80064ca <f_close>
  f_mount(NULL, "", 0);
 800054e:	2200      	movs	r2, #0
 8000550:	4902      	ldr	r1, [pc, #8]	@ (800055c <main+0xa0>)
 8000552:	2000      	movs	r0, #0
 8000554:	f005 fbc6 	bl	8005ce4 <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <main+0x9c>
 800055c:	08006648 	.word	0x08006648
 8000560:	0800664c 	.word	0x0800664c
 8000564:	0800665c 	.word	0x0800665c

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b096      	sub	sp, #88	@ 0x58
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2244      	movs	r2, #68	@ 0x44
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f006 f82d 	bl	80065d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	463b      	mov	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800058a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800058e:	f000 fd6d 	bl	800106c <HAL_PWREx_ControlVoltageScaling>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000598:	f000 f906 	bl	80007a8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800059c:	f000 fd48 	bl	8001030 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005a0:	4b21      	ldr	r3, [pc, #132]	@ (8000628 <SystemClock_Config+0xc0>)
 80005a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005a6:	4a20      	ldr	r2, [pc, #128]	@ (8000628 <SystemClock_Config+0xc0>)
 80005a8:	f023 0318 	bic.w	r3, r3, #24
 80005ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005b0:	2314      	movs	r3, #20
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c0:	2360      	movs	r3, #96	@ 0x60
 80005c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005c8:	2301      	movs	r3, #1
 80005ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005d0:	2310      	movs	r3, #16
 80005d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005d4:	2307      	movs	r3, #7
 80005d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fd97 	bl	8001118 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005f0:	f000 f8da 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2303      	movs	r3, #3
 80005fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	2101      	movs	r1, #1
 800060c:	4618      	mov	r0, r3
 800060e:	f001 f997 	bl	8001940 <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000618:	f000 f8c6 	bl	80007a8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800061c:	f001 fdaa 	bl	8002174 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000620:	bf00      	nop
 8000622:	3758      	adds	r7, #88	@ 0x58
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40021000 	.word	0x40021000

0800062c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <MX_SPI1_Init+0x74>)
 8000632:	4a1c      	ldr	r2, [pc, #112]	@ (80006a4 <MX_SPI1_Init+0x78>)
 8000634:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000636:	4b1a      	ldr	r3, [pc, #104]	@ (80006a0 <MX_SPI1_Init+0x74>)
 8000638:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800063c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800063e:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <MX_SPI1_Init+0x74>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000644:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <MX_SPI1_Init+0x74>)
 8000646:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800064a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800064c:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <MX_SPI1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000652:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <MX_SPI1_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_SPI1_Init+0x74>)
 800065a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800065e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_SPI1_Init+0x74>)
 8000662:	2230      	movs	r2, #48	@ 0x30
 8000664:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_SPI1_Init+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <MX_SPI1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <MX_SPI1_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_SPI1_Init+0x74>)
 800067a:	2207      	movs	r2, #7
 800067c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <MX_SPI1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_SPI1_Init+0x74>)
 8000686:	2208      	movs	r2, #8
 8000688:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_SPI1_Init+0x74>)
 800068c:	f001 fe74 	bl	8002378 <HAL_SPI_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000696:	f000 f887 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000040 	.word	0x20000040
 80006a4:	40013000 	.word	0x40013000

080006a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ac:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <MX_USART2_UART_Init+0x58>)
 80006ae:	4a15      	ldr	r2, [pc, #84]	@ (8000704 <MX_USART2_UART_Init+0x5c>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b2:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <MX_USART2_UART_Init+0x58>)
 80006b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <MX_USART2_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <MX_USART2_UART_Init+0x58>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <MX_USART2_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006de:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e4:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <MX_USART2_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	@ (8000700 <MX_USART2_UART_Init+0x58>)
 80006ec:	f002 fbe0 	bl	8002eb0 <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006f6:	f000 f857 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200000a4 	.word	0x200000a4
 8000704:	40004400 	.word	0x40004400

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <MX_GPIO_Init+0x98>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	4a1f      	ldr	r2, [pc, #124]	@ (80007a0 <MX_GPIO_Init+0x98>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072a:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <MX_GPIO_Init+0x98>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_GPIO_Init+0x98>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	4a19      	ldr	r2, [pc, #100]	@ (80007a0 <MX_GPIO_Init+0x98>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_GPIO_Init+0x98>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_GPIO_Init+0x98>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	4a13      	ldr	r2, [pc, #76]	@ (80007a0 <MX_GPIO_Init+0x98>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_GPIO_Init+0x98>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	2101      	movs	r1, #1
 800076a:	480e      	ldr	r0, [pc, #56]	@ (80007a4 <MX_GPIO_Init+0x9c>)
 800076c:	f000 fc48 	bl	8001000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2108      	movs	r1, #8
 8000774:	480b      	ldr	r0, [pc, #44]	@ (80007a4 <MX_GPIO_Init+0x9c>)
 8000776:	f000 fc43 	bl	8001000 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin LD3_Pin */
  GPIO_InitStruct.Pin = CS_Pin|LD3_Pin;
 800077a:	2309      	movs	r3, #9
 800077c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4619      	mov	r1, r3
 8000790:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <MX_GPIO_Init+0x9c>)
 8000792:	f000 facb 	bl	8000d2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000796:	bf00      	nop
 8000798:	3720      	adds	r7, #32
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000
 80007a4:	48000400 	.word	0x48000400

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <Error_Handler+0x8>

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <HAL_MspInit+0x44>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007be:	4a0e      	ldr	r2, [pc, #56]	@ (80007f8 <HAL_MspInit+0x44>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80007c6:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <HAL_MspInit+0x44>)
 80007c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <HAL_MspInit+0x44>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d6:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <HAL_MspInit+0x44>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <HAL_MspInit+0x44>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	@ 0x28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a18      	ldr	r2, [pc, #96]	@ (800087c <HAL_SPI_MspInit+0x80>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d129      	bne.n	8000872 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800081e:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <HAL_SPI_MspInit+0x84>)
 8000820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000822:	4a17      	ldr	r2, [pc, #92]	@ (8000880 <HAL_SPI_MspInit+0x84>)
 8000824:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000828:	6613      	str	r3, [r2, #96]	@ 0x60
 800082a:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <HAL_SPI_MspInit+0x84>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800082e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <HAL_SPI_MspInit+0x84>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a11      	ldr	r2, [pc, #68]	@ (8000880 <HAL_SPI_MspInit+0x84>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <HAL_SPI_MspInit+0x84>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 800084e:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 8000852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000860:	2305      	movs	r3, #5
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086e:	f000 fa5d 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	@ 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40013000 	.word	0x40013000
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b09e      	sub	sp, #120	@ 0x78
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	2254      	movs	r2, #84	@ 0x54
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f005 fe96 	bl	80065d6 <memset>
  if(huart->Instance==USART2)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a28      	ldr	r2, [pc, #160]	@ (8000950 <HAL_UART_MspInit+0xcc>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d148      	bne.n	8000946 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 fa61 	bl	8001d88 <HAL_RCCEx_PeriphCLKConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008cc:	f7ff ff6c 	bl	80007a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d0:	4b20      	ldr	r3, [pc, #128]	@ (8000954 <HAL_UART_MspInit+0xd0>)
 80008d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d4:	4a1f      	ldr	r2, [pc, #124]	@ (8000954 <HAL_UART_MspInit+0xd0>)
 80008d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008da:	6593      	str	r3, [r2, #88]	@ 0x58
 80008dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000954 <HAL_UART_MspInit+0xd0>)
 80008de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <HAL_UART_MspInit+0xd0>)
 80008ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ec:	4a19      	ldr	r2, [pc, #100]	@ (8000954 <HAL_UART_MspInit+0xd0>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f4:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <HAL_UART_MspInit+0xd0>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000900:	2304      	movs	r3, #4
 8000902:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000910:	2307      	movs	r3, #7
 8000912:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000918:	4619      	mov	r1, r3
 800091a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091e:	f000 fa05 	bl	8000d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000926:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000934:	2303      	movs	r3, #3
 8000936:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800093c:	4619      	mov	r1, r3
 800093e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000942:	f000 f9f3 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000946:	bf00      	nop
 8000948:	3778      	adds	r7, #120	@ 0x78
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40004400 	.word	0x40004400
 8000954:	40021000 	.word	0x40021000

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <NMI_Handler+0x4>

08000960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <MemManage_Handler+0x4>

08000970 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <UsageFault_Handler+0x4>

08000980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ae:	f000 f893 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <SystemInit+0x20>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009c2:	4a05      	ldr	r2, [pc, #20]	@ (80009d8 <SystemInit+0x20>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e0:	f7ff ffea 	bl	80009b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e4:	480c      	ldr	r0, [pc, #48]	@ (8000a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80009e6:	490d      	ldr	r1, [pc, #52]	@ (8000a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a20 <LoopForever+0xe>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000a28 <LoopForever+0x16>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0a:	f005 fded 	bl	80065e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a0e:	f7ff fd55 	bl	80004bc <main>

08000a12 <LoopForever>:

LoopForever:
    b LoopForever
 8000a12:	e7fe      	b.n	8000a12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a14:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000a20:	0800678c 	.word	0x0800678c
  ldr r2, =_sbss
 8000a24:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000a28:	20000178 	.word	0x20000178

08000a2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC1_IRQHandler>

08000a2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a34:	2300      	movs	r3, #0
 8000a36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f943 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 f80e 	bl	8000a60 <HAL_InitTick>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d002      	beq.n	8000a50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	71fb      	strb	r3, [r7, #7]
 8000a4e:	e001      	b.n	8000a54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a50:	f7ff feb0 	bl	80007b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a54:	79fb      	ldrb	r3, [r7, #7]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a6c:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <HAL_InitTick+0x6c>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d023      	beq.n	8000abc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <HAL_InitTick+0x70>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <HAL_InitTick+0x6c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f941 	bl	8000d12 <HAL_SYSTICK_Config>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d10f      	bne.n	8000ab6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	d809      	bhi.n	8000ab0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000aa4:	f000 f919 	bl	8000cda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad4 <HAL_InitTick+0x74>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	e007      	b.n	8000ac0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	73fb      	strb	r3, [r7, #15]
 8000ab4:	e004      	b.n	8000ac0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
 8000aba:	e001      	b.n	8000ac0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_IncTick+0x20>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_IncTick+0x24>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a04      	ldr	r2, [pc, #16]	@ (8000afc <HAL_IncTick+0x24>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008
 8000afc:	2000012c 	.word	0x2000012c

08000b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <HAL_GetTick+0x14>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	2000012c 	.word	0x2000012c

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b20:	f7ff ffee 	bl	8000b00 <HAL_GetTick>
 8000b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b30:	d005      	beq.n	8000b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b32:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <HAL_Delay+0x44>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b3e:	bf00      	nop
 8000b40:	f7ff ffde 	bl	8000b00 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8f7      	bhi.n	8000b40 <HAL_Delay+0x28>
  {
  }
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b92:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	60d3      	str	r3, [r2, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db0a      	blt.n	8000bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	490c      	ldr	r1, [pc, #48]	@ (8000c10 <__NVIC_SetPriority+0x4c>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	0112      	lsls	r2, r2, #4
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	440b      	add	r3, r1
 8000be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bec:	e00a      	b.n	8000c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4908      	ldr	r1, [pc, #32]	@ (8000c14 <__NVIC_SetPriority+0x50>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	3b04      	subs	r3, #4
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	440b      	add	r3, r1
 8000c02:	761a      	strb	r2, [r3, #24]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000e100 	.word	0xe000e100
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	@ 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f1c3 0307 	rsb	r3, r3, #7
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	bf28      	it	cs
 8000c36:	2304      	movcs	r3, #4
 8000c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d902      	bls.n	8000c48 <NVIC_EncodePriority+0x30>
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3b03      	subs	r3, #3
 8000c46:	e000      	b.n	8000c4a <NVIC_EncodePriority+0x32>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43da      	mvns	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	43d9      	mvns	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	4313      	orrs	r3, r2
         );
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3724      	adds	r7, #36	@ 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c90:	d301      	bcc.n	8000c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00f      	b.n	8000cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c96:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <SysTick_Config+0x40>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ca4:	f7ff ff8e 	bl	8000bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <SysTick_Config+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cae:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <SysTick_Config+0x40>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff47 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cec:	f7ff ff5c 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	68b9      	ldr	r1, [r7, #8]
 8000cf6:	6978      	ldr	r0, [r7, #20]
 8000cf8:	f7ff ff8e 	bl	8000c18 <NVIC_EncodePriority>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff5d 	bl	8000bc4 <__NVIC_SetPriority>
}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ffb0 	bl	8000c80 <SysTick_Config>
 8000d20:	4603      	mov	r3, r0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3a:	e148      	b.n	8000fce <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	2101      	movs	r1, #1
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	fa01 f303 	lsl.w	r3, r1, r3
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 813a 	beq.w	8000fc8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d005      	beq.n	8000d6c <HAL_GPIO_Init+0x40>
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d130      	bne.n	8000dce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000da2:	2201      	movs	r2, #1
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	f003 0201 	and.w	r2, r3, #1
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d017      	beq.n	8000e0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d123      	bne.n	8000e5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	08da      	lsrs	r2, r3, #3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3208      	adds	r2, #8
 8000e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	691a      	ldr	r2, [r3, #16]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	f003 0307 	and.w	r3, r3, #7
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	08da      	lsrs	r2, r3, #3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3208      	adds	r2, #8
 8000e58:	6939      	ldr	r1, [r7, #16]
 8000e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0203 	and.w	r2, r3, #3
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 8094 	beq.w	8000fc8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea0:	4b52      	ldr	r3, [pc, #328]	@ (8000fec <HAL_GPIO_Init+0x2c0>)
 8000ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea4:	4a51      	ldr	r2, [pc, #324]	@ (8000fec <HAL_GPIO_Init+0x2c0>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eac:	4b4f      	ldr	r3, [pc, #316]	@ (8000fec <HAL_GPIO_Init+0x2c0>)
 8000eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eb8:	4a4d      	ldr	r2, [pc, #308]	@ (8000ff0 <HAL_GPIO_Init+0x2c4>)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	220f      	movs	r2, #15
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ee2:	d00d      	beq.n	8000f00 <HAL_GPIO_Init+0x1d4>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a43      	ldr	r2, [pc, #268]	@ (8000ff4 <HAL_GPIO_Init+0x2c8>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d007      	beq.n	8000efc <HAL_GPIO_Init+0x1d0>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a42      	ldr	r2, [pc, #264]	@ (8000ff8 <HAL_GPIO_Init+0x2cc>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d101      	bne.n	8000ef8 <HAL_GPIO_Init+0x1cc>
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	e004      	b.n	8000f02 <HAL_GPIO_Init+0x1d6>
 8000ef8:	2307      	movs	r3, #7
 8000efa:	e002      	b.n	8000f02 <HAL_GPIO_Init+0x1d6>
 8000efc:	2301      	movs	r3, #1
 8000efe:	e000      	b.n	8000f02 <HAL_GPIO_Init+0x1d6>
 8000f00:	2300      	movs	r3, #0
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	f002 0203 	and.w	r2, r2, #3
 8000f08:	0092      	lsls	r2, r2, #2
 8000f0a:	4093      	lsls	r3, r2
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f12:	4937      	ldr	r1, [pc, #220]	@ (8000ff0 <HAL_GPIO_Init+0x2c4>)
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	3302      	adds	r3, #2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f20:	4b36      	ldr	r3, [pc, #216]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f44:	4a2d      	ldr	r2, [pc, #180]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f6e:	4a23      	ldr	r2, [pc, #140]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f74:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f98:	4a18      	ldr	r2, [pc, #96]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000ffc <HAL_GPIO_Init+0x2d0>)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f47f aeaf 	bne.w	8000d3c <HAL_GPIO_Init+0x10>
  }
}
 8000fde:	bf00      	nop
 8000fe0:	bf00      	nop
 8000fe2:	371c      	adds	r7, #28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010000 	.word	0x40010000
 8000ff4:	48000400 	.word	0x48000400
 8000ff8:	48000800 	.word	0x48000800
 8000ffc:	40010400 	.word	0x40010400

08001000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
 800100c:	4613      	mov	r3, r2
 800100e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001010:	787b      	ldrb	r3, [r7, #1]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001016:	887a      	ldrh	r2, [r7, #2]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800101c:	e002      	b.n	8001024 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800101e:	887a      	ldrh	r2, [r7, #2]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001034:	4b05      	ldr	r3, [pc, #20]	@ (800104c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a04      	ldr	r2, [pc, #16]	@ (800104c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800103a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40007000 	.word	0x40007000

08001050 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001054:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <HAL_PWREx_GetVoltageRange+0x18>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40007000 	.word	0x40007000

0800106c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800107a:	d130      	bne.n	80010de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800107c:	4b23      	ldr	r3, [pc, #140]	@ (800110c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001088:	d038      	beq.n	80010fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800108a:	4b20      	ldr	r3, [pc, #128]	@ (800110c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001092:	4a1e      	ldr	r2, [pc, #120]	@ (800110c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001094:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001098:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800109a:	4b1d      	ldr	r3, [pc, #116]	@ (8001110 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2232      	movs	r2, #50	@ 0x32
 80010a0:	fb02 f303 	mul.w	r3, r2, r3
 80010a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001114 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010a6:	fba2 2303 	umull	r2, r3, r2, r3
 80010aa:	0c9b      	lsrs	r3, r3, #18
 80010ac:	3301      	adds	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010b0:	e002      	b.n	80010b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010b8:	4b14      	ldr	r3, [pc, #80]	@ (800110c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010c4:	d102      	bne.n	80010cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1f2      	bne.n	80010b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010cc:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010d8:	d110      	bne.n	80010fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e00f      	b.n	80010fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010de:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010ea:	d007      	beq.n	80010fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010ec:	4b07      	ldr	r3, [pc, #28]	@ (800110c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010f4:	4a05      	ldr	r2, [pc, #20]	@ (800110c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40007000 	.word	0x40007000
 8001110:	20000000 	.word	0x20000000
 8001114:	431bde83 	.word	0x431bde83

08001118 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d102      	bne.n	800112c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	f000 bc02 	b.w	8001930 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800112c:	4b96      	ldr	r3, [pc, #600]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001136:	4b94      	ldr	r3, [pc, #592]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0310 	and.w	r3, r3, #16
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 80e4 	beq.w	8001316 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d007      	beq.n	8001164 <HAL_RCC_OscConfig+0x4c>
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	2b0c      	cmp	r3, #12
 8001158:	f040 808b 	bne.w	8001272 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	2b01      	cmp	r3, #1
 8001160:	f040 8087 	bne.w	8001272 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001164:	4b88      	ldr	r3, [pc, #544]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_RCC_OscConfig+0x64>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e3d9      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1a      	ldr	r2, [r3, #32]
 8001180:	4b81      	ldr	r3, [pc, #516]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	2b00      	cmp	r3, #0
 800118a:	d004      	beq.n	8001196 <HAL_RCC_OscConfig+0x7e>
 800118c:	4b7e      	ldr	r3, [pc, #504]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001194:	e005      	b.n	80011a2 <HAL_RCC_OscConfig+0x8a>
 8001196:	4b7c      	ldr	r3, [pc, #496]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 8001198:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d223      	bcs.n	80011ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fd8c 	bl	8001cc8 <RCC_SetFlashLatencyFromMSIRange>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e3ba      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ba:	4b73      	ldr	r3, [pc, #460]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a72      	ldr	r2, [pc, #456]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	4b70      	ldr	r3, [pc, #448]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	496d      	ldr	r1, [pc, #436]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d8:	4b6b      	ldr	r3, [pc, #428]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	4968      	ldr	r1, [pc, #416]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
 80011ec:	e025      	b.n	800123a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ee:	4b66      	ldr	r3, [pc, #408]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a65      	ldr	r2, [pc, #404]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80011f4:	f043 0308 	orr.w	r3, r3, #8
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b63      	ldr	r3, [pc, #396]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	4960      	ldr	r1, [pc, #384]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 8001208:	4313      	orrs	r3, r2
 800120a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800120c:	4b5e      	ldr	r3, [pc, #376]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	495b      	ldr	r1, [pc, #364]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 800121c:	4313      	orrs	r3, r2
 800121e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d109      	bne.n	800123a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fd4c 	bl	8001cc8 <RCC_SetFlashLatencyFromMSIRange>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e37a      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800123a:	f000 fc81 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 800123e:	4602      	mov	r2, r0
 8001240:	4b51      	ldr	r3, [pc, #324]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	091b      	lsrs	r3, r3, #4
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	4950      	ldr	r1, [pc, #320]	@ (800138c <HAL_RCC_OscConfig+0x274>)
 800124c:	5ccb      	ldrb	r3, [r1, r3]
 800124e:	f003 031f 	and.w	r3, r3, #31
 8001252:	fa22 f303 	lsr.w	r3, r2, r3
 8001256:	4a4e      	ldr	r2, [pc, #312]	@ (8001390 <HAL_RCC_OscConfig+0x278>)
 8001258:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800125a:	4b4e      	ldr	r3, [pc, #312]	@ (8001394 <HAL_RCC_OscConfig+0x27c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fbfe 	bl	8000a60 <HAL_InitTick>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d052      	beq.n	8001314 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	e35e      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d032      	beq.n	80012e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800127a:	4b43      	ldr	r3, [pc, #268]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a42      	ldr	r2, [pc, #264]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001286:	f7ff fc3b 	bl	8000b00 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800128e:	f7ff fc37 	bl	8000b00 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e347      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012a0:	4b39      	ldr	r3, [pc, #228]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ac:	4b36      	ldr	r3, [pc, #216]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a35      	ldr	r2, [pc, #212]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80012b2:	f043 0308 	orr.w	r3, r3, #8
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b33      	ldr	r3, [pc, #204]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	4930      	ldr	r1, [pc, #192]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	492b      	ldr	r1, [pc, #172]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	604b      	str	r3, [r1, #4]
 80012de:	e01a      	b.n	8001316 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012e0:	4b29      	ldr	r3, [pc, #164]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a28      	ldr	r2, [pc, #160]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 80012e6:	f023 0301 	bic.w	r3, r3, #1
 80012ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fc08 	bl	8000b00 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012f4:	f7ff fc04 	bl	8000b00 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e314      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0x1dc>
 8001312:	e000      	b.n	8001316 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001314:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d073      	beq.n	800140a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	2b08      	cmp	r3, #8
 8001326:	d005      	beq.n	8001334 <HAL_RCC_OscConfig+0x21c>
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2b0c      	cmp	r3, #12
 800132c:	d10e      	bne.n	800134c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2b03      	cmp	r3, #3
 8001332:	d10b      	bne.n	800134c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d063      	beq.n	8001408 <HAL_RCC_OscConfig+0x2f0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d15f      	bne.n	8001408 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e2f1      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001354:	d106      	bne.n	8001364 <HAL_RCC_OscConfig+0x24c>
 8001356:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a0b      	ldr	r2, [pc, #44]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e025      	b.n	80013b0 <HAL_RCC_OscConfig+0x298>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800136c:	d114      	bne.n	8001398 <HAL_RCC_OscConfig+0x280>
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a05      	ldr	r2, [pc, #20]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 8001374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	4b03      	ldr	r3, [pc, #12]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a02      	ldr	r2, [pc, #8]	@ (8001388 <HAL_RCC_OscConfig+0x270>)
 8001380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e013      	b.n	80013b0 <HAL_RCC_OscConfig+0x298>
 8001388:	40021000 	.word	0x40021000
 800138c:	080066b4 	.word	0x080066b4
 8001390:	20000000 	.word	0x20000000
 8001394:	20000004 	.word	0x20000004
 8001398:	4ba0      	ldr	r3, [pc, #640]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a9f      	ldr	r2, [pc, #636]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 800139e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b9d      	ldr	r3, [pc, #628]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a9c      	ldr	r2, [pc, #624]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 80013aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d013      	beq.n	80013e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fba2 	bl	8000b00 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c0:	f7ff fb9e 	bl	8000b00 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b64      	cmp	r3, #100	@ 0x64
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e2ae      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d2:	4b92      	ldr	r3, [pc, #584]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0x2a8>
 80013de:	e014      	b.n	800140a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fb8e 	bl	8000b00 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e8:	f7ff fb8a 	bl	8000b00 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b64      	cmp	r3, #100	@ 0x64
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e29a      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013fa:	4b88      	ldr	r3, [pc, #544]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x2d0>
 8001406:	e000      	b.n	800140a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d060      	beq.n	80014d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	2b04      	cmp	r3, #4
 800141a:	d005      	beq.n	8001428 <HAL_RCC_OscConfig+0x310>
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2b0c      	cmp	r3, #12
 8001420:	d119      	bne.n	8001456 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d116      	bne.n	8001456 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001428:	4b7c      	ldr	r3, [pc, #496]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <HAL_RCC_OscConfig+0x328>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e277      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b76      	ldr	r3, [pc, #472]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	061b      	lsls	r3, r3, #24
 800144e:	4973      	ldr	r1, [pc, #460]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001454:	e040      	b.n	80014d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d023      	beq.n	80014a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800145e:	4b6f      	ldr	r3, [pc, #444]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a6e      	ldr	r2, [pc, #440]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 8001464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146a:	f7ff fb49 	bl	8000b00 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001472:	f7ff fb45 	bl	8000b00 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e255      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001484:	4b65      	ldr	r3, [pc, #404]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001490:	4b62      	ldr	r3, [pc, #392]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	061b      	lsls	r3, r3, #24
 800149e:	495f      	ldr	r1, [pc, #380]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
 80014a4:	e018      	b.n	80014d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a6:	4b5d      	ldr	r3, [pc, #372]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a5c      	ldr	r2, [pc, #368]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 80014ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b2:	f7ff fb25 	bl	8000b00 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ba:	f7ff fb21 	bl	8000b00 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e231      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014cc:	4b53      	ldr	r3, [pc, #332]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f0      	bne.n	80014ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d03c      	beq.n	800155e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d01c      	beq.n	8001526 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ec:	4b4b      	ldr	r3, [pc, #300]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 80014ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014f2:	4a4a      	ldr	r2, [pc, #296]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fc:	f7ff fb00 	bl	8000b00 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001504:	f7ff fafc 	bl	8000b00 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e20c      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001516:	4b41      	ldr	r3, [pc, #260]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 8001518:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0ef      	beq.n	8001504 <HAL_RCC_OscConfig+0x3ec>
 8001524:	e01b      	b.n	800155e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001526:	4b3d      	ldr	r3, [pc, #244]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 8001528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800152c:	4a3b      	ldr	r2, [pc, #236]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 800152e:	f023 0301 	bic.w	r3, r3, #1
 8001532:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001536:	f7ff fae3 	bl	8000b00 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153e:	f7ff fadf 	bl	8000b00 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e1ef      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001550:	4b32      	ldr	r3, [pc, #200]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 8001552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1ef      	bne.n	800153e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 80a6 	beq.w	80016b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001570:	4b2a      	ldr	r3, [pc, #168]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 8001572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10d      	bne.n	8001598 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800157c:	4b27      	ldr	r3, [pc, #156]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 800157e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001580:	4a26      	ldr	r2, [pc, #152]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 8001582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001586:	6593      	str	r3, [r2, #88]	@ 0x58
 8001588:	4b24      	ldr	r3, [pc, #144]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 800158a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001594:	2301      	movs	r3, #1
 8001596:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001598:	4b21      	ldr	r3, [pc, #132]	@ (8001620 <HAL_RCC_OscConfig+0x508>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d118      	bne.n	80015d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001620 <HAL_RCC_OscConfig+0x508>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001620 <HAL_RCC_OscConfig+0x508>)
 80015aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b0:	f7ff faa6 	bl	8000b00 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b8:	f7ff faa2 	bl	8000b00 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e1b2      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ca:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <HAL_RCC_OscConfig+0x508>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d108      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4d8>
 80015de:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 80015e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015e4:	4a0d      	ldr	r2, [pc, #52]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015ee:	e029      	b.n	8001644 <HAL_RCC_OscConfig+0x52c>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b05      	cmp	r3, #5
 80015f6:	d115      	bne.n	8001624 <HAL_RCC_OscConfig+0x50c>
 80015f8:	4b08      	ldr	r3, [pc, #32]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 80015fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015fe:	4a07      	ldr	r2, [pc, #28]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001608:	4b04      	ldr	r3, [pc, #16]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 800160a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800160e:	4a03      	ldr	r2, [pc, #12]	@ (800161c <HAL_RCC_OscConfig+0x504>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001618:	e014      	b.n	8001644 <HAL_RCC_OscConfig+0x52c>
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	40007000 	.word	0x40007000
 8001624:	4b9a      	ldr	r3, [pc, #616]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 8001626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800162a:	4a99      	ldr	r2, [pc, #612]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 800162c:	f023 0301 	bic.w	r3, r3, #1
 8001630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001634:	4b96      	ldr	r3, [pc, #600]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 8001636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800163a:	4a95      	ldr	r2, [pc, #596]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 800163c:	f023 0304 	bic.w	r3, r3, #4
 8001640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d016      	beq.n	800167a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164c:	f7ff fa58 	bl	8000b00 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001652:	e00a      	b.n	800166a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001654:	f7ff fa54 	bl	8000b00 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e162      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800166a:	4b89      	ldr	r3, [pc, #548]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 800166c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0ed      	beq.n	8001654 <HAL_RCC_OscConfig+0x53c>
 8001678:	e015      	b.n	80016a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167a:	f7ff fa41 	bl	8000b00 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001680:	e00a      	b.n	8001698 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f7ff fa3d 	bl	8000b00 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001690:	4293      	cmp	r3, r2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e14b      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001698:	4b7d      	ldr	r3, [pc, #500]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 800169a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1ed      	bne.n	8001682 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016a6:	7ffb      	ldrb	r3, [r7, #31]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d105      	bne.n	80016b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ac:	4b78      	ldr	r3, [pc, #480]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 80016ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b0:	4a77      	ldr	r2, [pc, #476]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 80016b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0320 	and.w	r3, r3, #32
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d03c      	beq.n	800173e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d01c      	beq.n	8001706 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016cc:	4b70      	ldr	r3, [pc, #448]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 80016ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016d2:	4a6f      	ldr	r2, [pc, #444]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016dc:	f7ff fa10 	bl	8000b00 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016e4:	f7ff fa0c 	bl	8000b00 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e11c      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016f6:	4b66      	ldr	r3, [pc, #408]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 80016f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0ef      	beq.n	80016e4 <HAL_RCC_OscConfig+0x5cc>
 8001704:	e01b      	b.n	800173e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001706:	4b62      	ldr	r3, [pc, #392]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 8001708:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800170c:	4a60      	ldr	r2, [pc, #384]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001716:	f7ff f9f3 	bl	8000b00 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800171e:	f7ff f9ef 	bl	8000b00 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e0ff      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001730:	4b57      	ldr	r3, [pc, #348]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 8001732:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1ef      	bne.n	800171e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80f3 	beq.w	800192e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174c:	2b02      	cmp	r3, #2
 800174e:	f040 80c9 	bne.w	80018e4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001752:	4b4f      	ldr	r3, [pc, #316]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f003 0203 	and.w	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001762:	429a      	cmp	r2, r3
 8001764:	d12c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001770:	3b01      	subs	r3, #1
 8001772:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001774:	429a      	cmp	r2, r3
 8001776:	d123      	bne.n	80017c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001782:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d11b      	bne.n	80017c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001792:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001794:	429a      	cmp	r2, r3
 8001796:	d113      	bne.n	80017c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a2:	085b      	lsrs	r3, r3, #1
 80017a4:	3b01      	subs	r3, #1
 80017a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d109      	bne.n	80017c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	3b01      	subs	r3, #1
 80017ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017bc:	429a      	cmp	r2, r3
 80017be:	d06b      	beq.n	8001898 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2b0c      	cmp	r3, #12
 80017c4:	d062      	beq.n	800188c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017c6:	4b32      	ldr	r3, [pc, #200]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e0ac      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a2d      	ldr	r2, [pc, #180]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 80017dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017e2:	f7ff f98d 	bl	8000b00 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ea:	f7ff f989 	bl	8000b00 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e099      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017fc:	4b24      	ldr	r3, [pc, #144]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f0      	bne.n	80017ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001808:	4b21      	ldr	r3, [pc, #132]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <HAL_RCC_OscConfig+0x77c>)
 800180e:	4013      	ands	r3, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001818:	3a01      	subs	r2, #1
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	4311      	orrs	r1, r2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001822:	0212      	lsls	r2, r2, #8
 8001824:	4311      	orrs	r1, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800182a:	0852      	lsrs	r2, r2, #1
 800182c:	3a01      	subs	r2, #1
 800182e:	0552      	lsls	r2, r2, #21
 8001830:	4311      	orrs	r1, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001836:	0852      	lsrs	r2, r2, #1
 8001838:	3a01      	subs	r2, #1
 800183a:	0652      	lsls	r2, r2, #25
 800183c:	4311      	orrs	r1, r2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001842:	06d2      	lsls	r2, r2, #27
 8001844:	430a      	orrs	r2, r1
 8001846:	4912      	ldr	r1, [pc, #72]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 8001848:	4313      	orrs	r3, r2
 800184a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800184c:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0f      	ldr	r2, [pc, #60]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 8001852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001856:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001858:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	4a0c      	ldr	r2, [pc, #48]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 800185e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001862:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001864:	f7ff f94c 	bl	8000b00 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff f948 	bl	8000b00 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e058      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187e:	4b04      	ldr	r3, [pc, #16]	@ (8001890 <HAL_RCC_OscConfig+0x778>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800188a:	e050      	b.n	800192e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e04f      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
 8001890:	40021000 	.word	0x40021000
 8001894:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001898:	4b27      	ldr	r3, [pc, #156]	@ (8001938 <HAL_RCC_OscConfig+0x820>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d144      	bne.n	800192e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018a4:	4b24      	ldr	r3, [pc, #144]	@ (8001938 <HAL_RCC_OscConfig+0x820>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a23      	ldr	r2, [pc, #140]	@ (8001938 <HAL_RCC_OscConfig+0x820>)
 80018aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018b0:	4b21      	ldr	r3, [pc, #132]	@ (8001938 <HAL_RCC_OscConfig+0x820>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	4a20      	ldr	r2, [pc, #128]	@ (8001938 <HAL_RCC_OscConfig+0x820>)
 80018b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018bc:	f7ff f920 	bl	8000b00 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff f91c 	bl	8000b00 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e02c      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d6:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <HAL_RCC_OscConfig+0x820>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x7ac>
 80018e2:	e024      	b.n	800192e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d01f      	beq.n	800192a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <HAL_RCC_OscConfig+0x820>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a12      	ldr	r2, [pc, #72]	@ (8001938 <HAL_RCC_OscConfig+0x820>)
 80018f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7ff f903 	bl	8000b00 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fe:	f7ff f8ff 	bl	8000b00 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e00f      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001910:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <HAL_RCC_OscConfig+0x820>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f0      	bne.n	80018fe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800191c:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <HAL_RCC_OscConfig+0x820>)
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	4905      	ldr	r1, [pc, #20]	@ (8001938 <HAL_RCC_OscConfig+0x820>)
 8001922:	4b06      	ldr	r3, [pc, #24]	@ (800193c <HAL_RCC_OscConfig+0x824>)
 8001924:	4013      	ands	r3, r2
 8001926:	60cb      	str	r3, [r1, #12]
 8001928:	e001      	b.n	800192e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3720      	adds	r7, #32
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40021000 	.word	0x40021000
 800193c:	feeefffc 	.word	0xfeeefffc

08001940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0e7      	b.n	8001b24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001954:	4b75      	ldr	r3, [pc, #468]	@ (8001b2c <HAL_RCC_ClockConfig+0x1ec>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d910      	bls.n	8001984 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001962:	4b72      	ldr	r3, [pc, #456]	@ (8001b2c <HAL_RCC_ClockConfig+0x1ec>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 0207 	bic.w	r2, r3, #7
 800196a:	4970      	ldr	r1, [pc, #448]	@ (8001b2c <HAL_RCC_ClockConfig+0x1ec>)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	4b6e      	ldr	r3, [pc, #440]	@ (8001b2c <HAL_RCC_ClockConfig+0x1ec>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d001      	beq.n	8001984 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0cf      	b.n	8001b24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d010      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	4b66      	ldr	r3, [pc, #408]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800199c:	429a      	cmp	r2, r3
 800199e:	d908      	bls.n	80019b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a0:	4b63      	ldr	r3, [pc, #396]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4960      	ldr	r1, [pc, #384]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d04c      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c6:	4b5a      	ldr	r3, [pc, #360]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d121      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e0a6      	b.n	8001b24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019de:	4b54      	ldr	r3, [pc, #336]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d115      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e09a      	b.n	8001b24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d107      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019f6:	4b4e      	ldr	r3, [pc, #312]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d109      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e08e      	b.n	8001b24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a06:	4b4a      	ldr	r3, [pc, #296]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e086      	b.n	8001b24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a16:	4b46      	ldr	r3, [pc, #280]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f023 0203 	bic.w	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4943      	ldr	r1, [pc, #268]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a28:	f7ff f86a 	bl	8000b00 <HAL_GetTick>
 8001a2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2e:	e00a      	b.n	8001a46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a30:	f7ff f866 	bl	8000b00 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e06e      	b.n	8001b24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	4b3a      	ldr	r3, [pc, #232]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 020c 	and.w	r2, r3, #12
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d1eb      	bne.n	8001a30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d010      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	4b31      	ldr	r3, [pc, #196]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d208      	bcs.n	8001a86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a74:	4b2e      	ldr	r3, [pc, #184]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	492b      	ldr	r1, [pc, #172]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a86:	4b29      	ldr	r3, [pc, #164]	@ (8001b2c <HAL_RCC_ClockConfig+0x1ec>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d210      	bcs.n	8001ab6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a94:	4b25      	ldr	r3, [pc, #148]	@ (8001b2c <HAL_RCC_ClockConfig+0x1ec>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 0207 	bic.w	r2, r3, #7
 8001a9c:	4923      	ldr	r1, [pc, #140]	@ (8001b2c <HAL_RCC_ClockConfig+0x1ec>)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa4:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <HAL_RCC_ClockConfig+0x1ec>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d001      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e036      	b.n	8001b24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d008      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	4918      	ldr	r1, [pc, #96]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d009      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ae0:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4910      	ldr	r1, [pc, #64]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001af4:	f000 f824 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <HAL_RCC_ClockConfig+0x1f0>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	091b      	lsrs	r3, r3, #4
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	490b      	ldr	r1, [pc, #44]	@ (8001b34 <HAL_RCC_ClockConfig+0x1f4>)
 8001b06:	5ccb      	ldrb	r3, [r1, r3]
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b10:	4a09      	ldr	r2, [pc, #36]	@ (8001b38 <HAL_RCC_ClockConfig+0x1f8>)
 8001b12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b14:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <HAL_RCC_ClockConfig+0x1fc>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe ffa1 	bl	8000a60 <HAL_InitTick>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b22:	7afb      	ldrb	r3, [r7, #11]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40022000 	.word	0x40022000
 8001b30:	40021000 	.word	0x40021000
 8001b34:	080066b4 	.word	0x080066b4
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000004 	.word	0x20000004

08001b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	@ 0x24
 8001b44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b58:	4b3b      	ldr	r3, [pc, #236]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0x34>
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d121      	bne.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d11e      	bne.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b74:	4b34      	ldr	r3, [pc, #208]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d107      	bne.n	8001b90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b80:	4b31      	ldr	r3, [pc, #196]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	e005      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b90:	4b2d      	ldr	r3, [pc, #180]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8001c4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10d      	bne.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d102      	bne.n	8001bbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bb8:	4b25      	ldr	r3, [pc, #148]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bba:	61bb      	str	r3, [r7, #24]
 8001bbc:	e004      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bc4:	4b23      	ldr	r3, [pc, #140]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	2b0c      	cmp	r3, #12
 8001bcc:	d134      	bne.n	8001c38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bce:	4b1e      	ldr	r3, [pc, #120]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d003      	beq.n	8001be6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d003      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0xac>
 8001be4:	e005      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x110>)
 8001be8:	617b      	str	r3, [r7, #20]
      break;
 8001bea:	e005      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bec:	4b19      	ldr	r3, [pc, #100]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bee:	617b      	str	r3, [r7, #20]
      break;
 8001bf0:	e002      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	617b      	str	r3, [r7, #20]
      break;
 8001bf6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bf8:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	3301      	adds	r3, #1
 8001c04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c06:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	0a1b      	lsrs	r3, r3, #8
 8001c0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	fb03 f202 	mul.w	r2, r3, r2
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	0e5b      	lsrs	r3, r3, #25
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	3301      	adds	r3, #1
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c38:	69bb      	ldr	r3, [r7, #24]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	@ 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	080066cc 	.word	0x080066cc
 8001c50:	00f42400 	.word	0x00f42400
 8001c54:	007a1200 	.word	0x007a1200

08001c58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	@ (8001c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000000 	.word	0x20000000

08001c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c74:	f7ff fff0 	bl	8001c58 <HAL_RCC_GetHCLKFreq>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	0a1b      	lsrs	r3, r3, #8
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	4904      	ldr	r1, [pc, #16]	@ (8001c98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c86:	5ccb      	ldrb	r3, [r1, r3]
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000
 8001c98:	080066c4 	.word	0x080066c4

08001c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ca0:	f7ff ffda 	bl	8001c58 <HAL_RCC_GetHCLKFreq>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	0adb      	lsrs	r3, r3, #11
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	4904      	ldr	r1, [pc, #16]	@ (8001cc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	080066c4 	.word	0x080066c4

08001cc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ce0:	f7ff f9b6 	bl	8001050 <HAL_PWREx_GetVoltageRange>
 8001ce4:	6178      	str	r0, [r7, #20]
 8001ce6:	e014      	b.n	8001d12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	4b25      	ldr	r3, [pc, #148]	@ (8001d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cec:	4a24      	ldr	r2, [pc, #144]	@ (8001d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cf4:	4b22      	ldr	r3, [pc, #136]	@ (8001d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d00:	f7ff f9a6 	bl	8001050 <HAL_PWREx_GetVoltageRange>
 8001d04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d06:	4b1e      	ldr	r3, [pc, #120]	@ (8001d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d18:	d10b      	bne.n	8001d32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b80      	cmp	r3, #128	@ 0x80
 8001d1e:	d919      	bls.n	8001d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d24:	d902      	bls.n	8001d2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d26:	2302      	movs	r3, #2
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	e013      	b.n	8001d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	e010      	b.n	8001d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b80      	cmp	r3, #128	@ 0x80
 8001d36:	d902      	bls.n	8001d3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d38:	2303      	movs	r3, #3
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	e00a      	b.n	8001d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b80      	cmp	r3, #128	@ 0x80
 8001d42:	d102      	bne.n	8001d4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d44:	2302      	movs	r3, #2
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	e004      	b.n	8001d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b70      	cmp	r3, #112	@ 0x70
 8001d4e:	d101      	bne.n	8001d54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d50:	2301      	movs	r3, #1
 8001d52:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d54:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 0207 	bic.w	r2, r3, #7
 8001d5c:	4909      	ldr	r1, [pc, #36]	@ (8001d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d64:	4b07      	ldr	r3, [pc, #28]	@ (8001d84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d001      	beq.n	8001d76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40022000 	.word	0x40022000

08001d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d90:	2300      	movs	r3, #0
 8001d92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d94:	2300      	movs	r3, #0
 8001d96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d031      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001dac:	d01a      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001dae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001db2:	d814      	bhi.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d009      	beq.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001db8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001dbc:	d10f      	bne.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001dbe:	4b5d      	ldr	r3, [pc, #372]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	4a5c      	ldr	r2, [pc, #368]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dca:	e00c      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 f9de 	bl	8002194 <RCCEx_PLLSAI1_Config>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ddc:	e003      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	74fb      	strb	r3, [r7, #19]
      break;
 8001de2:	e000      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001de6:	7cfb      	ldrb	r3, [r7, #19]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10b      	bne.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dec:	4b51      	ldr	r3, [pc, #324]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001df2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dfa:	494e      	ldr	r1, [pc, #312]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e02:	e001      	b.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e04:	7cfb      	ldrb	r3, [r7, #19]
 8001e06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 809e 	beq.w	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e1a:	4b46      	ldr	r3, [pc, #280]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00d      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e30:	4b40      	ldr	r3, [pc, #256]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e34:	4a3f      	ldr	r2, [pc, #252]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a39      	ldr	r2, [pc, #228]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e58:	f7fe fe52 	bl	8000b00 <HAL_GetTick>
 8001e5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e5e:	e009      	b.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e60:	f7fe fe4e 	bl	8000b00 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d902      	bls.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	74fb      	strb	r3, [r7, #19]
        break;
 8001e72:	e005      	b.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e74:	4b30      	ldr	r3, [pc, #192]	@ (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ef      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001e80:	7cfb      	ldrb	r3, [r7, #19]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d15a      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e86:	4b2b      	ldr	r3, [pc, #172]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01e      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d019      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ea2:	4b24      	ldr	r3, [pc, #144]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001eac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001eae:	4b21      	ldr	r3, [pc, #132]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb4:	4a1f      	ldr	r2, [pc, #124]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ec6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ece:	4a19      	ldr	r2, [pc, #100]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d016      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7fe fe0e 	bl	8000b00 <HAL_GetTick>
 8001ee4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee6:	e00b      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee8:	f7fe fe0a 	bl	8000b00 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d902      	bls.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	74fb      	strb	r3, [r7, #19]
            break;
 8001efe:	e006      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0ec      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001f0e:	7cfb      	ldrb	r3, [r7, #19]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10b      	bne.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f14:	4b07      	ldr	r3, [pc, #28]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f1a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f22:	4904      	ldr	r1, [pc, #16]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f2a:	e009      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f2c:	7cfb      	ldrb	r3, [r7, #19]
 8001f2e:	74bb      	strb	r3, [r7, #18]
 8001f30:	e006      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f3c:	7cfb      	ldrb	r3, [r7, #19]
 8001f3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f40:	7c7b      	ldrb	r3, [r7, #17]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d105      	bne.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f46:	4b8a      	ldr	r3, [pc, #552]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4a:	4a89      	ldr	r2, [pc, #548]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f50:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00a      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f5e:	4b84      	ldr	r3, [pc, #528]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f64:	f023 0203 	bic.w	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4980      	ldr	r1, [pc, #512]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00a      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f80:	4b7b      	ldr	r3, [pc, #492]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f86:	f023 020c 	bic.w	r2, r3, #12
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	4978      	ldr	r1, [pc, #480]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0320 	and.w	r3, r3, #32
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00a      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fa2:	4b73      	ldr	r3, [pc, #460]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb0:	496f      	ldr	r1, [pc, #444]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00a      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fca:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd2:	4967      	ldr	r1, [pc, #412]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00a      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fe6:	4b62      	ldr	r3, [pc, #392]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff4:	495e      	ldr	r1, [pc, #376]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00a      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002008:	4b59      	ldr	r3, [pc, #356]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800200e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002016:	4956      	ldr	r1, [pc, #344]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002018:	4313      	orrs	r3, r2
 800201a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00a      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800202a:	4b51      	ldr	r3, [pc, #324]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800202c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002030:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002038:	494d      	ldr	r1, [pc, #308]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d028      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800204c:	4b48      	ldr	r3, [pc, #288]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002052:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	4945      	ldr	r1, [pc, #276]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800206a:	d106      	bne.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800206c:	4b40      	ldr	r3, [pc, #256]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4a3f      	ldr	r2, [pc, #252]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002072:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002076:	60d3      	str	r3, [r2, #12]
 8002078:	e011      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002082:	d10c      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3304      	adds	r3, #4
 8002088:	2101      	movs	r1, #1
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f882 	bl	8002194 <RCCEx_PLLSAI1_Config>
 8002090:	4603      	mov	r3, r0
 8002092:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002094:	7cfb      	ldrb	r3, [r7, #19]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800209a:	7cfb      	ldrb	r3, [r7, #19]
 800209c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d028      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020aa:	4b31      	ldr	r3, [pc, #196]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b8:	492d      	ldr	r1, [pc, #180]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020c8:	d106      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020ca:	4b29      	ldr	r3, [pc, #164]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	4a28      	ldr	r2, [pc, #160]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020d4:	60d3      	str	r3, [r2, #12]
 80020d6:	e011      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020e0:	d10c      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3304      	adds	r3, #4
 80020e6:	2101      	movs	r1, #1
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 f853 	bl	8002194 <RCCEx_PLLSAI1_Config>
 80020ee:	4603      	mov	r3, r0
 80020f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020f2:	7cfb      	ldrb	r3, [r7, #19]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80020f8:	7cfb      	ldrb	r3, [r7, #19]
 80020fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01c      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002108:	4b19      	ldr	r3, [pc, #100]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002116:	4916      	ldr	r1, [pc, #88]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002122:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002126:	d10c      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3304      	adds	r3, #4
 800212c:	2102      	movs	r1, #2
 800212e:	4618      	mov	r0, r3
 8002130:	f000 f830 	bl	8002194 <RCCEx_PLLSAI1_Config>
 8002134:	4603      	mov	r3, r0
 8002136:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002138:	7cfb      	ldrb	r3, [r7, #19]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800213e:	7cfb      	ldrb	r3, [r7, #19]
 8002140:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00a      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800214e:	4b08      	ldr	r3, [pc, #32]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002154:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215c:	4904      	ldr	r1, [pc, #16]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002164:	7cbb      	ldrb	r3, [r7, #18]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000

08002174 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002178:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a04      	ldr	r2, [pc, #16]	@ (8002190 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	6013      	str	r3, [r2, #0]
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000

08002194 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021a2:	4b74      	ldr	r3, [pc, #464]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d018      	beq.n	80021e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80021ae:	4b71      	ldr	r3, [pc, #452]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f003 0203 	and.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d10d      	bne.n	80021da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
       ||
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80021c6:	4b6b      	ldr	r3, [pc, #428]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
       ||
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d047      	beq.n	800226a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
 80021de:	e044      	b.n	800226a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d018      	beq.n	800221a <RCCEx_PLLSAI1_Config+0x86>
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d825      	bhi.n	8002238 <RCCEx_PLLSAI1_Config+0xa4>
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d002      	beq.n	80021f6 <RCCEx_PLLSAI1_Config+0x62>
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d009      	beq.n	8002208 <RCCEx_PLLSAI1_Config+0x74>
 80021f4:	e020      	b.n	8002238 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80021f6:	4b5f      	ldr	r3, [pc, #380]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d11d      	bne.n	800223e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002206:	e01a      	b.n	800223e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002208:	4b5a      	ldr	r3, [pc, #360]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002210:	2b00      	cmp	r3, #0
 8002212:	d116      	bne.n	8002242 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002218:	e013      	b.n	8002242 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800221a:	4b56      	ldr	r3, [pc, #344]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10f      	bne.n	8002246 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002226:	4b53      	ldr	r3, [pc, #332]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d109      	bne.n	8002246 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002236:	e006      	b.n	8002246 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
      break;
 800223c:	e004      	b.n	8002248 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800223e:	bf00      	nop
 8002240:	e002      	b.n	8002248 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002242:	bf00      	nop
 8002244:	e000      	b.n	8002248 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002246:	bf00      	nop
    }

    if(status == HAL_OK)
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10d      	bne.n	800226a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800224e:	4b49      	ldr	r3, [pc, #292]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	3b01      	subs	r3, #1
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	430b      	orrs	r3, r1
 8002264:	4943      	ldr	r1, [pc, #268]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002266:	4313      	orrs	r3, r2
 8002268:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d17c      	bne.n	800236a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002270:	4b40      	ldr	r3, [pc, #256]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a3f      	ldr	r2, [pc, #252]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002276:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800227a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800227c:	f7fe fc40 	bl	8000b00 <HAL_GetTick>
 8002280:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002282:	e009      	b.n	8002298 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002284:	f7fe fc3c 	bl	8000b00 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d902      	bls.n	8002298 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	73fb      	strb	r3, [r7, #15]
        break;
 8002296:	e005      	b.n	80022a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002298:	4b36      	ldr	r3, [pc, #216]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1ef      	bne.n	8002284 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d15f      	bne.n	800236a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d110      	bne.n	80022d2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022b0:	4b30      	ldr	r3, [pc, #192]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80022b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6892      	ldr	r2, [r2, #8]
 80022c0:	0211      	lsls	r1, r2, #8
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68d2      	ldr	r2, [r2, #12]
 80022c6:	06d2      	lsls	r2, r2, #27
 80022c8:	430a      	orrs	r2, r1
 80022ca:	492a      	ldr	r1, [pc, #168]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	610b      	str	r3, [r1, #16]
 80022d0:	e027      	b.n	8002322 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d112      	bne.n	80022fe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022d8:	4b26      	ldr	r3, [pc, #152]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80022e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6892      	ldr	r2, [r2, #8]
 80022e8:	0211      	lsls	r1, r2, #8
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6912      	ldr	r2, [r2, #16]
 80022ee:	0852      	lsrs	r2, r2, #1
 80022f0:	3a01      	subs	r2, #1
 80022f2:	0552      	lsls	r2, r2, #21
 80022f4:	430a      	orrs	r2, r1
 80022f6:	491f      	ldr	r1, [pc, #124]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	610b      	str	r3, [r1, #16]
 80022fc:	e011      	b.n	8002322 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002306:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6892      	ldr	r2, [r2, #8]
 800230e:	0211      	lsls	r1, r2, #8
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6952      	ldr	r2, [r2, #20]
 8002314:	0852      	lsrs	r2, r2, #1
 8002316:	3a01      	subs	r2, #1
 8002318:	0652      	lsls	r2, r2, #25
 800231a:	430a      	orrs	r2, r1
 800231c:	4915      	ldr	r1, [pc, #84]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 800231e:	4313      	orrs	r3, r2
 8002320:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002322:	4b14      	ldr	r3, [pc, #80]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a13      	ldr	r2, [pc, #76]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002328:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800232c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232e:	f7fe fbe7 	bl	8000b00 <HAL_GetTick>
 8002332:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002334:	e009      	b.n	800234a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002336:	f7fe fbe3 	bl	8000b00 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d902      	bls.n	800234a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	73fb      	strb	r3, [r7, #15]
          break;
 8002348:	e005      	b.n	8002356 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800234a:	4b0a      	ldr	r3, [pc, #40]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0ef      	beq.n	8002336 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d106      	bne.n	800236a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800235c:	4b05      	ldr	r3, [pc, #20]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4903      	ldr	r1, [pc, #12]	@ (8002374 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002366:	4313      	orrs	r3, r2
 8002368:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800236a:	7bfb      	ldrb	r3, [r7, #15]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000

08002378 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e095      	b.n	80024b6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	2b00      	cmp	r3, #0
 8002390:	d108      	bne.n	80023a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800239a:	d009      	beq.n	80023b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
 80023a2:	e005      	b.n	80023b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7fe fa16 	bl	80007fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80023f0:	d902      	bls.n	80023f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	e002      	b.n	80023fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002406:	d007      	beq.n	8002418 <HAL_SPI_Init+0xa0>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002410:	d002      	beq.n	8002418 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800245a:	ea42 0103 	orr.w	r1, r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002462:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	0c1b      	lsrs	r3, r3, #16
 8002474:	f003 0204 	and.w	r2, r3, #4
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002494:	ea42 0103 	orr.w	r1, r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b088      	sub	sp, #32
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	4613      	mov	r3, r2
 80024cc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024ce:	f7fe fb17 	bl	8000b00 <HAL_GetTick>
 80024d2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d001      	beq.n	80024e8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80024e4:	2302      	movs	r3, #2
 80024e6:	e15c      	b.n	80027a2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_SPI_Transmit+0x36>
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e154      	b.n	80027a2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_SPI_Transmit+0x48>
 8002502:	2302      	movs	r3, #2
 8002504:	e14d      	b.n	80027a2 <HAL_SPI_Transmit+0x2e4>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2203      	movs	r2, #3
 8002512:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	88fa      	ldrh	r2, [r7, #6]
 8002526:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	88fa      	ldrh	r2, [r7, #6]
 800252c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002558:	d10f      	bne.n	800257a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002568:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002578:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002584:	2b40      	cmp	r3, #64	@ 0x40
 8002586:	d007      	beq.n	8002598 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002596:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025a0:	d952      	bls.n	8002648 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_SPI_Transmit+0xf2>
 80025aa:	8b7b      	ldrh	r3, [r7, #26]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d145      	bne.n	800263c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b4:	881a      	ldrh	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c0:	1c9a      	adds	r2, r3, #2
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025d4:	e032      	b.n	800263c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d112      	bne.n	800260a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e8:	881a      	ldrh	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f4:	1c9a      	adds	r2, r3, #2
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002608:	e018      	b.n	800263c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800260a:	f7fe fa79 	bl	8000b00 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d803      	bhi.n	8002622 <HAL_SPI_Transmit+0x164>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002620:	d102      	bne.n	8002628 <HAL_SPI_Transmit+0x16a>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d109      	bne.n	800263c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e0b2      	b.n	80027a2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1c7      	bne.n	80025d6 <HAL_SPI_Transmit+0x118>
 8002646:	e083      	b.n	8002750 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <HAL_SPI_Transmit+0x198>
 8002650:	8b7b      	ldrh	r3, [r7, #26]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d177      	bne.n	8002746 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800265a:	b29b      	uxth	r3, r3
 800265c:	2b01      	cmp	r3, #1
 800265e:	d912      	bls.n	8002686 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002664:	881a      	ldrh	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002670:	1c9a      	adds	r2, r3, #2
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b02      	subs	r3, #2
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002684:	e05f      	b.n	8002746 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	330c      	adds	r3, #12
 8002690:	7812      	ldrb	r2, [r2, #0]
 8002692:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80026ac:	e04b      	b.n	8002746 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d12b      	bne.n	8002714 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d912      	bls.n	80026ec <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ca:	881a      	ldrh	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d6:	1c9a      	adds	r2, r3, #2
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b02      	subs	r3, #2
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80026ea:	e02c      	b.n	8002746 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	330c      	adds	r3, #12
 80026f6:	7812      	ldrb	r2, [r2, #0]
 80026f8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002712:	e018      	b.n	8002746 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002714:	f7fe f9f4 	bl	8000b00 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d803      	bhi.n	800272c <HAL_SPI_Transmit+0x26e>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800272a:	d102      	bne.n	8002732 <HAL_SPI_Transmit+0x274>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e02d      	b.n	80027a2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800274a:	b29b      	uxth	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1ae      	bne.n	80026ae <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	6839      	ldr	r1, [r7, #0]
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 fb65 	bl	8002e24 <SPI_EndRxTxTransaction>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2220      	movs	r2, #32
 8002764:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10a      	bne.n	8002784 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80027a0:	2300      	movs	r3, #0
  }
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3720      	adds	r7, #32
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b08a      	sub	sp, #40	@ 0x28
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027b8:	2301      	movs	r3, #1
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027bc:	f7fe f9a0 	bl	8000b00 <HAL_GetTick>
 80027c0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80027c8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80027d0:	887b      	ldrh	r3, [r7, #2]
 80027d2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80027d4:	887b      	ldrh	r3, [r7, #2]
 80027d6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027d8:	7ffb      	ldrb	r3, [r7, #31]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d00c      	beq.n	80027f8 <HAL_SPI_TransmitReceive+0x4e>
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027e4:	d106      	bne.n	80027f4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <HAL_SPI_TransmitReceive+0x4a>
 80027ee:	7ffb      	ldrb	r3, [r7, #31]
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d001      	beq.n	80027f8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80027f4:	2302      	movs	r3, #2
 80027f6:	e1f3      	b.n	8002be0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_SPI_TransmitReceive+0x60>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <HAL_SPI_TransmitReceive+0x60>
 8002804:	887b      	ldrh	r3, [r7, #2]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e1e8      	b.n	8002be0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_SPI_TransmitReceive+0x72>
 8002818:	2302      	movs	r3, #2
 800281a:	e1e1      	b.n	8002be0 <HAL_SPI_TransmitReceive+0x436>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b04      	cmp	r3, #4
 800282e:	d003      	beq.n	8002838 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2205      	movs	r2, #5
 8002834:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	887a      	ldrh	r2, [r7, #2]
 8002848:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	887a      	ldrh	r2, [r7, #2]
 8002850:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	887a      	ldrh	r2, [r7, #2]
 800285e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	887a      	ldrh	r2, [r7, #2]
 8002864:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800287a:	d802      	bhi.n	8002882 <HAL_SPI_TransmitReceive+0xd8>
 800287c:	8abb      	ldrh	r3, [r7, #20]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d908      	bls.n	8002894 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	e007      	b.n	80028a4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80028a2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ae:	2b40      	cmp	r3, #64	@ 0x40
 80028b0:	d007      	beq.n	80028c2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028ca:	f240 8083 	bls.w	80029d4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <HAL_SPI_TransmitReceive+0x132>
 80028d6:	8afb      	ldrh	r3, [r7, #22]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d16f      	bne.n	80029bc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e0:	881a      	ldrh	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ec:	1c9a      	adds	r2, r3, #2
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002900:	e05c      	b.n	80029bc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b02      	cmp	r3, #2
 800290e:	d11b      	bne.n	8002948 <HAL_SPI_TransmitReceive+0x19e>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d016      	beq.n	8002948 <HAL_SPI_TransmitReceive+0x19e>
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	2b01      	cmp	r3, #1
 800291e:	d113      	bne.n	8002948 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002924:	881a      	ldrh	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002930:	1c9a      	adds	r2, r3, #2
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b01      	cmp	r3, #1
 8002954:	d11c      	bne.n	8002990 <HAL_SPI_TransmitReceive+0x1e6>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d016      	beq.n	8002990 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296c:	b292      	uxth	r2, r2
 800296e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	1c9a      	adds	r2, r3, #2
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800298c:	2301      	movs	r3, #1
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002990:	f7fe f8b6 	bl	8000b00 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800299c:	429a      	cmp	r2, r3
 800299e:	d80d      	bhi.n	80029bc <HAL_SPI_TransmitReceive+0x212>
 80029a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029a6:	d009      	beq.n	80029bc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e111      	b.n	8002be0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d19d      	bne.n	8002902 <HAL_SPI_TransmitReceive+0x158>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d197      	bne.n	8002902 <HAL_SPI_TransmitReceive+0x158>
 80029d2:	e0e5      	b.n	8002ba0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_SPI_TransmitReceive+0x23a>
 80029dc:	8afb      	ldrh	r3, [r7, #22]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	f040 80d1 	bne.w	8002b86 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d912      	bls.n	8002a14 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f2:	881a      	ldrh	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029fe:	1c9a      	adds	r2, r3, #2
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b02      	subs	r3, #2
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a12:	e0b8      	b.n	8002b86 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	330c      	adds	r3, #12
 8002a1e:	7812      	ldrb	r2, [r2, #0]
 8002a20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a3a:	e0a4      	b.n	8002b86 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d134      	bne.n	8002ab4 <HAL_SPI_TransmitReceive+0x30a>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d02f      	beq.n	8002ab4 <HAL_SPI_TransmitReceive+0x30a>
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d12c      	bne.n	8002ab4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d912      	bls.n	8002a8a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a68:	881a      	ldrh	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a74:	1c9a      	adds	r2, r3, #2
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b02      	subs	r3, #2
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a88:	e012      	b.n	8002ab0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	330c      	adds	r3, #12
 8002a94:	7812      	ldrb	r2, [r2, #0]
 8002a96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d148      	bne.n	8002b54 <HAL_SPI_TransmitReceive+0x3aa>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d042      	beq.n	8002b54 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d923      	bls.n	8002b22 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	b292      	uxth	r2, r2
 8002ae6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aec:	1c9a      	adds	r2, r3, #2
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b02      	subs	r3, #2
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d81f      	bhi.n	8002b50 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	e016      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f103 020c 	add.w	r2, r3, #12
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	7812      	ldrb	r2, [r2, #0]
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b50:	2301      	movs	r3, #1
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b54:	f7fd ffd4 	bl	8000b00 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d803      	bhi.n	8002b6c <HAL_SPI_TransmitReceive+0x3c2>
 8002b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b6a:	d102      	bne.n	8002b72 <HAL_SPI_TransmitReceive+0x3c8>
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d109      	bne.n	8002b86 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e02c      	b.n	8002be0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f47f af55 	bne.w	8002a3c <HAL_SPI_TransmitReceive+0x292>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f47f af4e 	bne.w	8002a3c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ba0:	6a3a      	ldr	r2, [r7, #32]
 8002ba2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f93d 	bl	8002e24 <SPI_EndRxTxTransaction>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e00e      	b.n	8002be0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8002bde:	2300      	movs	r3, #0
  }
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3728      	adds	r7, #40	@ 0x28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bf8:	f7fd ff82 	bl	8000b00 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	4413      	add	r3, r2
 8002c06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c08:	f7fd ff7a 	bl	8000b00 <HAL_GetTick>
 8002c0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c0e:	4b39      	ldr	r3, [pc, #228]	@ (8002cf4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	015b      	lsls	r3, r3, #5
 8002c14:	0d1b      	lsrs	r3, r3, #20
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	fb02 f303 	mul.w	r3, r2, r3
 8002c1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c1e:	e054      	b.n	8002cca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c26:	d050      	beq.n	8002cca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c28:	f7fd ff6a 	bl	8000b00 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d902      	bls.n	8002c3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d13d      	bne.n	8002cba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c56:	d111      	bne.n	8002c7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c60:	d004      	beq.n	8002c6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c6a:	d107      	bne.n	8002c7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c84:	d10f      	bne.n	8002ca6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ca4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e017      	b.n	8002cea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	bf0c      	ite	eq
 8002cda:	2301      	moveq	r3, #1
 8002cdc:	2300      	movne	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d19b      	bne.n	8002c20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000000 	.word	0x20000000

08002cf8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	@ 0x28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002d0a:	f7fd fef9 	bl	8000b00 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	4413      	add	r3, r2
 8002d18:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002d1a:	f7fd fef1 	bl	8000b00 <HAL_GetTick>
 8002d1e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002d28:	4b3d      	ldr	r3, [pc, #244]	@ (8002e20 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00da      	lsls	r2, r3, #3
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	0d1b      	lsrs	r3, r3, #20
 8002d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002d40:	e060      	b.n	8002e04 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002d48:	d107      	bne.n	8002d5a <SPI_WaitFifoStateUntilTimeout+0x62>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d104      	bne.n	8002d5a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d60:	d050      	beq.n	8002e04 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d62:	f7fd fecd 	bl	8000b00 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d902      	bls.n	8002d78 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d13d      	bne.n	8002df4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d90:	d111      	bne.n	8002db6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d9a:	d004      	beq.n	8002da6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002da4:	d107      	bne.n	8002db6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002db4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dbe:	d10f      	bne.n	8002de0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dde:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e010      	b.n	8002e16 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d196      	bne.n	8002d42 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3728      	adds	r7, #40	@ 0x28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000000 	.word	0x20000000

08002e24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f7ff ff5b 	bl	8002cf8 <SPI_WaitFifoStateUntilTimeout>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e4c:	f043 0220 	orr.w	r2, r3, #32
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e027      	b.n	8002ea8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2180      	movs	r1, #128	@ 0x80
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f7ff fec0 	bl	8002be8 <SPI_WaitFlagStateUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e72:	f043 0220 	orr.w	r2, r3, #32
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e014      	b.n	8002ea8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7ff ff34 	bl	8002cf8 <SPI_WaitFifoStateUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9a:	f043 0220 	orr.w	r2, r3, #32
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e000      	b.n	8002ea8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e040      	b.n	8002f44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fd fcd6 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2224      	movs	r2, #36	@ 0x24
 8002edc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0201 	bic.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fa54 	bl	80033a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f825 	bl	8002f4c <UART_SetConfig>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e01b      	b.n	8002f44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fad3 	bl	80034e8 <UART_CheckIdleState>
 8002f42:	4603      	mov	r3, r0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f50:	b08a      	sub	sp, #40	@ 0x28
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4bb4      	ldr	r3, [pc, #720]	@ (800324c <UART_SetConfig+0x300>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f84:	430b      	orrs	r3, r1
 8002f86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4aa9      	ldr	r2, [pc, #676]	@ (8003250 <UART_SetConfig+0x304>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4aa0      	ldr	r2, [pc, #640]	@ (8003254 <UART_SetConfig+0x308>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d126      	bne.n	8003024 <UART_SetConfig+0xd8>
 8002fd6:	4ba0      	ldr	r3, [pc, #640]	@ (8003258 <UART_SetConfig+0x30c>)
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d81b      	bhi.n	800301c <UART_SetConfig+0xd0>
 8002fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fec <UART_SetConfig+0xa0>)
 8002fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fea:	bf00      	nop
 8002fec:	08002ffd 	.word	0x08002ffd
 8002ff0:	0800300d 	.word	0x0800300d
 8002ff4:	08003005 	.word	0x08003005
 8002ff8:	08003015 	.word	0x08003015
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003002:	e080      	b.n	8003106 <UART_SetConfig+0x1ba>
 8003004:	2302      	movs	r3, #2
 8003006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800300a:	e07c      	b.n	8003106 <UART_SetConfig+0x1ba>
 800300c:	2304      	movs	r3, #4
 800300e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003012:	e078      	b.n	8003106 <UART_SetConfig+0x1ba>
 8003014:	2308      	movs	r3, #8
 8003016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800301a:	e074      	b.n	8003106 <UART_SetConfig+0x1ba>
 800301c:	2310      	movs	r3, #16
 800301e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003022:	e070      	b.n	8003106 <UART_SetConfig+0x1ba>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a8c      	ldr	r2, [pc, #560]	@ (800325c <UART_SetConfig+0x310>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d138      	bne.n	80030a0 <UART_SetConfig+0x154>
 800302e:	4b8a      	ldr	r3, [pc, #552]	@ (8003258 <UART_SetConfig+0x30c>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b0c      	cmp	r3, #12
 800303a:	d82d      	bhi.n	8003098 <UART_SetConfig+0x14c>
 800303c:	a201      	add	r2, pc, #4	@ (adr r2, 8003044 <UART_SetConfig+0xf8>)
 800303e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003042:	bf00      	nop
 8003044:	08003079 	.word	0x08003079
 8003048:	08003099 	.word	0x08003099
 800304c:	08003099 	.word	0x08003099
 8003050:	08003099 	.word	0x08003099
 8003054:	08003089 	.word	0x08003089
 8003058:	08003099 	.word	0x08003099
 800305c:	08003099 	.word	0x08003099
 8003060:	08003099 	.word	0x08003099
 8003064:	08003081 	.word	0x08003081
 8003068:	08003099 	.word	0x08003099
 800306c:	08003099 	.word	0x08003099
 8003070:	08003099 	.word	0x08003099
 8003074:	08003091 	.word	0x08003091
 8003078:	2300      	movs	r3, #0
 800307a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800307e:	e042      	b.n	8003106 <UART_SetConfig+0x1ba>
 8003080:	2302      	movs	r3, #2
 8003082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003086:	e03e      	b.n	8003106 <UART_SetConfig+0x1ba>
 8003088:	2304      	movs	r3, #4
 800308a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800308e:	e03a      	b.n	8003106 <UART_SetConfig+0x1ba>
 8003090:	2308      	movs	r3, #8
 8003092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003096:	e036      	b.n	8003106 <UART_SetConfig+0x1ba>
 8003098:	2310      	movs	r3, #16
 800309a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800309e:	e032      	b.n	8003106 <UART_SetConfig+0x1ba>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a6a      	ldr	r2, [pc, #424]	@ (8003250 <UART_SetConfig+0x304>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d12a      	bne.n	8003100 <UART_SetConfig+0x1b4>
 80030aa:	4b6b      	ldr	r3, [pc, #428]	@ (8003258 <UART_SetConfig+0x30c>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030b8:	d01a      	beq.n	80030f0 <UART_SetConfig+0x1a4>
 80030ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030be:	d81b      	bhi.n	80030f8 <UART_SetConfig+0x1ac>
 80030c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030c4:	d00c      	beq.n	80030e0 <UART_SetConfig+0x194>
 80030c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030ca:	d815      	bhi.n	80030f8 <UART_SetConfig+0x1ac>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <UART_SetConfig+0x18c>
 80030d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030d4:	d008      	beq.n	80030e8 <UART_SetConfig+0x19c>
 80030d6:	e00f      	b.n	80030f8 <UART_SetConfig+0x1ac>
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030de:	e012      	b.n	8003106 <UART_SetConfig+0x1ba>
 80030e0:	2302      	movs	r3, #2
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030e6:	e00e      	b.n	8003106 <UART_SetConfig+0x1ba>
 80030e8:	2304      	movs	r3, #4
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ee:	e00a      	b.n	8003106 <UART_SetConfig+0x1ba>
 80030f0:	2308      	movs	r3, #8
 80030f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030f6:	e006      	b.n	8003106 <UART_SetConfig+0x1ba>
 80030f8:	2310      	movs	r3, #16
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030fe:	e002      	b.n	8003106 <UART_SetConfig+0x1ba>
 8003100:	2310      	movs	r3, #16
 8003102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a51      	ldr	r2, [pc, #324]	@ (8003250 <UART_SetConfig+0x304>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d17a      	bne.n	8003206 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003110:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003114:	2b08      	cmp	r3, #8
 8003116:	d824      	bhi.n	8003162 <UART_SetConfig+0x216>
 8003118:	a201      	add	r2, pc, #4	@ (adr r2, 8003120 <UART_SetConfig+0x1d4>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003145 	.word	0x08003145
 8003124:	08003163 	.word	0x08003163
 8003128:	0800314d 	.word	0x0800314d
 800312c:	08003163 	.word	0x08003163
 8003130:	08003153 	.word	0x08003153
 8003134:	08003163 	.word	0x08003163
 8003138:	08003163 	.word	0x08003163
 800313c:	08003163 	.word	0x08003163
 8003140:	0800315b 	.word	0x0800315b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003144:	f7fe fd94 	bl	8001c70 <HAL_RCC_GetPCLK1Freq>
 8003148:	61f8      	str	r0, [r7, #28]
        break;
 800314a:	e010      	b.n	800316e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800314c:	4b44      	ldr	r3, [pc, #272]	@ (8003260 <UART_SetConfig+0x314>)
 800314e:	61fb      	str	r3, [r7, #28]
        break;
 8003150:	e00d      	b.n	800316e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003152:	f7fe fcf5 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8003156:	61f8      	str	r0, [r7, #28]
        break;
 8003158:	e009      	b.n	800316e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800315a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800315e:	61fb      	str	r3, [r7, #28]
        break;
 8003160:	e005      	b.n	800316e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800316c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 8107 	beq.w	8003384 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4413      	add	r3, r2
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	429a      	cmp	r2, r3
 8003184:	d305      	bcc.n	8003192 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	429a      	cmp	r2, r3
 8003190:	d903      	bls.n	800319a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003198:	e0f4      	b.n	8003384 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	2200      	movs	r2, #0
 800319e:	461c      	mov	r4, r3
 80031a0:	4615      	mov	r5, r2
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	022b      	lsls	r3, r5, #8
 80031ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80031b0:	0222      	lsls	r2, r4, #8
 80031b2:	68f9      	ldr	r1, [r7, #12]
 80031b4:	6849      	ldr	r1, [r1, #4]
 80031b6:	0849      	lsrs	r1, r1, #1
 80031b8:	2000      	movs	r0, #0
 80031ba:	4688      	mov	r8, r1
 80031bc:	4681      	mov	r9, r0
 80031be:	eb12 0a08 	adds.w	sl, r2, r8
 80031c2:	eb43 0b09 	adc.w	fp, r3, r9
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031d4:	4650      	mov	r0, sl
 80031d6:	4659      	mov	r1, fp
 80031d8:	f7fc fff8 	bl	80001cc <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4613      	mov	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031ea:	d308      	bcc.n	80031fe <UART_SetConfig+0x2b2>
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031f2:	d204      	bcs.n	80031fe <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	60da      	str	r2, [r3, #12]
 80031fc:	e0c2      	b.n	8003384 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003204:	e0be      	b.n	8003384 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800320e:	d16a      	bne.n	80032e6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003210:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003214:	2b08      	cmp	r3, #8
 8003216:	d834      	bhi.n	8003282 <UART_SetConfig+0x336>
 8003218:	a201      	add	r2, pc, #4	@ (adr r2, 8003220 <UART_SetConfig+0x2d4>)
 800321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321e:	bf00      	nop
 8003220:	08003245 	.word	0x08003245
 8003224:	08003265 	.word	0x08003265
 8003228:	0800326d 	.word	0x0800326d
 800322c:	08003283 	.word	0x08003283
 8003230:	08003273 	.word	0x08003273
 8003234:	08003283 	.word	0x08003283
 8003238:	08003283 	.word	0x08003283
 800323c:	08003283 	.word	0x08003283
 8003240:	0800327b 	.word	0x0800327b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003244:	f7fe fd14 	bl	8001c70 <HAL_RCC_GetPCLK1Freq>
 8003248:	61f8      	str	r0, [r7, #28]
        break;
 800324a:	e020      	b.n	800328e <UART_SetConfig+0x342>
 800324c:	efff69f3 	.word	0xefff69f3
 8003250:	40008000 	.word	0x40008000
 8003254:	40013800 	.word	0x40013800
 8003258:	40021000 	.word	0x40021000
 800325c:	40004400 	.word	0x40004400
 8003260:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003264:	f7fe fd1a 	bl	8001c9c <HAL_RCC_GetPCLK2Freq>
 8003268:	61f8      	str	r0, [r7, #28]
        break;
 800326a:	e010      	b.n	800328e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800326c:	4b4c      	ldr	r3, [pc, #304]	@ (80033a0 <UART_SetConfig+0x454>)
 800326e:	61fb      	str	r3, [r7, #28]
        break;
 8003270:	e00d      	b.n	800328e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003272:	f7fe fc65 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8003276:	61f8      	str	r0, [r7, #28]
        break;
 8003278:	e009      	b.n	800328e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800327a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800327e:	61fb      	str	r3, [r7, #28]
        break;
 8003280:	e005      	b.n	800328e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800328c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d077      	beq.n	8003384 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	005a      	lsls	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	085b      	lsrs	r3, r3, #1
 800329e:	441a      	add	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	2b0f      	cmp	r3, #15
 80032ae:	d916      	bls.n	80032de <UART_SetConfig+0x392>
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b6:	d212      	bcs.n	80032de <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f023 030f 	bic.w	r3, r3, #15
 80032c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	8afb      	ldrh	r3, [r7, #22]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	8afa      	ldrh	r2, [r7, #22]
 80032da:	60da      	str	r2, [r3, #12]
 80032dc:	e052      	b.n	8003384 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032e4:	e04e      	b.n	8003384 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d827      	bhi.n	800333e <UART_SetConfig+0x3f2>
 80032ee:	a201      	add	r2, pc, #4	@ (adr r2, 80032f4 <UART_SetConfig+0x3a8>)
 80032f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f4:	08003319 	.word	0x08003319
 80032f8:	08003321 	.word	0x08003321
 80032fc:	08003329 	.word	0x08003329
 8003300:	0800333f 	.word	0x0800333f
 8003304:	0800332f 	.word	0x0800332f
 8003308:	0800333f 	.word	0x0800333f
 800330c:	0800333f 	.word	0x0800333f
 8003310:	0800333f 	.word	0x0800333f
 8003314:	08003337 	.word	0x08003337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003318:	f7fe fcaa 	bl	8001c70 <HAL_RCC_GetPCLK1Freq>
 800331c:	61f8      	str	r0, [r7, #28]
        break;
 800331e:	e014      	b.n	800334a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003320:	f7fe fcbc 	bl	8001c9c <HAL_RCC_GetPCLK2Freq>
 8003324:	61f8      	str	r0, [r7, #28]
        break;
 8003326:	e010      	b.n	800334a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003328:	4b1d      	ldr	r3, [pc, #116]	@ (80033a0 <UART_SetConfig+0x454>)
 800332a:	61fb      	str	r3, [r7, #28]
        break;
 800332c:	e00d      	b.n	800334a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800332e:	f7fe fc07 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8003332:	61f8      	str	r0, [r7, #28]
        break;
 8003334:	e009      	b.n	800334a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800333a:	61fb      	str	r3, [r7, #28]
        break;
 800333c:	e005      	b.n	800334a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003348:	bf00      	nop
    }

    if (pclk != 0U)
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d019      	beq.n	8003384 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	085a      	lsrs	r2, r3, #1
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	441a      	add	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003362:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2b0f      	cmp	r3, #15
 8003368:	d909      	bls.n	800337e <UART_SetConfig+0x432>
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003370:	d205      	bcs.n	800337e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60da      	str	r2, [r3, #12]
 800337c:	e002      	b.n	8003384 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003390:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003394:	4618      	mov	r0, r3
 8003396:	3728      	adds	r7, #40	@ 0x28
 8003398:	46bd      	mov	sp, r7
 800339a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800339e:	bf00      	nop
 80033a0:	00f42400 	.word	0x00f42400

080033a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d01a      	beq.n	80034ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034a2:	d10a      	bne.n	80034ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	605a      	str	r2, [r3, #4]
  }
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b098      	sub	sp, #96	@ 0x60
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034f8:	f7fd fb02 	bl	8000b00 <HAL_GetTick>
 80034fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b08      	cmp	r3, #8
 800350a:	d12e      	bne.n	800356a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800350c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003514:	2200      	movs	r2, #0
 8003516:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f88c 	bl	8003638 <UART_WaitOnFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d021      	beq.n	800356a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800352e:	e853 3f00 	ldrex	r3, [r3]
 8003532:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800353a:	653b      	str	r3, [r7, #80]	@ 0x50
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	461a      	mov	r2, r3
 8003542:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003544:	647b      	str	r3, [r7, #68]	@ 0x44
 8003546:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003548:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800354a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800354c:	e841 2300 	strex	r3, r2, [r1]
 8003550:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1e6      	bne.n	8003526 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e062      	b.n	8003630 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b04      	cmp	r3, #4
 8003576:	d149      	bne.n	800360c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003578:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003580:	2200      	movs	r2, #0
 8003582:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f856 	bl	8003638 <UART_WaitOnFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d03c      	beq.n	800360c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359a:	e853 3f00 	ldrex	r3, [r3]
 800359e:	623b      	str	r3, [r7, #32]
   return(result);
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	461a      	mov	r2, r3
 80035ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80035b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035b8:	e841 2300 	strex	r3, r2, [r1]
 80035bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e6      	bne.n	8003592 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3308      	adds	r3, #8
 80035ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	e853 3f00 	ldrex	r3, [r3]
 80035d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3308      	adds	r3, #8
 80035e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035e4:	61fa      	str	r2, [r7, #28]
 80035e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	69b9      	ldr	r1, [r7, #24]
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	617b      	str	r3, [r7, #20]
   return(result);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e5      	bne.n	80035c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e011      	b.n	8003630 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3758      	adds	r7, #88	@ 0x58
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	4613      	mov	r3, r2
 8003646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003648:	e04f      	b.n	80036ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003650:	d04b      	beq.n	80036ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003652:	f7fd fa55 	bl	8000b00 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	429a      	cmp	r2, r3
 8003660:	d302      	bcc.n	8003668 <UART_WaitOnFlagUntilTimeout+0x30>
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e04e      	b.n	800370a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d037      	beq.n	80036ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b80      	cmp	r3, #128	@ 0x80
 800367e:	d034      	beq.n	80036ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b40      	cmp	r3, #64	@ 0x40
 8003684:	d031      	beq.n	80036ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b08      	cmp	r3, #8
 8003692:	d110      	bne.n	80036b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2208      	movs	r2, #8
 800369a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f838 	bl	8003712 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2208      	movs	r2, #8
 80036a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e029      	b.n	800370a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036c4:	d111      	bne.n	80036ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f81e 	bl	8003712 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e00f      	b.n	800370a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4013      	ands	r3, r2
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	bf0c      	ite	eq
 80036fa:	2301      	moveq	r3, #1
 80036fc:	2300      	movne	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	429a      	cmp	r2, r3
 8003706:	d0a0      	beq.n	800364a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003712:	b480      	push	{r7}
 8003714:	b095      	sub	sp, #84	@ 0x54
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003722:	e853 3f00 	ldrex	r3, [r3]
 8003726:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800372e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003738:	643b      	str	r3, [r7, #64]	@ 0x40
 800373a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800373e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003740:	e841 2300 	strex	r3, r2, [r1]
 8003744:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e6      	bne.n	800371a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3308      	adds	r3, #8
 8003752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	e853 3f00 	ldrex	r3, [r3]
 800375a:	61fb      	str	r3, [r7, #28]
   return(result);
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f023 0301 	bic.w	r3, r3, #1
 8003762:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3308      	adds	r3, #8
 800376a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800376c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800376e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003770:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003774:	e841 2300 	strex	r3, r2, [r1]
 8003778:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e5      	bne.n	800374c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003784:	2b01      	cmp	r3, #1
 8003786:	d118      	bne.n	80037ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	60bb      	str	r3, [r7, #8]
   return(result);
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f023 0310 	bic.w	r3, r3, #16
 800379c:	647b      	str	r3, [r7, #68]	@ 0x44
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037a6:	61bb      	str	r3, [r7, #24]
 80037a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	6979      	ldr	r1, [r7, #20]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	613b      	str	r3, [r7, #16]
   return(result);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e6      	bne.n	8003788 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80037ce:	bf00      	nop
 80037d0:	3754      	adds	r7, #84	@ 0x54
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80037e0:	4904      	ldr	r1, [pc, #16]	@ (80037f4 <MX_FATFS_Init+0x18>)
 80037e2:	4805      	ldr	r0, [pc, #20]	@ (80037f8 <MX_FATFS_Init+0x1c>)
 80037e4:	f002 fee8 	bl	80065b8 <FATFS_LinkDriver>
 80037e8:	4603      	mov	r3, r0
 80037ea:	461a      	mov	r2, r3
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <MX_FATFS_Init+0x20>)
 80037ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80037f0:	bf00      	nop
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20000134 	.word	0x20000134
 80037f8:	2000000c 	.word	0x2000000c
 80037fc:	20000130 	.word	0x20000130

08003800 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003804:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003806:	4618      	mov	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	4618      	mov	r0, r3
 800381e:	f000 f9d3 	bl	8003bc8 <USER_SPI_initialize>
 8003822:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003824:	4618      	mov	r0, r3
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fab1 	bl	8003da0 <USER_SPI_status>
 800383e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	4603      	mov	r3, r0
 8003856:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8003858:	7bf8      	ldrb	r0, [r7, #15]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	68b9      	ldr	r1, [r7, #8]
 8003860:	f000 fab4 	bl	8003dcc <USER_SPI_read>
 8003864:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4603      	mov	r3, r0
 800387c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800387e:	7bf8      	ldrb	r0, [r7, #15]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	f000 fb07 	bl	8003e98 <USER_SPI_write>
 800388a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	603a      	str	r2, [r7, #0]
 800389e:	71fb      	strb	r3, [r7, #7]
 80038a0:	460b      	mov	r3, r1
 80038a2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 80038a4:	79b9      	ldrb	r1, [r7, #6]
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fb70 	bl	8003f90 <USER_SPI_ioctl>
 80038b0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80038c4:	f7fd f91c 	bl	8000b00 <HAL_GetTick>
 80038c8:	4603      	mov	r3, r0
 80038ca:	4a04      	ldr	r2, [pc, #16]	@ (80038dc <SPI_Timer_On+0x20>)
 80038cc:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80038ce:	4a04      	ldr	r2, [pc, #16]	@ (80038e0 <SPI_Timer_On+0x24>)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6013      	str	r3, [r2, #0]
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	2000013c 	.word	0x2000013c
 80038e0:	20000140 	.word	0x20000140

080038e4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80038e8:	f7fd f90a 	bl	8000b00 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <SPI_Timer_Status+0x24>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	1ad2      	subs	r2, r2, r3
 80038f4:	4b05      	ldr	r3, [pc, #20]	@ (800390c <SPI_Timer_Status+0x28>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	bf34      	ite	cc
 80038fc:	2301      	movcc	r3, #1
 80038fe:	2300      	movcs	r3, #0
 8003900:	b2db      	uxtb	r3, r3
}
 8003902:	4618      	mov	r0, r3
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	2000013c 	.word	0x2000013c
 800390c:	20000140 	.word	0x20000140

08003910 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af02      	add	r7, sp, #8
 8003916:	4603      	mov	r3, r0
 8003918:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800391a:	f107 020f 	add.w	r2, r7, #15
 800391e:	1df9      	adds	r1, r7, #7
 8003920:	2332      	movs	r3, #50	@ 0x32
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	2301      	movs	r3, #1
 8003926:	4804      	ldr	r0, [pc, #16]	@ (8003938 <xchg_spi+0x28>)
 8003928:	f7fe ff3f 	bl	80027aa <HAL_SPI_TransmitReceive>
    return rxDat;
 800392c:	7bfb      	ldrb	r3, [r7, #15]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000040 	.word	0x20000040

0800393c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	e00a      	b.n	8003962 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	18d4      	adds	r4, r2, r3
 8003952:	20ff      	movs	r0, #255	@ 0xff
 8003954:	f7ff ffdc 	bl	8003910 <xchg_spi>
 8003958:	4603      	mov	r3, r0
 800395a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	3301      	adds	r3, #1
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d3f0      	bcc.n	800394c <rcvr_spi_multi+0x10>
	}
}
 800396a:	bf00      	nop
 800396c:	bf00      	nop
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	bd90      	pop	{r4, r7, pc}

08003974 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	b29a      	uxth	r2, r3
 8003982:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4803      	ldr	r0, [pc, #12]	@ (8003998 <xmit_spi_multi+0x24>)
 800398a:	f7fe fd98 	bl	80024be <HAL_SPI_Transmit>
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20000040 	.word	0x20000040

0800399c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80039a4:	f7fd f8ac 	bl	8000b00 <HAL_GetTick>
 80039a8:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80039ae:	20ff      	movs	r0, #255	@ 0xff
 80039b0:	f7ff ffae 	bl	8003910 <xchg_spi>
 80039b4:	4603      	mov	r3, r0
 80039b6:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	2bff      	cmp	r3, #255	@ 0xff
 80039bc:	d007      	beq.n	80039ce <wait_ready+0x32>
 80039be:	f7fd f89f 	bl	8000b00 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d8ef      	bhi.n	80039ae <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	2bff      	cmp	r3, #255	@ 0xff
 80039d2:	bf0c      	ite	eq
 80039d4:	2301      	moveq	r3, #1
 80039d6:	2300      	movne	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80039e8:	2201      	movs	r2, #1
 80039ea:	2101      	movs	r1, #1
 80039ec:	4803      	ldr	r0, [pc, #12]	@ (80039fc <despiselect+0x18>)
 80039ee:	f7fd fb07 	bl	8001000 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80039f2:	20ff      	movs	r0, #255	@ 0xff
 80039f4:	f7ff ff8c 	bl	8003910 <xchg_spi>

}
 80039f8:	bf00      	nop
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	48000400 	.word	0x48000400

08003a00 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8003a04:	2200      	movs	r2, #0
 8003a06:	2101      	movs	r1, #1
 8003a08:	4809      	ldr	r0, [pc, #36]	@ (8003a30 <spiselect+0x30>)
 8003a0a:	f7fd faf9 	bl	8001000 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003a0e:	20ff      	movs	r0, #255	@ 0xff
 8003a10:	f7ff ff7e 	bl	8003910 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003a14:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003a18:	f7ff ffc0 	bl	800399c <wait_ready>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <spiselect+0x26>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e002      	b.n	8003a2c <spiselect+0x2c>

	despiselect();
 8003a26:	f7ff ffdd 	bl	80039e4 <despiselect>
	return 0;	/* Timeout */
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	48000400 	.word	0x48000400

08003a34 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8003a3e:	20c8      	movs	r0, #200	@ 0xc8
 8003a40:	f7ff ff3c 	bl	80038bc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003a44:	20ff      	movs	r0, #255	@ 0xff
 8003a46:	f7ff ff63 	bl	8003910 <xchg_spi>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	2bff      	cmp	r3, #255	@ 0xff
 8003a52:	d104      	bne.n	8003a5e <rcvr_datablock+0x2a>
 8003a54:	f7ff ff46 	bl	80038e4 <SPI_Timer_Status>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f2      	bne.n	8003a44 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	2bfe      	cmp	r3, #254	@ 0xfe
 8003a62:	d001      	beq.n	8003a68 <rcvr_datablock+0x34>
 8003a64:	2300      	movs	r3, #0
 8003a66:	e00a      	b.n	8003a7e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003a68:	6839      	ldr	r1, [r7, #0]
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff ff66 	bl	800393c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003a70:	20ff      	movs	r0, #255	@ 0xff
 8003a72:	f7ff ff4d 	bl	8003910 <xchg_spi>
 8003a76:	20ff      	movs	r0, #255	@ 0xff
 8003a78:	f7ff ff4a 	bl	8003910 <xchg_spi>

	return 1;						/* Function succeeded */
 8003a7c:	2301      	movs	r3, #1
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003a92:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003a96:	f7ff ff81 	bl	800399c <wait_ready>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <xmit_datablock+0x1e>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e01e      	b.n	8003ae2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff ff32 	bl	8003910 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	2bfd      	cmp	r3, #253	@ 0xfd
 8003ab0:	d016      	beq.n	8003ae0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003ab2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff ff5c 	bl	8003974 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003abc:	20ff      	movs	r0, #255	@ 0xff
 8003abe:	f7ff ff27 	bl	8003910 <xchg_spi>
 8003ac2:	20ff      	movs	r0, #255	@ 0xff
 8003ac4:	f7ff ff24 	bl	8003910 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003ac8:	20ff      	movs	r0, #255	@ 0xff
 8003aca:	f7ff ff21 	bl	8003910 <xchg_spi>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	2b05      	cmp	r3, #5
 8003ada:	d001      	beq.n	8003ae0 <xmit_datablock+0x5a>
 8003adc:	2300      	movs	r3, #0
 8003ade:	e000      	b.n	8003ae2 <xmit_datablock+0x5c>
	}
	return 1;
 8003ae0:	2301      	movs	r3, #1
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	4603      	mov	r3, r0
 8003af2:	6039      	str	r1, [r7, #0]
 8003af4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	da0e      	bge.n	8003b1c <send_cmd+0x32>
		cmd &= 0x7F;
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b04:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003b06:	2100      	movs	r1, #0
 8003b08:	2037      	movs	r0, #55	@ 0x37
 8003b0a:	f7ff ffee 	bl	8003aea <send_cmd>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8003b12:	7bbb      	ldrb	r3, [r7, #14]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d901      	bls.n	8003b1c <send_cmd+0x32>
 8003b18:	7bbb      	ldrb	r3, [r7, #14]
 8003b1a:	e051      	b.n	8003bc0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	2b0c      	cmp	r3, #12
 8003b20:	d008      	beq.n	8003b34 <send_cmd+0x4a>
		despiselect();
 8003b22:	f7ff ff5f 	bl	80039e4 <despiselect>
		if (!spiselect()) return 0xFF;
 8003b26:	f7ff ff6b 	bl	8003a00 <spiselect>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <send_cmd+0x4a>
 8003b30:	23ff      	movs	r3, #255	@ 0xff
 8003b32:	e045      	b.n	8003bc0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff fee7 	bl	8003910 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	0e1b      	lsrs	r3, r3, #24
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff fee1 	bl	8003910 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	0c1b      	lsrs	r3, r3, #16
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff fedb 	bl	8003910 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	0a1b      	lsrs	r3, r3, #8
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff fed5 	bl	8003910 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff fed0 	bl	8003910 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003b74:	79fb      	ldrb	r3, [r7, #7]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <send_cmd+0x94>
 8003b7a:	2395      	movs	r3, #149	@ 0x95
 8003b7c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d101      	bne.n	8003b88 <send_cmd+0x9e>
 8003b84:	2387      	movs	r3, #135	@ 0x87
 8003b86:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff fec0 	bl	8003910 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	2b0c      	cmp	r3, #12
 8003b94:	d102      	bne.n	8003b9c <send_cmd+0xb2>
 8003b96:	20ff      	movs	r0, #255	@ 0xff
 8003b98:	f7ff feba 	bl	8003910 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003b9c:	230a      	movs	r3, #10
 8003b9e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003ba0:	20ff      	movs	r0, #255	@ 0xff
 8003ba2:	f7ff feb5 	bl	8003910 <xchg_spi>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003baa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	da05      	bge.n	8003bbe <send_cmd+0xd4>
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003bbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003bc8:	b590      	push	{r4, r7, lr}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <USER_SPI_initialize+0x14>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0d6      	b.n	8003d8a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003bdc:	4b6d      	ldr	r3, [pc, #436]	@ (8003d94 <USER_SPI_initialize+0x1cc>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <USER_SPI_initialize+0x2a>
 8003bea:	4b6a      	ldr	r3, [pc, #424]	@ (8003d94 <USER_SPI_initialize+0x1cc>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	e0cb      	b.n	8003d8a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8003bf2:	4b69      	ldr	r3, [pc, #420]	@ (8003d98 <USER_SPI_initialize+0x1d0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003bfc:	4b66      	ldr	r3, [pc, #408]	@ (8003d98 <USER_SPI_initialize+0x1d0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8003c04:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003c06:	230a      	movs	r3, #10
 8003c08:	73fb      	strb	r3, [r7, #15]
 8003c0a:	e005      	b.n	8003c18 <USER_SPI_initialize+0x50>
 8003c0c:	20ff      	movs	r0, #255	@ 0xff
 8003c0e:	f7ff fe7f 	bl	8003910 <xchg_spi>
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f6      	bne.n	8003c0c <USER_SPI_initialize+0x44>

	ty = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003c22:	2100      	movs	r1, #0
 8003c24:	2000      	movs	r0, #0
 8003c26:	f7ff ff60 	bl	8003aea <send_cmd>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	f040 808b 	bne.w	8003d48 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003c32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c36:	f7ff fe41 	bl	80038bc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003c3a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8003c3e:	2008      	movs	r0, #8
 8003c40:	f7ff ff53 	bl	8003aea <send_cmd>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d151      	bne.n	8003cee <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	73fb      	strb	r3, [r7, #15]
 8003c4e:	e00d      	b.n	8003c6c <USER_SPI_initialize+0xa4>
 8003c50:	7bfc      	ldrb	r4, [r7, #15]
 8003c52:	20ff      	movs	r0, #255	@ 0xff
 8003c54:	f7ff fe5c 	bl	8003910 <xchg_spi>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f104 0310 	add.w	r3, r4, #16
 8003c60:	443b      	add	r3, r7
 8003c62:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d9ee      	bls.n	8003c50 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003c72:	7abb      	ldrb	r3, [r7, #10]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d167      	bne.n	8003d48 <USER_SPI_initialize+0x180>
 8003c78:	7afb      	ldrb	r3, [r7, #11]
 8003c7a:	2baa      	cmp	r3, #170	@ 0xaa
 8003c7c:	d164      	bne.n	8003d48 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003c7e:	bf00      	nop
 8003c80:	f7ff fe30 	bl	80038e4 <SPI_Timer_Status>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <USER_SPI_initialize+0xd2>
 8003c8a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003c8e:	20a9      	movs	r0, #169	@ 0xa9
 8003c90:	f7ff ff2b 	bl	8003aea <send_cmd>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f2      	bne.n	8003c80 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003c9a:	f7ff fe23 	bl	80038e4 <SPI_Timer_Status>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d051      	beq.n	8003d48 <USER_SPI_initialize+0x180>
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	203a      	movs	r0, #58	@ 0x3a
 8003ca8:	f7ff ff1f 	bl	8003aea <send_cmd>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d14a      	bne.n	8003d48 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	73fb      	strb	r3, [r7, #15]
 8003cb6:	e00d      	b.n	8003cd4 <USER_SPI_initialize+0x10c>
 8003cb8:	7bfc      	ldrb	r4, [r7, #15]
 8003cba:	20ff      	movs	r0, #255	@ 0xff
 8003cbc:	f7ff fe28 	bl	8003910 <xchg_spi>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f104 0310 	add.w	r3, r4, #16
 8003cc8:	443b      	add	r3, r7
 8003cca:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	73fb      	strb	r3, [r7, #15]
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d9ee      	bls.n	8003cb8 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003cda:	7a3b      	ldrb	r3, [r7, #8]
 8003cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <USER_SPI_initialize+0x120>
 8003ce4:	230c      	movs	r3, #12
 8003ce6:	e000      	b.n	8003cea <USER_SPI_initialize+0x122>
 8003ce8:	2304      	movs	r3, #4
 8003cea:	737b      	strb	r3, [r7, #13]
 8003cec:	e02c      	b.n	8003d48 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003cee:	2100      	movs	r1, #0
 8003cf0:	20a9      	movs	r0, #169	@ 0xa9
 8003cf2:	f7ff fefa 	bl	8003aea <send_cmd>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d804      	bhi.n	8003d06 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	737b      	strb	r3, [r7, #13]
 8003d00:	23a9      	movs	r3, #169	@ 0xa9
 8003d02:	73bb      	strb	r3, [r7, #14]
 8003d04:	e003      	b.n	8003d0e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003d06:	2301      	movs	r3, #1
 8003d08:	737b      	strb	r3, [r7, #13]
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003d0e:	bf00      	nop
 8003d10:	f7ff fde8 	bl	80038e4 <SPI_Timer_Status>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d007      	beq.n	8003d2a <USER_SPI_initialize+0x162>
 8003d1a:	7bbb      	ldrb	r3, [r7, #14]
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff fee3 	bl	8003aea <send_cmd>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f2      	bne.n	8003d10 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003d2a:	f7ff fddb 	bl	80038e4 <SPI_Timer_Status>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d007      	beq.n	8003d44 <USER_SPI_initialize+0x17c>
 8003d34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d38:	2010      	movs	r0, #16
 8003d3a:	f7ff fed6 	bl	8003aea <send_cmd>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <USER_SPI_initialize+0x180>
				ty = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003d48:	4a14      	ldr	r2, [pc, #80]	@ (8003d9c <USER_SPI_initialize+0x1d4>)
 8003d4a:	7b7b      	ldrb	r3, [r7, #13]
 8003d4c:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003d4e:	f7ff fe49 	bl	80039e4 <despiselect>

	if (ty) {			/* OK */
 8003d52:	7b7b      	ldrb	r3, [r7, #13]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d012      	beq.n	8003d7e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003d58:	4b0f      	ldr	r3, [pc, #60]	@ (8003d98 <USER_SPI_initialize+0x1d0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003d62:	4b0d      	ldr	r3, [pc, #52]	@ (8003d98 <USER_SPI_initialize+0x1d0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0210 	orr.w	r2, r2, #16
 8003d6a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003d6c:	4b09      	ldr	r3, [pc, #36]	@ (8003d94 <USER_SPI_initialize+0x1cc>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	4b06      	ldr	r3, [pc, #24]	@ (8003d94 <USER_SPI_initialize+0x1cc>)
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	e002      	b.n	8003d84 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003d7e:	4b05      	ldr	r3, [pc, #20]	@ (8003d94 <USER_SPI_initialize+0x1cc>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003d84:	4b03      	ldr	r3, [pc, #12]	@ (8003d94 <USER_SPI_initialize+0x1cc>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	b2db      	uxtb	r3, r3
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd90      	pop	{r4, r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000020 	.word	0x20000020
 8003d98:	20000040 	.word	0x20000040
 8003d9c:	20000138 	.word	0x20000138

08003da0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <USER_SPI_status+0x14>
 8003db0:	2301      	movs	r3, #1
 8003db2:	e002      	b.n	8003dba <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003db4:	4b04      	ldr	r3, [pc, #16]	@ (8003dc8 <USER_SPI_status+0x28>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	b2db      	uxtb	r3, r3
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20000020 	.word	0x20000020

08003dcc <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	4603      	mov	r3, r0
 8003dda:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <USER_SPI_read+0x1c>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <USER_SPI_read+0x20>
 8003de8:	2304      	movs	r3, #4
 8003dea:	e04d      	b.n	8003e88 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003dec:	4b28      	ldr	r3, [pc, #160]	@ (8003e90 <USER_SPI_read+0xc4>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <USER_SPI_read+0x32>
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e044      	b.n	8003e88 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003dfe:	4b25      	ldr	r3, [pc, #148]	@ (8003e94 <USER_SPI_read+0xc8>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d102      	bne.n	8003e10 <USER_SPI_read+0x44>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	025b      	lsls	r3, r3, #9
 8003e0e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d111      	bne.n	8003e3a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	2011      	movs	r0, #17
 8003e1a:	f7ff fe66 	bl	8003aea <send_cmd>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d129      	bne.n	8003e78 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003e24:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e28:	68b8      	ldr	r0, [r7, #8]
 8003e2a:	f7ff fe03 	bl	8003a34 <rcvr_datablock>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d021      	beq.n	8003e78 <USER_SPI_read+0xac>
			count = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	e01e      	b.n	8003e78 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	2012      	movs	r0, #18
 8003e3e:	f7ff fe54 	bl	8003aea <send_cmd>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d117      	bne.n	8003e78 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003e48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e4c:	68b8      	ldr	r0, [r7, #8]
 8003e4e:	f7ff fdf1 	bl	8003a34 <rcvr_datablock>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <USER_SPI_read+0xa2>
				buff += 512;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003e5e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	603b      	str	r3, [r7, #0]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1ed      	bne.n	8003e48 <USER_SPI_read+0x7c>
 8003e6c:	e000      	b.n	8003e70 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003e6e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003e70:	2100      	movs	r1, #0
 8003e72:	200c      	movs	r0, #12
 8003e74:	f7ff fe39 	bl	8003aea <send_cmd>
		}
	}
	despiselect();
 8003e78:	f7ff fdb4 	bl	80039e4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf14      	ite	ne
 8003e82:	2301      	movne	r3, #1
 8003e84:	2300      	moveq	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20000020 	.word	0x20000020
 8003e94:	20000138 	.word	0x20000138

08003e98 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d102      	bne.n	8003eb4 <USER_SPI_write+0x1c>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <USER_SPI_write+0x20>
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	e063      	b.n	8003f80 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003eb8:	4b33      	ldr	r3, [pc, #204]	@ (8003f88 <USER_SPI_write+0xf0>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <USER_SPI_write+0x32>
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e05a      	b.n	8003f80 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003eca:	4b2f      	ldr	r3, [pc, #188]	@ (8003f88 <USER_SPI_write+0xf0>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <USER_SPI_write+0x44>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e051      	b.n	8003f80 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003edc:	4b2b      	ldr	r3, [pc, #172]	@ (8003f8c <USER_SPI_write+0xf4>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d102      	bne.n	8003eee <USER_SPI_write+0x56>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	025b      	lsls	r3, r3, #9
 8003eec:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d110      	bne.n	8003f16 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	2018      	movs	r0, #24
 8003ef8:	f7ff fdf7 	bl	8003aea <send_cmd>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d136      	bne.n	8003f70 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003f02:	21fe      	movs	r1, #254	@ 0xfe
 8003f04:	68b8      	ldr	r0, [r7, #8]
 8003f06:	f7ff fdbe 	bl	8003a86 <xmit_datablock>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d02f      	beq.n	8003f70 <USER_SPI_write+0xd8>
			count = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	e02c      	b.n	8003f70 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003f16:	4b1d      	ldr	r3, [pc, #116]	@ (8003f8c <USER_SPI_write+0xf4>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	f003 0306 	and.w	r3, r3, #6
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <USER_SPI_write+0x92>
 8003f22:	6839      	ldr	r1, [r7, #0]
 8003f24:	2097      	movs	r0, #151	@ 0x97
 8003f26:	f7ff fde0 	bl	8003aea <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	2019      	movs	r0, #25
 8003f2e:	f7ff fddc 	bl	8003aea <send_cmd>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d11b      	bne.n	8003f70 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003f38:	21fc      	movs	r1, #252	@ 0xfc
 8003f3a:	68b8      	ldr	r0, [r7, #8]
 8003f3c:	f7ff fda3 	bl	8003a86 <xmit_datablock>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <USER_SPI_write+0xc4>
				buff += 512;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003f4c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1ee      	bne.n	8003f38 <USER_SPI_write+0xa0>
 8003f5a:	e000      	b.n	8003f5e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003f5c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003f5e:	21fd      	movs	r1, #253	@ 0xfd
 8003f60:	2000      	movs	r0, #0
 8003f62:	f7ff fd90 	bl	8003a86 <xmit_datablock>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <USER_SPI_write+0xd8>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003f70:	f7ff fd38 	bl	80039e4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	bf14      	ite	ne
 8003f7a:	2301      	movne	r3, #1
 8003f7c:	2300      	moveq	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20000020 	.word	0x20000020
 8003f8c:	20000138 	.word	0x20000138

08003f90 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08c      	sub	sp, #48	@ 0x30
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	603a      	str	r2, [r7, #0]
 8003f9a:	71fb      	strb	r3, [r7, #7]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <USER_SPI_ioctl+0x1a>
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	e15a      	b.n	8004260 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003faa:	4baf      	ldr	r3, [pc, #700]	@ (8004268 <USER_SPI_ioctl+0x2d8>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <USER_SPI_ioctl+0x2c>
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e151      	b.n	8004260 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8003fc2:	79bb      	ldrb	r3, [r7, #6]
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	f200 8136 	bhi.w	8004236 <USER_SPI_ioctl+0x2a6>
 8003fca:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd0 <USER_SPI_ioctl+0x40>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	08003fe5 	.word	0x08003fe5
 8003fd4:	08003ff9 	.word	0x08003ff9
 8003fd8:	08004237 	.word	0x08004237
 8003fdc:	080040a5 	.word	0x080040a5
 8003fe0:	0800419b 	.word	0x0800419b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003fe4:	f7ff fd0c 	bl	8003a00 <spiselect>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 8127 	beq.w	800423e <USER_SPI_ioctl+0x2ae>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8003ff6:	e122      	b.n	800423e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	2009      	movs	r0, #9
 8003ffc:	f7ff fd75 	bl	8003aea <send_cmd>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	f040 811d 	bne.w	8004242 <USER_SPI_ioctl+0x2b2>
 8004008:	f107 030c 	add.w	r3, r7, #12
 800400c:	2110      	movs	r1, #16
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fd10 	bl	8003a34 <rcvr_datablock>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 8113 	beq.w	8004242 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800401c:	7b3b      	ldrb	r3, [r7, #12]
 800401e:	099b      	lsrs	r3, r3, #6
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b01      	cmp	r3, #1
 8004024:	d111      	bne.n	800404a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004026:	7d7b      	ldrb	r3, [r7, #21]
 8004028:	461a      	mov	r2, r3
 800402a:	7d3b      	ldrb	r3, [r7, #20]
 800402c:	021b      	lsls	r3, r3, #8
 800402e:	4413      	add	r3, r2
 8004030:	461a      	mov	r2, r3
 8004032:	7cfb      	ldrb	r3, [r7, #19]
 8004034:	041b      	lsls	r3, r3, #16
 8004036:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800403a:	4413      	add	r3, r2
 800403c:	3301      	adds	r3, #1
 800403e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	029a      	lsls	r2, r3, #10
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	e028      	b.n	800409c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800404a:	7c7b      	ldrb	r3, [r7, #17]
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	b2da      	uxtb	r2, r3
 8004052:	7dbb      	ldrb	r3, [r7, #22]
 8004054:	09db      	lsrs	r3, r3, #7
 8004056:	b2db      	uxtb	r3, r3
 8004058:	4413      	add	r3, r2
 800405a:	b2da      	uxtb	r2, r3
 800405c:	7d7b      	ldrb	r3, [r7, #21]
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f003 0306 	and.w	r3, r3, #6
 8004066:	b2db      	uxtb	r3, r3
 8004068:	4413      	add	r3, r2
 800406a:	b2db      	uxtb	r3, r3
 800406c:	3302      	adds	r3, #2
 800406e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004072:	7d3b      	ldrb	r3, [r7, #20]
 8004074:	099b      	lsrs	r3, r3, #6
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	7cfb      	ldrb	r3, [r7, #19]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	441a      	add	r2, r3
 8004080:	7cbb      	ldrb	r3, [r7, #18]
 8004082:	029b      	lsls	r3, r3, #10
 8004084:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004088:	4413      	add	r3, r2
 800408a:	3301      	adds	r3, #1
 800408c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800408e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004092:	3b09      	subs	r3, #9
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	409a      	lsls	r2, r3
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80040a2:	e0ce      	b.n	8004242 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80040a4:	4b71      	ldr	r3, [pc, #452]	@ (800426c <USER_SPI_ioctl+0x2dc>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d031      	beq.n	8004114 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80040b0:	2100      	movs	r1, #0
 80040b2:	208d      	movs	r0, #141	@ 0x8d
 80040b4:	f7ff fd19 	bl	8003aea <send_cmd>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f040 80c3 	bne.w	8004246 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80040c0:	20ff      	movs	r0, #255	@ 0xff
 80040c2:	f7ff fc25 	bl	8003910 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80040c6:	f107 030c 	add.w	r3, r7, #12
 80040ca:	2110      	movs	r1, #16
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fcb1 	bl	8003a34 <rcvr_datablock>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 80b6 	beq.w	8004246 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80040da:	2330      	movs	r3, #48	@ 0x30
 80040dc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80040e0:	e007      	b.n	80040f2 <USER_SPI_ioctl+0x162>
 80040e2:	20ff      	movs	r0, #255	@ 0xff
 80040e4:	f7ff fc14 	bl	8003910 <xchg_spi>
 80040e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80040ec:	3b01      	subs	r3, #1
 80040ee:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80040f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f3      	bne.n	80040e2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80040fa:	7dbb      	ldrb	r3, [r7, #22]
 80040fc:	091b      	lsrs	r3, r3, #4
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	461a      	mov	r2, r3
 8004102:	2310      	movs	r3, #16
 8004104:	fa03 f202 	lsl.w	r2, r3, r2
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004112:	e098      	b.n	8004246 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004114:	2100      	movs	r1, #0
 8004116:	2009      	movs	r0, #9
 8004118:	f7ff fce7 	bl	8003aea <send_cmd>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	f040 8091 	bne.w	8004246 <USER_SPI_ioctl+0x2b6>
 8004124:	f107 030c 	add.w	r3, r7, #12
 8004128:	2110      	movs	r1, #16
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff fc82 	bl	8003a34 <rcvr_datablock>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 8087 	beq.w	8004246 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004138:	4b4c      	ldr	r3, [pc, #304]	@ (800426c <USER_SPI_ioctl+0x2dc>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d012      	beq.n	800416a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004144:	7dbb      	ldrb	r3, [r7, #22]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800414c:	7dfa      	ldrb	r2, [r7, #23]
 800414e:	09d2      	lsrs	r2, r2, #7
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	4413      	add	r3, r2
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	7e7b      	ldrb	r3, [r7, #25]
 8004158:	099b      	lsrs	r3, r3, #6
 800415a:	b2db      	uxtb	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	fa02 f303 	lsl.w	r3, r2, r3
 8004162:	461a      	mov	r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	e013      	b.n	8004192 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800416a:	7dbb      	ldrb	r3, [r7, #22]
 800416c:	109b      	asrs	r3, r3, #2
 800416e:	b29b      	uxth	r3, r3
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	3301      	adds	r3, #1
 8004176:	7dfa      	ldrb	r2, [r7, #23]
 8004178:	00d2      	lsls	r2, r2, #3
 800417a:	f002 0218 	and.w	r2, r2, #24
 800417e:	7df9      	ldrb	r1, [r7, #23]
 8004180:	0949      	lsrs	r1, r1, #5
 8004182:	b2c9      	uxtb	r1, r1
 8004184:	440a      	add	r2, r1
 8004186:	3201      	adds	r2, #1
 8004188:	fb02 f303 	mul.w	r3, r2, r3
 800418c:	461a      	mov	r2, r3
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8004198:	e055      	b.n	8004246 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800419a:	4b34      	ldr	r3, [pc, #208]	@ (800426c <USER_SPI_ioctl+0x2dc>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	f003 0306 	and.w	r3, r3, #6
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d051      	beq.n	800424a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80041a6:	f107 020c 	add.w	r2, r7, #12
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	210b      	movs	r1, #11
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff feee 	bl	8003f90 <USER_SPI_ioctl>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d149      	bne.n	800424e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80041ba:	7b3b      	ldrb	r3, [r7, #12]
 80041bc:	099b      	lsrs	r3, r3, #6
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d104      	bne.n	80041ce <USER_SPI_ioctl+0x23e>
 80041c4:	7dbb      	ldrb	r3, [r7, #22]
 80041c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d041      	beq.n	8004252 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	623b      	str	r3, [r7, #32]
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80041de:	4b23      	ldr	r3, [pc, #140]	@ (800426c <USER_SPI_ioctl+0x2dc>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d105      	bne.n	80041f6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80041ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ec:	025b      	lsls	r3, r3, #9
 80041ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	025b      	lsls	r3, r3, #9
 80041f4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80041f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041f8:	2020      	movs	r0, #32
 80041fa:	f7ff fc76 	bl	8003aea <send_cmd>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d128      	bne.n	8004256 <USER_SPI_ioctl+0x2c6>
 8004204:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004206:	2021      	movs	r0, #33	@ 0x21
 8004208:	f7ff fc6f 	bl	8003aea <send_cmd>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d121      	bne.n	8004256 <USER_SPI_ioctl+0x2c6>
 8004212:	2100      	movs	r1, #0
 8004214:	2026      	movs	r0, #38	@ 0x26
 8004216:	f7ff fc68 	bl	8003aea <send_cmd>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d11a      	bne.n	8004256 <USER_SPI_ioctl+0x2c6>
 8004220:	f247 5030 	movw	r0, #30000	@ 0x7530
 8004224:	f7ff fbba 	bl	800399c <wait_ready>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d013      	beq.n	8004256 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800422e:	2300      	movs	r3, #0
 8004230:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8004234:	e00f      	b.n	8004256 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004236:	2304      	movs	r3, #4
 8004238:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800423c:	e00c      	b.n	8004258 <USER_SPI_ioctl+0x2c8>
		break;
 800423e:	bf00      	nop
 8004240:	e00a      	b.n	8004258 <USER_SPI_ioctl+0x2c8>
		break;
 8004242:	bf00      	nop
 8004244:	e008      	b.n	8004258 <USER_SPI_ioctl+0x2c8>
		break;
 8004246:	bf00      	nop
 8004248:	e006      	b.n	8004258 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800424a:	bf00      	nop
 800424c:	e004      	b.n	8004258 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800424e:	bf00      	nop
 8004250:	e002      	b.n	8004258 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004252:	bf00      	nop
 8004254:	e000      	b.n	8004258 <USER_SPI_ioctl+0x2c8>
		break;
 8004256:	bf00      	nop
	}

	despiselect();
 8004258:	f7ff fbc4 	bl	80039e4 <despiselect>

	return res;
 800425c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004260:	4618      	mov	r0, r3
 8004262:	3730      	adds	r7, #48	@ 0x30
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20000020 	.word	0x20000020
 800426c:	20000138 	.word	0x20000138

08004270 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	4a08      	ldr	r2, [pc, #32]	@ (80042a0 <disk_status+0x30>)
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	79fa      	ldrb	r2, [r7, #7]
 8004288:	4905      	ldr	r1, [pc, #20]	@ (80042a0 <disk_status+0x30>)
 800428a:	440a      	add	r2, r1
 800428c:	7a12      	ldrb	r2, [r2, #8]
 800428e:	4610      	mov	r0, r2
 8004290:	4798      	blx	r3
 8004292:	4603      	mov	r3, r0
 8004294:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004296:	7bfb      	ldrb	r3, [r7, #15]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	2000016c 	.word	0x2000016c

080042a4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	4603      	mov	r3, r0
 80042ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	4a0d      	ldr	r2, [pc, #52]	@ (80042ec <disk_initialize+0x48>)
 80042b6:	5cd3      	ldrb	r3, [r2, r3]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d111      	bne.n	80042e0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	4a0b      	ldr	r2, [pc, #44]	@ (80042ec <disk_initialize+0x48>)
 80042c0:	2101      	movs	r1, #1
 80042c2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	4a09      	ldr	r2, [pc, #36]	@ (80042ec <disk_initialize+0x48>)
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	79fa      	ldrb	r2, [r7, #7]
 80042d2:	4906      	ldr	r1, [pc, #24]	@ (80042ec <disk_initialize+0x48>)
 80042d4:	440a      	add	r2, r1
 80042d6:	7a12      	ldrb	r2, [r2, #8]
 80042d8:	4610      	mov	r0, r2
 80042da:	4798      	blx	r3
 80042dc:	4603      	mov	r3, r0
 80042de:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	2000016c 	.word	0x2000016c

080042f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80042f0:	b590      	push	{r4, r7, lr}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	607a      	str	r2, [r7, #4]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4603      	mov	r3, r0
 80042fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004300:	7bfb      	ldrb	r3, [r7, #15]
 8004302:	4a0a      	ldr	r2, [pc, #40]	@ (800432c <disk_read+0x3c>)
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	689c      	ldr	r4, [r3, #8]
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	4a07      	ldr	r2, [pc, #28]	@ (800432c <disk_read+0x3c>)
 8004310:	4413      	add	r3, r2
 8004312:	7a18      	ldrb	r0, [r3, #8]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	47a0      	blx	r4
 800431c:	4603      	mov	r3, r0
 800431e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004320:	7dfb      	ldrb	r3, [r7, #23]
}
 8004322:	4618      	mov	r0, r3
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	bd90      	pop	{r4, r7, pc}
 800432a:	bf00      	nop
 800432c:	2000016c 	.word	0x2000016c

08004330 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004330:	b590      	push	{r4, r7, lr}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	4603      	mov	r3, r0
 800433e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	4a0a      	ldr	r2, [pc, #40]	@ (800436c <disk_write+0x3c>)
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	68dc      	ldr	r4, [r3, #12]
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	4a07      	ldr	r2, [pc, #28]	@ (800436c <disk_write+0x3c>)
 8004350:	4413      	add	r3, r2
 8004352:	7a18      	ldrb	r0, [r3, #8]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	47a0      	blx	r4
 800435c:	4603      	mov	r3, r0
 800435e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004360:	7dfb      	ldrb	r3, [r7, #23]
}
 8004362:	4618      	mov	r0, r3
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	bd90      	pop	{r4, r7, pc}
 800436a:	bf00      	nop
 800436c:	2000016c 	.word	0x2000016c

08004370 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	603a      	str	r2, [r7, #0]
 800437a:	71fb      	strb	r3, [r7, #7]
 800437c:	460b      	mov	r3, r1
 800437e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	4a09      	ldr	r2, [pc, #36]	@ (80043a8 <disk_ioctl+0x38>)
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	79fa      	ldrb	r2, [r7, #7]
 800438e:	4906      	ldr	r1, [pc, #24]	@ (80043a8 <disk_ioctl+0x38>)
 8004390:	440a      	add	r2, r1
 8004392:	7a10      	ldrb	r0, [r2, #8]
 8004394:	79b9      	ldrb	r1, [r7, #6]
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	4798      	blx	r3
 800439a:	4603      	mov	r3, r0
 800439c:	73fb      	strb	r3, [r7, #15]
  return res;
 800439e:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	2000016c 	.word	0x2000016c

080043ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3301      	adds	r3, #1
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80043bc:	89fb      	ldrh	r3, [r7, #14]
 80043be:	021b      	lsls	r3, r3, #8
 80043c0:	b21a      	sxth	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	b21b      	sxth	r3, r3
 80043c8:	4313      	orrs	r3, r2
 80043ca:	b21b      	sxth	r3, r3
 80043cc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80043ce:	89fb      	ldrh	r3, [r7, #14]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3303      	adds	r3, #3
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	021b      	lsls	r3, r3, #8
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	3202      	adds	r2, #2
 80043f4:	7812      	ldrb	r2, [r2, #0]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	021b      	lsls	r3, r3, #8
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	3201      	adds	r2, #1
 8004402:	7812      	ldrb	r2, [r2, #0]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	021b      	lsls	r3, r3, #8
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	7812      	ldrb	r2, [r2, #0]
 8004410:	4313      	orrs	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
	return rv;
 8004414:	68fb      	ldr	r3, [r7, #12]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	460b      	mov	r3, r1
 800442c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	887a      	ldrh	r2, [r7, #2]
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	887b      	ldrh	r3, [r7, #2]
 800443c:	0a1b      	lsrs	r3, r3, #8
 800443e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	607a      	str	r2, [r7, #4]
 8004446:	887a      	ldrh	r2, [r7, #2]
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	701a      	strb	r2, [r3, #0]
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	701a      	strb	r2, [r3, #0]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	0a1b      	lsrs	r3, r3, #8
 8004484:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	0a1b      	lsrs	r3, r3, #8
 8004496:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00d      	beq.n	80044e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	1c53      	adds	r3, r2, #1
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	1c59      	adds	r1, r3, #1
 80044d4:	6179      	str	r1, [r7, #20]
 80044d6:	7812      	ldrb	r2, [r2, #0]
 80044d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3b01      	subs	r3, #1
 80044de:	607b      	str	r3, [r7, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f1      	bne.n	80044ca <mem_cpy+0x1a>
	}
}
 80044e6:	bf00      	nop
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80044f2:	b480      	push	{r7}
 80044f4:	b087      	sub	sp, #28
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	617a      	str	r2, [r7, #20]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3b01      	subs	r3, #1
 8004512:	607b      	str	r3, [r7, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f3      	bne.n	8004502 <mem_set+0x10>
}
 800451a:	bf00      	nop
 800451c:	bf00      	nop
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004528:	b480      	push	{r7}
 800452a:	b089      	sub	sp, #36	@ 0x24
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	61fa      	str	r2, [r7, #28]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	4619      	mov	r1, r3
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	61ba      	str	r2, [r7, #24]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	1acb      	subs	r3, r1, r3
 8004554:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3b01      	subs	r3, #1
 800455a:	607b      	str	r3, [r7, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <mem_cmp+0x40>
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0eb      	beq.n	8004540 <mem_cmp+0x18>

	return r;
 8004568:	697b      	ldr	r3, [r7, #20]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3724      	adds	r7, #36	@ 0x24
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004580:	e002      	b.n	8004588 <chk_chr+0x12>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3301      	adds	r3, #1
 8004586:	607b      	str	r3, [r7, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <chk_chr+0x26>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	461a      	mov	r2, r3
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	4293      	cmp	r3, r2
 800459a:	d1f2      	bne.n	8004582 <chk_chr+0xc>
	return *str;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	781b      	ldrb	r3, [r3, #0]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80045b6:	2300      	movs	r3, #0
 80045b8:	60bb      	str	r3, [r7, #8]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	e029      	b.n	8004614 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80045c0:	4a27      	ldr	r2, [pc, #156]	@ (8004660 <chk_lock+0xb4>)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	4413      	add	r3, r2
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d01d      	beq.n	800460a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80045ce:	4a24      	ldr	r2, [pc, #144]	@ (8004660 <chk_lock+0xb4>)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	4413      	add	r3, r2
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d116      	bne.n	800460e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80045e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004660 <chk_lock+0xb4>)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	4413      	add	r3, r2
 80045e8:	3304      	adds	r3, #4
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d10c      	bne.n	800460e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80045f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004660 <chk_lock+0xb4>)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	4413      	add	r3, r2
 80045fc:	3308      	adds	r3, #8
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004604:	429a      	cmp	r2, r3
 8004606:	d102      	bne.n	800460e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004608:	e007      	b.n	800461a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800460a:	2301      	movs	r3, #1
 800460c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3301      	adds	r3, #1
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d9d2      	bls.n	80045c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2b02      	cmp	r3, #2
 800461e:	d109      	bne.n	8004634 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d102      	bne.n	800462c <chk_lock+0x80>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b02      	cmp	r3, #2
 800462a:	d101      	bne.n	8004630 <chk_lock+0x84>
 800462c:	2300      	movs	r3, #0
 800462e:	e010      	b.n	8004652 <chk_lock+0xa6>
 8004630:	2312      	movs	r3, #18
 8004632:	e00e      	b.n	8004652 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d108      	bne.n	800464c <chk_lock+0xa0>
 800463a:	4a09      	ldr	r2, [pc, #36]	@ (8004660 <chk_lock+0xb4>)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	4413      	add	r3, r2
 8004642:	330c      	adds	r3, #12
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800464a:	d101      	bne.n	8004650 <chk_lock+0xa4>
 800464c:	2310      	movs	r3, #16
 800464e:	e000      	b.n	8004652 <chk_lock+0xa6>
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	2000014c 	.word	0x2000014c

08004664 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800466a:	2300      	movs	r3, #0
 800466c:	607b      	str	r3, [r7, #4]
 800466e:	e002      	b.n	8004676 <enq_lock+0x12>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3301      	adds	r3, #1
 8004674:	607b      	str	r3, [r7, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d806      	bhi.n	800468a <enq_lock+0x26>
 800467c:	4a09      	ldr	r2, [pc, #36]	@ (80046a4 <enq_lock+0x40>)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	4413      	add	r3, r2
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f2      	bne.n	8004670 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b02      	cmp	r3, #2
 800468e:	bf14      	ite	ne
 8004690:	2301      	movne	r3, #1
 8004692:	2300      	moveq	r3, #0
 8004694:	b2db      	uxtb	r3, r3
}
 8004696:	4618      	mov	r0, r3
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	2000014c 	.word	0x2000014c

080046a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	e01f      	b.n	80046f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80046b8:	4a41      	ldr	r2, [pc, #260]	@ (80047c0 <inc_lock+0x118>)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	4413      	add	r3, r2
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d113      	bne.n	80046f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80046ca:	4a3d      	ldr	r2, [pc, #244]	@ (80047c0 <inc_lock+0x118>)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	4413      	add	r3, r2
 80046d2:	3304      	adds	r3, #4
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80046da:	429a      	cmp	r2, r3
 80046dc:	d109      	bne.n	80046f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80046de:	4a38      	ldr	r2, [pc, #224]	@ (80047c0 <inc_lock+0x118>)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	4413      	add	r3, r2
 80046e6:	3308      	adds	r3, #8
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d006      	beq.n	8004700 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	3301      	adds	r3, #1
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d9dc      	bls.n	80046b8 <inc_lock+0x10>
 80046fe:	e000      	b.n	8004702 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004700:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d132      	bne.n	800476e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e002      	b.n	8004714 <inc_lock+0x6c>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3301      	adds	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d806      	bhi.n	8004728 <inc_lock+0x80>
 800471a:	4a29      	ldr	r2, [pc, #164]	@ (80047c0 <inc_lock+0x118>)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	4413      	add	r3, r2
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f2      	bne.n	800470e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d101      	bne.n	8004732 <inc_lock+0x8a>
 800472e:	2300      	movs	r3, #0
 8004730:	e040      	b.n	80047b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	4922      	ldr	r1, [pc, #136]	@ (80047c0 <inc_lock+0x118>)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	440b      	add	r3, r1
 800473e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	491e      	ldr	r1, [pc, #120]	@ (80047c0 <inc_lock+0x118>)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	440b      	add	r3, r1
 800474c:	3304      	adds	r3, #4
 800474e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	695a      	ldr	r2, [r3, #20]
 8004754:	491a      	ldr	r1, [pc, #104]	@ (80047c0 <inc_lock+0x118>)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	440b      	add	r3, r1
 800475c:	3308      	adds	r3, #8
 800475e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004760:	4a17      	ldr	r2, [pc, #92]	@ (80047c0 <inc_lock+0x118>)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	4413      	add	r3, r2
 8004768:	330c      	adds	r3, #12
 800476a:	2200      	movs	r2, #0
 800476c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d009      	beq.n	8004788 <inc_lock+0xe0>
 8004774:	4a12      	ldr	r2, [pc, #72]	@ (80047c0 <inc_lock+0x118>)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	4413      	add	r3, r2
 800477c:	330c      	adds	r3, #12
 800477e:	881b      	ldrh	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <inc_lock+0xe0>
 8004784:	2300      	movs	r3, #0
 8004786:	e015      	b.n	80047b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d108      	bne.n	80047a0 <inc_lock+0xf8>
 800478e:	4a0c      	ldr	r2, [pc, #48]	@ (80047c0 <inc_lock+0x118>)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	4413      	add	r3, r2
 8004796:	330c      	adds	r3, #12
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	3301      	adds	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	e001      	b.n	80047a4 <inc_lock+0xfc>
 80047a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047a4:	4906      	ldr	r1, [pc, #24]	@ (80047c0 <inc_lock+0x118>)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	440b      	add	r3, r1
 80047ac:	330c      	adds	r3, #12
 80047ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3301      	adds	r3, #1
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	2000014c 	.word	0x2000014c

080047c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	607b      	str	r3, [r7, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d825      	bhi.n	8004824 <dec_lock+0x60>
		n = Files[i].ctr;
 80047d8:	4a17      	ldr	r2, [pc, #92]	@ (8004838 <dec_lock+0x74>)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	4413      	add	r3, r2
 80047e0:	330c      	adds	r3, #12
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80047e6:	89fb      	ldrh	r3, [r7, #14]
 80047e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ec:	d101      	bne.n	80047f2 <dec_lock+0x2e>
 80047ee:	2300      	movs	r3, #0
 80047f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80047f2:	89fb      	ldrh	r3, [r7, #14]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <dec_lock+0x3a>
 80047f8:	89fb      	ldrh	r3, [r7, #14]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80047fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004838 <dec_lock+0x74>)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	4413      	add	r3, r2
 8004806:	330c      	adds	r3, #12
 8004808:	89fa      	ldrh	r2, [r7, #14]
 800480a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800480c:	89fb      	ldrh	r3, [r7, #14]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d105      	bne.n	800481e <dec_lock+0x5a>
 8004812:	4a09      	ldr	r2, [pc, #36]	@ (8004838 <dec_lock+0x74>)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	4413      	add	r3, r2
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	737b      	strb	r3, [r7, #13]
 8004822:	e001      	b.n	8004828 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004824:	2302      	movs	r3, #2
 8004826:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004828:	7b7b      	ldrb	r3, [r7, #13]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	2000014c 	.word	0x2000014c

0800483c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	e010      	b.n	800486c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800484a:	4a0d      	ldr	r2, [pc, #52]	@ (8004880 <clear_lock+0x44>)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	4413      	add	r3, r2
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	429a      	cmp	r2, r3
 8004858:	d105      	bne.n	8004866 <clear_lock+0x2a>
 800485a:	4a09      	ldr	r2, [pc, #36]	@ (8004880 <clear_lock+0x44>)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	4413      	add	r3, r2
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3301      	adds	r3, #1
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d9eb      	bls.n	800484a <clear_lock+0xe>
	}
}
 8004872:	bf00      	nop
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	2000014c 	.word	0x2000014c

08004884 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	78db      	ldrb	r3, [r3, #3]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d034      	beq.n	8004902 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	7858      	ldrb	r0, [r3, #1]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80048a8:	2301      	movs	r3, #1
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	f7ff fd40 	bl	8004330 <disk_write>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <sync_window+0x38>
			res = FR_DISK_ERR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	73fb      	strb	r3, [r7, #15]
 80048ba:	e022      	b.n	8004902 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	1ad2      	subs	r2, r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d217      	bcs.n	8004902 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	789b      	ldrb	r3, [r3, #2]
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	e010      	b.n	80048fc <sync_window+0x78>
					wsect += fs->fsize;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4413      	add	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	7858      	ldrb	r0, [r3, #1]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80048ee:	2301      	movs	r3, #1
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	f7ff fd1d 	bl	8004330 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	3b01      	subs	r3, #1
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d8eb      	bhi.n	80048da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004902:	7bfb      	ldrb	r3, [r7, #15]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d01b      	beq.n	800495c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff ffad 	bl	8004884 <sync_window>
 800492a:	4603      	mov	r3, r0
 800492c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800492e:	7bfb      	ldrb	r3, [r7, #15]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d113      	bne.n	800495c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	7858      	ldrb	r0, [r3, #1]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800493e:	2301      	movs	r3, #1
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	f7ff fcd5 	bl	80042f0 <disk_read>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d004      	beq.n	8004956 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800494c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004950:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004952:	2301      	movs	r3, #1
 8004954:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800495c:	7bfb      	ldrb	r3, [r7, #15]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff ff87 	bl	8004884 <sync_window>
 8004976:	4603      	mov	r3, r0
 8004978:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d158      	bne.n	8004a32 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b03      	cmp	r3, #3
 8004986:	d148      	bne.n	8004a1a <sync_fs+0xb2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	791b      	ldrb	r3, [r3, #4]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d144      	bne.n	8004a1a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3330      	adds	r3, #48	@ 0x30
 8004994:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004998:	2100      	movs	r1, #0
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff fda9 	bl	80044f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3330      	adds	r3, #48	@ 0x30
 80049a4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80049a8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff fd38 	bl	8004422 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3330      	adds	r3, #48	@ 0x30
 80049b6:	4921      	ldr	r1, [pc, #132]	@ (8004a3c <sync_fs+0xd4>)
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff fd4d 	bl	8004458 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3330      	adds	r3, #48	@ 0x30
 80049c2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80049c6:	491e      	ldr	r1, [pc, #120]	@ (8004a40 <sync_fs+0xd8>)
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff fd45 	bl	8004458 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3330      	adds	r3, #48	@ 0x30
 80049d2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	4619      	mov	r1, r3
 80049dc:	4610      	mov	r0, r2
 80049de:	f7ff fd3b 	bl	8004458 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3330      	adds	r3, #48	@ 0x30
 80049e6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f7ff fd31 	bl	8004458 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	7858      	ldrb	r0, [r3, #1]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a0e:	2301      	movs	r3, #1
 8004a10:	f7ff fc8e 	bl	8004330 <disk_write>
			fs->fsi_flag = 0;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	785b      	ldrb	r3, [r3, #1]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	2100      	movs	r1, #0
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fca4 	bl	8004370 <disk_ioctl>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <sync_fs+0xca>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	41615252 	.word	0x41615252
 8004a40:	61417272 	.word	0x61417272

08004a44 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	3b02      	subs	r3, #2
 8004a52:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	3b02      	subs	r3, #2
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d301      	bcc.n	8004a64 <clust2sect+0x20>
 8004a60:	2300      	movs	r3, #0
 8004a62:	e008      	b.n	8004a76 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	895b      	ldrh	r3, [r3, #10]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	fb03 f202 	mul.w	r2, r3, r2
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a74:	4413      	add	r3, r2
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b086      	sub	sp, #24
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d904      	bls.n	8004aa2 <get_fat+0x20>
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d302      	bcc.n	8004aa8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	e08e      	b.n	8004bc6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004aa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004aac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d061      	beq.n	8004b7a <get_fat+0xf8>
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	dc7b      	bgt.n	8004bb2 <get_fat+0x130>
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d002      	beq.n	8004ac4 <get_fat+0x42>
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d041      	beq.n	8004b46 <get_fat+0xc4>
 8004ac2:	e076      	b.n	8004bb2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	085b      	lsrs	r3, r3, #1
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	6a1a      	ldr	r2, [r3, #32]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	0a5b      	lsrs	r3, r3, #9
 8004ada:	4413      	add	r3, r2
 8004adc:	4619      	mov	r1, r3
 8004ade:	6938      	ldr	r0, [r7, #16]
 8004ae0:	f7ff ff14 	bl	800490c <move_window>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d166      	bne.n	8004bb8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	60fa      	str	r2, [r7, #12]
 8004af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4413      	add	r3, r2
 8004af8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004afc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	6a1a      	ldr	r2, [r3, #32]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	0a5b      	lsrs	r3, r3, #9
 8004b06:	4413      	add	r3, r2
 8004b08:	4619      	mov	r1, r3
 8004b0a:	6938      	ldr	r0, [r7, #16]
 8004b0c:	f7ff fefe 	bl	800490c <move_window>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d152      	bne.n	8004bbc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <get_fat+0xba>
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	091b      	lsrs	r3, r3, #4
 8004b3a:	e002      	b.n	8004b42 <get_fat+0xc0>
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b42:	617b      	str	r3, [r7, #20]
			break;
 8004b44:	e03f      	b.n	8004bc6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	6a1a      	ldr	r2, [r3, #32]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	0a1b      	lsrs	r3, r3, #8
 8004b4e:	4413      	add	r3, r2
 8004b50:	4619      	mov	r1, r3
 8004b52:	6938      	ldr	r0, [r7, #16]
 8004b54:	f7ff feda 	bl	800490c <move_window>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d130      	bne.n	8004bc0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004b6c:	4413      	add	r3, r2
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff fc1c 	bl	80043ac <ld_word>
 8004b74:	4603      	mov	r3, r0
 8004b76:	617b      	str	r3, [r7, #20]
			break;
 8004b78:	e025      	b.n	8004bc6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	6a1a      	ldr	r2, [r3, #32]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	09db      	lsrs	r3, r3, #7
 8004b82:	4413      	add	r3, r2
 8004b84:	4619      	mov	r1, r3
 8004b86:	6938      	ldr	r0, [r7, #16]
 8004b88:	f7ff fec0 	bl	800490c <move_window>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d118      	bne.n	8004bc4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004ba0:	4413      	add	r3, r2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff fc1a 	bl	80043dc <ld_dword>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004bae:	617b      	str	r3, [r7, #20]
			break;
 8004bb0:	e009      	b.n	8004bc6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	e006      	b.n	8004bc6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004bb8:	bf00      	nop
 8004bba:	e004      	b.n	8004bc6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004bbc:	bf00      	nop
 8004bbe:	e002      	b.n	8004bc6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004bc0:	bf00      	nop
 8004bc2:	e000      	b.n	8004bc6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004bc4:	bf00      	nop
		}
	}

	return val;
 8004bc6:	697b      	ldr	r3, [r7, #20]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004bd0:	b590      	push	{r4, r7, lr}
 8004bd2:	b089      	sub	sp, #36	@ 0x24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004bdc:	2302      	movs	r3, #2
 8004bde:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	f240 80d9 	bls.w	8004d9a <put_fat+0x1ca>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	f080 80d3 	bcs.w	8004d9a <put_fat+0x1ca>
		switch (fs->fs_type) {
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	f000 8096 	beq.w	8004d2a <put_fat+0x15a>
 8004bfe:	2b03      	cmp	r3, #3
 8004c00:	f300 80cb 	bgt.w	8004d9a <put_fat+0x1ca>
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d002      	beq.n	8004c0e <put_fat+0x3e>
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d06e      	beq.n	8004cea <put_fat+0x11a>
 8004c0c:	e0c5      	b.n	8004d9a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	61bb      	str	r3, [r7, #24]
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	085b      	lsrs	r3, r3, #1
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	4413      	add	r3, r2
 8004c1a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a1a      	ldr	r2, [r3, #32]
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	0a5b      	lsrs	r3, r3, #9
 8004c24:	4413      	add	r3, r2
 8004c26:	4619      	mov	r1, r3
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f7ff fe6f 	bl	800490c <move_window>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c32:	7ffb      	ldrb	r3, [r7, #31]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f040 80a9 	bne.w	8004d8c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	1c59      	adds	r1, r3, #1
 8004c44:	61b9      	str	r1, [r7, #24]
 8004c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4a:	4413      	add	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00d      	beq.n	8004c74 <put_fat+0xa4>
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	b25b      	sxtb	r3, r3
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	b25a      	sxtb	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	b25b      	sxtb	r3, r3
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	b25b      	sxtb	r3, r3
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	e001      	b.n	8004c78 <put_fat+0xa8>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a1a      	ldr	r2, [r3, #32]
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	0a5b      	lsrs	r3, r3, #9
 8004c8a:	4413      	add	r3, r2
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f7ff fe3c 	bl	800490c <move_window>
 8004c94:	4603      	mov	r3, r0
 8004c96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c98:	7ffb      	ldrb	r3, [r7, #31]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d178      	bne.n	8004d90 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004caa:	4413      	add	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <put_fat+0xf0>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	091b      	lsrs	r3, r3, #4
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	e00e      	b.n	8004cde <put_fat+0x10e>
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	b25b      	sxtb	r3, r3
 8004cc6:	f023 030f 	bic.w	r3, r3, #15
 8004cca:	b25a      	sxtb	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	0a1b      	lsrs	r3, r3, #8
 8004cd0:	b25b      	sxtb	r3, r3
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	b25b      	sxtb	r3, r3
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	b25b      	sxtb	r3, r3
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	70da      	strb	r2, [r3, #3]
			break;
 8004ce8:	e057      	b.n	8004d9a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a1a      	ldr	r2, [r3, #32]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	0a1b      	lsrs	r3, r3, #8
 8004cf2:	4413      	add	r3, r2
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f7ff fe08 	bl	800490c <move_window>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d00:	7ffb      	ldrb	r3, [r7, #31]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d146      	bne.n	8004d94 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004d14:	4413      	add	r3, r2
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	b292      	uxth	r2, r2
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff fb80 	bl	8004422 <st_word>
			fs->wflag = 1;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	70da      	strb	r2, [r3, #3]
			break;
 8004d28:	e037      	b.n	8004d9a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a1a      	ldr	r2, [r3, #32]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	09db      	lsrs	r3, r3, #7
 8004d32:	4413      	add	r3, r2
 8004d34:	4619      	mov	r1, r3
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f7ff fde8 	bl	800490c <move_window>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d40:	7ffb      	ldrb	r3, [r7, #31]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d128      	bne.n	8004d98 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004d5a:	4413      	add	r3, r2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff fb3d 	bl	80043dc <ld_dword>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004d68:	4323      	orrs	r3, r4
 8004d6a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004d7a:	4413      	add	r3, r2
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff fb6a 	bl	8004458 <st_dword>
			fs->wflag = 1;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2201      	movs	r2, #1
 8004d88:	70da      	strb	r2, [r3, #3]
			break;
 8004d8a:	e006      	b.n	8004d9a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004d8c:	bf00      	nop
 8004d8e:	e004      	b.n	8004d9a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004d90:	bf00      	nop
 8004d92:	e002      	b.n	8004d9a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004d94:	bf00      	nop
 8004d96:	e000      	b.n	8004d9a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004d98:	bf00      	nop
		}
	}
	return res;
 8004d9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3724      	adds	r7, #36	@ 0x24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd90      	pop	{r4, r7, pc}

08004da4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d904      	bls.n	8004dca <remove_chain+0x26>
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d301      	bcc.n	8004dce <remove_chain+0x2a>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e04b      	b.n	8004e66 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00c      	beq.n	8004dee <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004dd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	69b8      	ldr	r0, [r7, #24]
 8004ddc:	f7ff fef8 	bl	8004bd0 <put_fat>
 8004de0:	4603      	mov	r3, r0
 8004de2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004de4:	7ffb      	ldrb	r3, [r7, #31]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <remove_chain+0x4a>
 8004dea:	7ffb      	ldrb	r3, [r7, #31]
 8004dec:	e03b      	b.n	8004e66 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004dee:	68b9      	ldr	r1, [r7, #8]
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f7ff fe46 	bl	8004a82 <get_fat>
 8004df6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d031      	beq.n	8004e62 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d101      	bne.n	8004e08 <remove_chain+0x64>
 8004e04:	2302      	movs	r3, #2
 8004e06:	e02e      	b.n	8004e66 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e0e:	d101      	bne.n	8004e14 <remove_chain+0x70>
 8004e10:	2301      	movs	r3, #1
 8004e12:	e028      	b.n	8004e66 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004e14:	2200      	movs	r2, #0
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	69b8      	ldr	r0, [r7, #24]
 8004e1a:	f7ff fed9 	bl	8004bd0 <put_fat>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004e22:	7ffb      	ldrb	r3, [r7, #31]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <remove_chain+0x88>
 8004e28:	7ffb      	ldrb	r3, [r7, #31]
 8004e2a:	e01c      	b.n	8004e66 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	3b02      	subs	r3, #2
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d20b      	bcs.n	8004e52 <remove_chain+0xae>
			fs->free_clst++;
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	791b      	ldrb	r3, [r3, #4]
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d3c6      	bcc.n	8004dee <remove_chain+0x4a>
 8004e60:	e000      	b.n	8004e64 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004e62:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3720      	adds	r7, #32
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b088      	sub	sp, #32
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10d      	bne.n	8004ea0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d004      	beq.n	8004e9a <create_chain+0x2c>
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d31b      	bcc.n	8004ed2 <create_chain+0x64>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	e018      	b.n	8004ed2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff fded 	bl	8004a82 <get_fat>
 8004ea8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d801      	bhi.n	8004eb4 <create_chain+0x46>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e070      	b.n	8004f96 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004eba:	d101      	bne.n	8004ec0 <create_chain+0x52>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	e06a      	b.n	8004f96 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d201      	bcs.n	8004ece <create_chain+0x60>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	e063      	b.n	8004f96 <create_chain+0x128>
		scl = clst;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d307      	bcc.n	8004ef6 <create_chain+0x88>
				ncl = 2;
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004eea:	69fa      	ldr	r2, [r7, #28]
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d901      	bls.n	8004ef6 <create_chain+0x88>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e04f      	b.n	8004f96 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004ef6:	69f9      	ldr	r1, [r7, #28]
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff fdc2 	bl	8004a82 <get_fat>
 8004efe:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00e      	beq.n	8004f24 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d003      	beq.n	8004f14 <create_chain+0xa6>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f12:	d101      	bne.n	8004f18 <create_chain+0xaa>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	e03e      	b.n	8004f96 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d1da      	bne.n	8004ed6 <create_chain+0x68>
 8004f20:	2300      	movs	r3, #0
 8004f22:	e038      	b.n	8004f96 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004f24:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004f26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f2a:	69f9      	ldr	r1, [r7, #28]
 8004f2c:	6938      	ldr	r0, [r7, #16]
 8004f2e:	f7ff fe4f 	bl	8004bd0 <put_fat>
 8004f32:	4603      	mov	r3, r0
 8004f34:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004f36:	7dfb      	ldrb	r3, [r7, #23]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d109      	bne.n	8004f50 <create_chain+0xe2>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d006      	beq.n	8004f50 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	6839      	ldr	r1, [r7, #0]
 8004f46:	6938      	ldr	r0, [r7, #16]
 8004f48:	f7ff fe42 	bl	8004bd0 <put_fat>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004f50:	7dfb      	ldrb	r3, [r7, #23]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d116      	bne.n	8004f84 <create_chain+0x116>
		fs->last_clst = ncl;
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	3b02      	subs	r3, #2
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d804      	bhi.n	8004f74 <create_chain+0x106>
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	1e5a      	subs	r2, r3, #1
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	791b      	ldrb	r3, [r3, #4]
 8004f78:	f043 0301 	orr.w	r3, r3, #1
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	711a      	strb	r2, [r3, #4]
 8004f82:	e007      	b.n	8004f94 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004f84:	7dfb      	ldrb	r3, [r7, #23]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d102      	bne.n	8004f90 <create_chain+0x122>
 8004f8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f8e:	e000      	b.n	8004f92 <create_chain+0x124>
 8004f90:	2301      	movs	r3, #1
 8004f92:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004f94:	69fb      	ldr	r3, [r7, #28]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3720      	adds	r7, #32
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b087      	sub	sp, #28
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	0a5b      	lsrs	r3, r3, #9
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	8952      	ldrh	r2, [r2, #10]
 8004fbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1d1a      	adds	r2, r3, #4
 8004fc8:	613a      	str	r2, [r7, #16]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <clmt_clust+0x3a>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e010      	b.n	8004ffa <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d307      	bcc.n	8004ff0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	3304      	adds	r3, #4
 8004fec:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004fee:	e7e9      	b.n	8004fc4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004ff0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	4413      	add	r3, r2
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b086      	sub	sp, #24
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800501c:	d204      	bcs.n	8005028 <dir_sdi+0x22>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	f003 031f 	and.w	r3, r3, #31
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <dir_sdi+0x26>
		return FR_INT_ERR;
 8005028:	2302      	movs	r3, #2
 800502a:	e063      	b.n	80050f4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <dir_sdi+0x46>
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d902      	bls.n	800504c <dir_sdi+0x46>
		clst = fs->dirbase;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10c      	bne.n	800506c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	095b      	lsrs	r3, r3, #5
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	8912      	ldrh	r2, [r2, #8]
 800505a:	4293      	cmp	r3, r2
 800505c:	d301      	bcc.n	8005062 <dir_sdi+0x5c>
 800505e:	2302      	movs	r3, #2
 8005060:	e048      	b.n	80050f4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	61da      	str	r2, [r3, #28]
 800506a:	e029      	b.n	80050c0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	895b      	ldrh	r3, [r3, #10]
 8005070:	025b      	lsls	r3, r3, #9
 8005072:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005074:	e019      	b.n	80050aa <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6979      	ldr	r1, [r7, #20]
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fd01 	bl	8004a82 <get_fat>
 8005080:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005088:	d101      	bne.n	800508e <dir_sdi+0x88>
 800508a:	2301      	movs	r3, #1
 800508c:	e032      	b.n	80050f4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d904      	bls.n	800509e <dir_sdi+0x98>
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	429a      	cmp	r2, r3
 800509c:	d301      	bcc.n	80050a2 <dir_sdi+0x9c>
 800509e:	2302      	movs	r3, #2
 80050a0:	e028      	b.n	80050f4 <dir_sdi+0xee>
			ofs -= csz;
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d2e1      	bcs.n	8005076 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80050b2:	6979      	ldr	r1, [r7, #20]
 80050b4:	6938      	ldr	r0, [r7, #16]
 80050b6:	f7ff fcc5 	bl	8004a44 <clust2sect>
 80050ba:	4602      	mov	r2, r0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <dir_sdi+0xcc>
 80050ce:	2302      	movs	r3, #2
 80050d0:	e010      	b.n	80050f4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69da      	ldr	r2, [r3, #28]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	0a5b      	lsrs	r3, r3, #9
 80050da:	441a      	add	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ec:	441a      	add	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	3320      	adds	r3, #32
 8005112:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <dir_next+0x28>
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005122:	d301      	bcc.n	8005128 <dir_next+0x2c>
 8005124:	2304      	movs	r3, #4
 8005126:	e0aa      	b.n	800527e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512e:	2b00      	cmp	r3, #0
 8005130:	f040 8098 	bne.w	8005264 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10b      	bne.n	800515e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	8912      	ldrh	r2, [r2, #8]
 800514e:	4293      	cmp	r3, r2
 8005150:	f0c0 8088 	bcc.w	8005264 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	61da      	str	r2, [r3, #28]
 800515a:	2304      	movs	r3, #4
 800515c:	e08f      	b.n	800527e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	0a5b      	lsrs	r3, r3, #9
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	8952      	ldrh	r2, [r2, #10]
 8005166:	3a01      	subs	r2, #1
 8005168:	4013      	ands	r3, r2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d17a      	bne.n	8005264 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	4619      	mov	r1, r3
 8005176:	4610      	mov	r0, r2
 8005178:	f7ff fc83 	bl	8004a82 <get_fat>
 800517c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d801      	bhi.n	8005188 <dir_next+0x8c>
 8005184:	2302      	movs	r3, #2
 8005186:	e07a      	b.n	800527e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800518e:	d101      	bne.n	8005194 <dir_next+0x98>
 8005190:	2301      	movs	r3, #1
 8005192:	e074      	b.n	800527e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	429a      	cmp	r2, r3
 800519c:	d358      	bcc.n	8005250 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d104      	bne.n	80051ae <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	61da      	str	r2, [r3, #28]
 80051aa:	2304      	movs	r3, #4
 80051ac:	e067      	b.n	800527e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f7ff fe59 	bl	8004e6e <create_chain>
 80051bc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <dir_next+0xcc>
 80051c4:	2307      	movs	r3, #7
 80051c6:	e05a      	b.n	800527e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <dir_next+0xd6>
 80051ce:	2302      	movs	r3, #2
 80051d0:	e055      	b.n	800527e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051d8:	d101      	bne.n	80051de <dir_next+0xe2>
 80051da:	2301      	movs	r3, #1
 80051dc:	e04f      	b.n	800527e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7ff fb50 	bl	8004884 <sync_window>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <dir_next+0xf2>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e047      	b.n	800527e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3330      	adds	r3, #48	@ 0x30
 80051f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051f6:	2100      	movs	r1, #0
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff f97a 	bl	80044f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80051fe:	2300      	movs	r3, #0
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	6979      	ldr	r1, [r7, #20]
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f7ff fc1d 	bl	8004a44 <clust2sect>
 800520a:	4602      	mov	r2, r0
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005210:	e012      	b.n	8005238 <dir_next+0x13c>
						fs->wflag = 1;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f7ff fb33 	bl	8004884 <sync_window>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <dir_next+0x12c>
 8005224:	2301      	movs	r3, #1
 8005226:	e02a      	b.n	800527e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	3301      	adds	r3, #1
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	895b      	ldrh	r3, [r3, #10]
 800523c:	461a      	mov	r2, r3
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	4293      	cmp	r3, r2
 8005242:	d3e6      	bcc.n	8005212 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad2      	subs	r2, r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005256:	6979      	ldr	r1, [r7, #20]
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f7ff fbf3 	bl	8004a44 <clust2sect>
 800525e:	4602      	mov	r2, r0
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005276:	441a      	add	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b086      	sub	sp, #24
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005296:	2100      	movs	r1, #0
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff feb4 	bl	8005006 <dir_sdi>
 800529e:	4603      	mov	r3, r0
 80052a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d12b      	bne.n	8005300 <dir_alloc+0x7a>
		n = 0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	4619      	mov	r1, r3
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f7ff fb2a 	bl	800490c <move_window>
 80052b8:	4603      	mov	r3, r0
 80052ba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80052bc:	7dfb      	ldrb	r3, [r7, #23]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d11d      	bne.n	80052fe <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2be5      	cmp	r3, #229	@ 0xe5
 80052ca:	d004      	beq.n	80052d6 <dir_alloc+0x50>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d107      	bne.n	80052e6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	3301      	adds	r3, #1
 80052da:	613b      	str	r3, [r7, #16]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d102      	bne.n	80052ea <dir_alloc+0x64>
 80052e4:	e00c      	b.n	8005300 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80052e6:	2300      	movs	r3, #0
 80052e8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80052ea:	2101      	movs	r1, #1
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff ff05 	bl	80050fc <dir_next>
 80052f2:	4603      	mov	r3, r0
 80052f4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80052f6:	7dfb      	ldrb	r3, [r7, #23]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0d7      	beq.n	80052ac <dir_alloc+0x26>
 80052fc:	e000      	b.n	8005300 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80052fe:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005300:	7dfb      	ldrb	r3, [r7, #23]
 8005302:	2b04      	cmp	r3, #4
 8005304:	d101      	bne.n	800530a <dir_alloc+0x84>
 8005306:	2307      	movs	r3, #7
 8005308:	75fb      	strb	r3, [r7, #23]
	return res;
 800530a:	7dfb      	ldrb	r3, [r7, #23]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	331a      	adds	r3, #26
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff f842 	bl	80043ac <ld_word>
 8005328:	4603      	mov	r3, r0
 800532a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b03      	cmp	r3, #3
 8005332:	d109      	bne.n	8005348 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	3314      	adds	r3, #20
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff f837 	bl	80043ac <ld_word>
 800533e:	4603      	mov	r3, r0
 8005340:	041b      	lsls	r3, r3, #16
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005348:	68fb      	ldr	r3, [r7, #12]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	60b9      	str	r1, [r7, #8]
 800535c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	331a      	adds	r3, #26
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	b292      	uxth	r2, r2
 8005366:	4611      	mov	r1, r2
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff f85a 	bl	8004422 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b03      	cmp	r3, #3
 8005374:	d109      	bne.n	800538a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f103 0214 	add.w	r2, r3, #20
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	0c1b      	lsrs	r3, r3, #16
 8005380:	b29b      	uxth	r3, r3
 8005382:	4619      	mov	r1, r3
 8005384:	4610      	mov	r0, r2
 8005386:	f7ff f84c 	bl	8004422 <st_word>
	}
}
 800538a:	bf00      	nop
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b086      	sub	sp, #24
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80053a0:	2100      	movs	r1, #0
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7ff fe2f 	bl	8005006 <dir_sdi>
 80053a8:	4603      	mov	r3, r0
 80053aa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <dir_find+0x24>
 80053b2:	7dfb      	ldrb	r3, [r7, #23]
 80053b4:	e03e      	b.n	8005434 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	4619      	mov	r1, r3
 80053bc:	6938      	ldr	r0, [r7, #16]
 80053be:	f7ff faa5 	bl	800490c <move_window>
 80053c2:	4603      	mov	r3, r0
 80053c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80053c6:	7dfb      	ldrb	r3, [r7, #23]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d12f      	bne.n	800542c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d102      	bne.n	80053e0 <dir_find+0x4e>
 80053da:	2304      	movs	r3, #4
 80053dc:	75fb      	strb	r3, [r7, #23]
 80053de:	e028      	b.n	8005432 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	330b      	adds	r3, #11
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	330b      	adds	r3, #11
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <dir_find+0x86>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a18      	ldr	r0, [r3, #32]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3324      	adds	r3, #36	@ 0x24
 800540a:	220b      	movs	r2, #11
 800540c:	4619      	mov	r1, r3
 800540e:	f7ff f88b 	bl	8004528 <mem_cmp>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00b      	beq.n	8005430 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005418:	2100      	movs	r1, #0
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff fe6e 	bl	80050fc <dir_next>
 8005420:	4603      	mov	r3, r0
 8005422:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005424:	7dfb      	ldrb	r3, [r7, #23]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0c5      	beq.n	80053b6 <dir_find+0x24>
 800542a:	e002      	b.n	8005432 <dir_find+0xa0>
		if (res != FR_OK) break;
 800542c:	bf00      	nop
 800542e:	e000      	b.n	8005432 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005430:	bf00      	nop

	return res;
 8005432:	7dfb      	ldrb	r3, [r7, #23]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800544a:	2101      	movs	r1, #1
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff ff1a 	bl	8005286 <dir_alloc>
 8005452:	4603      	mov	r3, r0
 8005454:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005456:	7bfb      	ldrb	r3, [r7, #15]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d11c      	bne.n	8005496 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	4619      	mov	r1, r3
 8005462:	68b8      	ldr	r0, [r7, #8]
 8005464:	f7ff fa52 	bl	800490c <move_window>
 8005468:	4603      	mov	r3, r0
 800546a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800546c:	7bfb      	ldrb	r3, [r7, #15]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d111      	bne.n	8005496 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	2220      	movs	r2, #32
 8005478:	2100      	movs	r1, #0
 800547a:	4618      	mov	r0, r3
 800547c:	f7ff f839 	bl	80044f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a18      	ldr	r0, [r3, #32]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3324      	adds	r3, #36	@ 0x24
 8005488:	220b      	movs	r2, #11
 800548a:	4619      	mov	r1, r3
 800548c:	f7ff f810 	bl	80044b0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2201      	movs	r2, #1
 8005494:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005496:	7bfb      	ldrb	r3, [r7, #15]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3324      	adds	r3, #36	@ 0x24
 80054b4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80054b6:	220b      	movs	r2, #11
 80054b8:	2120      	movs	r1, #32
 80054ba:	68b8      	ldr	r0, [r7, #8]
 80054bc:	f7ff f819 	bl	80044f2 <mem_set>
	si = i = 0; ni = 8;
 80054c0:	2300      	movs	r3, #0
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	61fb      	str	r3, [r7, #28]
 80054c8:	2308      	movs	r3, #8
 80054ca:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	61fa      	str	r2, [r7, #28]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4413      	add	r3, r2
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80054da:	7efb      	ldrb	r3, [r7, #27]
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d94e      	bls.n	800557e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80054e0:	7efb      	ldrb	r3, [r7, #27]
 80054e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80054e4:	d006      	beq.n	80054f4 <create_name+0x54>
 80054e6:	7efb      	ldrb	r3, [r7, #27]
 80054e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80054ea:	d110      	bne.n	800550e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80054ec:	e002      	b.n	80054f4 <create_name+0x54>
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	3301      	adds	r3, #1
 80054f2:	61fb      	str	r3, [r7, #28]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	4413      	add	r3, r2
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80054fe:	d0f6      	beq.n	80054ee <create_name+0x4e>
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4413      	add	r3, r2
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b5c      	cmp	r3, #92	@ 0x5c
 800550a:	d0f0      	beq.n	80054ee <create_name+0x4e>
			break;
 800550c:	e038      	b.n	8005580 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800550e:	7efb      	ldrb	r3, [r7, #27]
 8005510:	2b2e      	cmp	r3, #46	@ 0x2e
 8005512:	d003      	beq.n	800551c <create_name+0x7c>
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	429a      	cmp	r2, r3
 800551a:	d30c      	bcc.n	8005536 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2b0b      	cmp	r3, #11
 8005520:	d002      	beq.n	8005528 <create_name+0x88>
 8005522:	7efb      	ldrb	r3, [r7, #27]
 8005524:	2b2e      	cmp	r3, #46	@ 0x2e
 8005526:	d001      	beq.n	800552c <create_name+0x8c>
 8005528:	2306      	movs	r3, #6
 800552a:	e044      	b.n	80055b6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800552c:	2308      	movs	r3, #8
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	230b      	movs	r3, #11
 8005532:	617b      	str	r3, [r7, #20]
			continue;
 8005534:	e022      	b.n	800557c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005536:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800553a:	2b00      	cmp	r3, #0
 800553c:	da04      	bge.n	8005548 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800553e:	7efb      	ldrb	r3, [r7, #27]
 8005540:	3b80      	subs	r3, #128	@ 0x80
 8005542:	4a1f      	ldr	r2, [pc, #124]	@ (80055c0 <create_name+0x120>)
 8005544:	5cd3      	ldrb	r3, [r2, r3]
 8005546:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005548:	7efb      	ldrb	r3, [r7, #27]
 800554a:	4619      	mov	r1, r3
 800554c:	481d      	ldr	r0, [pc, #116]	@ (80055c4 <create_name+0x124>)
 800554e:	f7ff f812 	bl	8004576 <chk_chr>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <create_name+0xbc>
 8005558:	2306      	movs	r3, #6
 800555a:	e02c      	b.n	80055b6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800555c:	7efb      	ldrb	r3, [r7, #27]
 800555e:	2b60      	cmp	r3, #96	@ 0x60
 8005560:	d905      	bls.n	800556e <create_name+0xce>
 8005562:	7efb      	ldrb	r3, [r7, #27]
 8005564:	2b7a      	cmp	r3, #122	@ 0x7a
 8005566:	d802      	bhi.n	800556e <create_name+0xce>
 8005568:	7efb      	ldrb	r3, [r7, #27]
 800556a:	3b20      	subs	r3, #32
 800556c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	613a      	str	r2, [r7, #16]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	4413      	add	r3, r2
 8005578:	7efa      	ldrb	r2, [r7, #27]
 800557a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800557c:	e7a6      	b.n	80054cc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800557e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	441a      	add	r2, r3
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <create_name+0xf4>
 8005590:	2306      	movs	r3, #6
 8005592:	e010      	b.n	80055b6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2be5      	cmp	r3, #229	@ 0xe5
 800559a:	d102      	bne.n	80055a2 <create_name+0x102>
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2205      	movs	r2, #5
 80055a0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80055a2:	7efb      	ldrb	r3, [r7, #27]
 80055a4:	2b20      	cmp	r3, #32
 80055a6:	d801      	bhi.n	80055ac <create_name+0x10c>
 80055a8:	2204      	movs	r2, #4
 80055aa:	e000      	b.n	80055ae <create_name+0x10e>
 80055ac:	2200      	movs	r2, #0
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	330b      	adds	r3, #11
 80055b2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80055b4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3720      	adds	r7, #32
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	080066fc 	.word	0x080066fc
 80055c4:	08006670 	.word	0x08006670

080055c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80055dc:	e002      	b.n	80055e4 <follow_path+0x1c>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	3301      	adds	r3, #1
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b2f      	cmp	r3, #47	@ 0x2f
 80055ea:	d0f8      	beq.n	80055de <follow_path+0x16>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b5c      	cmp	r3, #92	@ 0x5c
 80055f2:	d0f4      	beq.n	80055de <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	2200      	movs	r2, #0
 80055f8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b1f      	cmp	r3, #31
 8005600:	d80a      	bhi.n	8005618 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2280      	movs	r2, #128	@ 0x80
 8005606:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800560a:	2100      	movs	r1, #0
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7ff fcfa 	bl	8005006 <dir_sdi>
 8005612:	4603      	mov	r3, r0
 8005614:	75fb      	strb	r3, [r7, #23]
 8005616:	e043      	b.n	80056a0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005618:	463b      	mov	r3, r7
 800561a:	4619      	mov	r1, r3
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7ff ff3f 	bl	80054a0 <create_name>
 8005622:	4603      	mov	r3, r0
 8005624:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005626:	7dfb      	ldrb	r3, [r7, #23]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d134      	bne.n	8005696 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff feb0 	bl	8005392 <dir_find>
 8005632:	4603      	mov	r3, r0
 8005634:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800563c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800563e:	7dfb      	ldrb	r3, [r7, #23]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00a      	beq.n	800565a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005644:	7dfb      	ldrb	r3, [r7, #23]
 8005646:	2b04      	cmp	r3, #4
 8005648:	d127      	bne.n	800569a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800564a:	7afb      	ldrb	r3, [r7, #11]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d122      	bne.n	800569a <follow_path+0xd2>
 8005654:	2305      	movs	r3, #5
 8005656:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005658:	e01f      	b.n	800569a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800565a:	7afb      	ldrb	r3, [r7, #11]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d11c      	bne.n	800569e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	799b      	ldrb	r3, [r3, #6]
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	2b00      	cmp	r3, #0
 800566e:	d102      	bne.n	8005676 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005670:	2305      	movs	r3, #5
 8005672:	75fb      	strb	r3, [r7, #23]
 8005674:	e014      	b.n	80056a0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005684:	4413      	add	r3, r2
 8005686:	4619      	mov	r1, r3
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f7ff fe43 	bl	8005314 <ld_clust>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005694:	e7c0      	b.n	8005618 <follow_path+0x50>
			if (res != FR_OK) break;
 8005696:	bf00      	nop
 8005698:	e002      	b.n	80056a0 <follow_path+0xd8>
				break;
 800569a:	bf00      	nop
 800569c:	e000      	b.n	80056a0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800569e:	bf00      	nop
			}
		}
	}

	return res;
 80056a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b087      	sub	sp, #28
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80056b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056b6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d031      	beq.n	8005724 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	617b      	str	r3, [r7, #20]
 80056c6:	e002      	b.n	80056ce <get_ldnumber+0x24>
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	3301      	adds	r3, #1
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	d903      	bls.n	80056de <get_ldnumber+0x34>
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	2b3a      	cmp	r3, #58	@ 0x3a
 80056dc:	d1f4      	bne.n	80056c8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b3a      	cmp	r3, #58	@ 0x3a
 80056e4:	d11c      	bne.n	8005720 <get_ldnumber+0x76>
			tp = *path;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	60fa      	str	r2, [r7, #12]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	3b30      	subs	r3, #48	@ 0x30
 80056f6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2b09      	cmp	r3, #9
 80056fc:	d80e      	bhi.n	800571c <get_ldnumber+0x72>
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	429a      	cmp	r2, r3
 8005704:	d10a      	bne.n	800571c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d107      	bne.n	800571c <get_ldnumber+0x72>
					vol = (int)i;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	3301      	adds	r3, #1
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	e002      	b.n	8005726 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005720:	2300      	movs	r3, #0
 8005722:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005724:	693b      	ldr	r3, [r7, #16]
}
 8005726:	4618      	mov	r0, r3
 8005728:	371c      	adds	r7, #28
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
	...

08005734 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	70da      	strb	r2, [r3, #3]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800574a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff f8dc 	bl	800490c <move_window>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <check_fs+0x2a>
 800575a:	2304      	movs	r3, #4
 800575c:	e038      	b.n	80057d0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3330      	adds	r3, #48	@ 0x30
 8005762:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005766:	4618      	mov	r0, r3
 8005768:	f7fe fe20 	bl	80043ac <ld_word>
 800576c:	4603      	mov	r3, r0
 800576e:	461a      	mov	r2, r3
 8005770:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005774:	429a      	cmp	r2, r3
 8005776:	d001      	beq.n	800577c <check_fs+0x48>
 8005778:	2303      	movs	r3, #3
 800577a:	e029      	b.n	80057d0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005782:	2be9      	cmp	r3, #233	@ 0xe9
 8005784:	d009      	beq.n	800579a <check_fs+0x66>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800578c:	2beb      	cmp	r3, #235	@ 0xeb
 800578e:	d11e      	bne.n	80057ce <check_fs+0x9a>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005796:	2b90      	cmp	r3, #144	@ 0x90
 8005798:	d119      	bne.n	80057ce <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	3330      	adds	r3, #48	@ 0x30
 800579e:	3336      	adds	r3, #54	@ 0x36
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7fe fe1b 	bl	80043dc <ld_dword>
 80057a6:	4603      	mov	r3, r0
 80057a8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80057ac:	4a0a      	ldr	r2, [pc, #40]	@ (80057d8 <check_fs+0xa4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d101      	bne.n	80057b6 <check_fs+0x82>
 80057b2:	2300      	movs	r3, #0
 80057b4:	e00c      	b.n	80057d0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3330      	adds	r3, #48	@ 0x30
 80057ba:	3352      	adds	r3, #82	@ 0x52
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fe fe0d 	bl	80043dc <ld_dword>
 80057c2:	4603      	mov	r3, r0
 80057c4:	4a05      	ldr	r2, [pc, #20]	@ (80057dc <check_fs+0xa8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d101      	bne.n	80057ce <check_fs+0x9a>
 80057ca:	2300      	movs	r3, #0
 80057cc:	e000      	b.n	80057d0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80057ce:	2302      	movs	r3, #2
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	00544146 	.word	0x00544146
 80057dc:	33544146 	.word	0x33544146

080057e0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b096      	sub	sp, #88	@ 0x58
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	4613      	mov	r3, r2
 80057ec:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f7ff ff58 	bl	80056aa <get_ldnumber>
 80057fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80057fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	da01      	bge.n	8005806 <find_volume+0x26>
 8005802:	230b      	movs	r3, #11
 8005804:	e22d      	b.n	8005c62 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005806:	4aa1      	ldr	r2, [pc, #644]	@ (8005a8c <find_volume+0x2ac>)
 8005808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800580a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800580e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <find_volume+0x3a>
 8005816:	230c      	movs	r3, #12
 8005818:	e223      	b.n	8005c62 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800581e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	f023 0301 	bic.w	r3, r3, #1
 8005826:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01a      	beq.n	8005866 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	4618      	mov	r0, r3
 8005836:	f7fe fd1b 	bl	8004270 <disk_status>
 800583a:	4603      	mov	r3, r0
 800583c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005840:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10c      	bne.n	8005866 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d007      	beq.n	8005862 <find_volume+0x82>
 8005852:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800585e:	230a      	movs	r3, #10
 8005860:	e1ff      	b.n	8005c62 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8005862:	2300      	movs	r3, #0
 8005864:	e1fd      	b.n	8005c62 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800586c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800586e:	b2da      	uxtb	r2, r3
 8005870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005872:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005876:	785b      	ldrb	r3, [r3, #1]
 8005878:	4618      	mov	r0, r3
 800587a:	f7fe fd13 	bl	80042a4 <disk_initialize>
 800587e:	4603      	mov	r3, r0
 8005880:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005884:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005890:	2303      	movs	r3, #3
 8005892:	e1e6      	b.n	8005c62 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005894:	79fb      	ldrb	r3, [r7, #7]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d007      	beq.n	80058aa <find_volume+0xca>
 800589a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80058a6:	230a      	movs	r3, #10
 80058a8:	e1db      	b.n	8005c62 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80058aa:	2300      	movs	r3, #0
 80058ac:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80058ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80058b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80058b2:	f7ff ff3f 	bl	8005734 <check_fs>
 80058b6:	4603      	mov	r3, r0
 80058b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80058bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d149      	bne.n	8005958 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80058c4:	2300      	movs	r3, #0
 80058c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80058c8:	e01e      	b.n	8005908 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80058ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80058d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80058d8:	4413      	add	r3, r2
 80058da:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80058dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058de:	3304      	adds	r3, #4
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d006      	beq.n	80058f4 <find_volume+0x114>
 80058e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e8:	3308      	adds	r3, #8
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe fd76 	bl	80043dc <ld_dword>
 80058f0:	4602      	mov	r2, r0
 80058f2:	e000      	b.n	80058f6 <find_volume+0x116>
 80058f4:	2200      	movs	r2, #0
 80058f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	3358      	adds	r3, #88	@ 0x58
 80058fc:	443b      	add	r3, r7
 80058fe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005904:	3301      	adds	r3, #1
 8005906:	643b      	str	r3, [r7, #64]	@ 0x40
 8005908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800590a:	2b03      	cmp	r3, #3
 800590c:	d9dd      	bls.n	80058ca <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800590e:	2300      	movs	r3, #0
 8005910:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <find_volume+0x13e>
 8005918:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800591a:	3b01      	subs	r3, #1
 800591c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800591e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	3358      	adds	r3, #88	@ 0x58
 8005924:	443b      	add	r3, r7
 8005926:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800592a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800592c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800592e:	2b00      	cmp	r3, #0
 8005930:	d005      	beq.n	800593e <find_volume+0x15e>
 8005932:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005934:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005936:	f7ff fefd 	bl	8005734 <check_fs>
 800593a:	4603      	mov	r3, r0
 800593c:	e000      	b.n	8005940 <find_volume+0x160>
 800593e:	2303      	movs	r3, #3
 8005940:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005944:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005948:	2b01      	cmp	r3, #1
 800594a:	d905      	bls.n	8005958 <find_volume+0x178>
 800594c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800594e:	3301      	adds	r3, #1
 8005950:	643b      	str	r3, [r7, #64]	@ 0x40
 8005952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005954:	2b03      	cmp	r3, #3
 8005956:	d9e2      	bls.n	800591e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005958:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800595c:	2b04      	cmp	r3, #4
 800595e:	d101      	bne.n	8005964 <find_volume+0x184>
 8005960:	2301      	movs	r3, #1
 8005962:	e17e      	b.n	8005c62 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005964:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005968:	2b01      	cmp	r3, #1
 800596a:	d901      	bls.n	8005970 <find_volume+0x190>
 800596c:	230d      	movs	r3, #13
 800596e:	e178      	b.n	8005c62 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005972:	3330      	adds	r3, #48	@ 0x30
 8005974:	330b      	adds	r3, #11
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe fd18 	bl	80043ac <ld_word>
 800597c:	4603      	mov	r3, r0
 800597e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005982:	d001      	beq.n	8005988 <find_volume+0x1a8>
 8005984:	230d      	movs	r3, #13
 8005986:	e16c      	b.n	8005c62 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598a:	3330      	adds	r3, #48	@ 0x30
 800598c:	3316      	adds	r3, #22
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe fd0c 	bl	80043ac <ld_word>
 8005994:	4603      	mov	r3, r0
 8005996:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <find_volume+0x1cc>
 800599e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a0:	3330      	adds	r3, #48	@ 0x30
 80059a2:	3324      	adds	r3, #36	@ 0x24
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fe fd19 	bl	80043dc <ld_dword>
 80059aa:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80059ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059b0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80059b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80059b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80059bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059be:	789b      	ldrb	r3, [r3, #2]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d005      	beq.n	80059d0 <find_volume+0x1f0>
 80059c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c6:	789b      	ldrb	r3, [r3, #2]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d001      	beq.n	80059d0 <find_volume+0x1f0>
 80059cc:	230d      	movs	r3, #13
 80059ce:	e148      	b.n	8005c62 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80059d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d2:	789b      	ldrb	r3, [r3, #2]
 80059d4:	461a      	mov	r2, r3
 80059d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059d8:	fb02 f303 	mul.w	r3, r2, r3
 80059dc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80059de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059e4:	461a      	mov	r2, r3
 80059e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80059ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ec:	895b      	ldrh	r3, [r3, #10]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d008      	beq.n	8005a04 <find_volume+0x224>
 80059f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f4:	895b      	ldrh	r3, [r3, #10]
 80059f6:	461a      	mov	r2, r3
 80059f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fa:	895b      	ldrh	r3, [r3, #10]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	4013      	ands	r3, r2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <find_volume+0x228>
 8005a04:	230d      	movs	r3, #13
 8005a06:	e12c      	b.n	8005c62 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0a:	3330      	adds	r3, #48	@ 0x30
 8005a0c:	3311      	adds	r3, #17
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fe fccc 	bl	80043ac <ld_word>
 8005a14:	4603      	mov	r3, r0
 8005a16:	461a      	mov	r2, r3
 8005a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1e:	891b      	ldrh	r3, [r3, #8]
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <find_volume+0x24e>
 8005a2a:	230d      	movs	r3, #13
 8005a2c:	e119      	b.n	8005c62 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a30:	3330      	adds	r3, #48	@ 0x30
 8005a32:	3313      	adds	r3, #19
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fe fcb9 	bl	80043ac <ld_word>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d106      	bne.n	8005a52 <find_volume+0x272>
 8005a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a46:	3330      	adds	r3, #48	@ 0x30
 8005a48:	3320      	adds	r3, #32
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fe fcc6 	bl	80043dc <ld_dword>
 8005a50:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a54:	3330      	adds	r3, #48	@ 0x30
 8005a56:	330e      	adds	r3, #14
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fe fca7 	bl	80043ac <ld_word>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005a62:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <find_volume+0x28c>
 8005a68:	230d      	movs	r3, #13
 8005a6a:	e0fa      	b.n	8005c62 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005a6c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005a6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a70:	4413      	add	r3, r2
 8005a72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a74:	8912      	ldrh	r2, [r2, #8]
 8005a76:	0912      	lsrs	r2, r2, #4
 8005a78:	b292      	uxth	r2, r2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005a7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d204      	bcs.n	8005a90 <find_volume+0x2b0>
 8005a86:	230d      	movs	r3, #13
 8005a88:	e0eb      	b.n	8005c62 <find_volume+0x482>
 8005a8a:	bf00      	nop
 8005a8c:	20000144 	.word	0x20000144
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005a90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a98:	8952      	ldrh	r2, [r2, #10]
 8005a9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a9e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <find_volume+0x2ca>
 8005aa6:	230d      	movs	r3, #13
 8005aa8:	e0db      	b.n	8005c62 <find_volume+0x482>
		fmt = FS_FAT32;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d802      	bhi.n	8005ac0 <find_volume+0x2e0>
 8005aba:	2302      	movs	r3, #2
 8005abc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d802      	bhi.n	8005ad0 <find_volume+0x2f0>
 8005aca:	2301      	movs	r3, #1
 8005acc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad2:	1c9a      	adds	r2, r3, #2
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ada:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005adc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005ade:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005ae0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ae2:	441a      	add	r2, r3
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005ae8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aec:	441a      	add	r2, r3
 8005aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af0:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8005af2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d11e      	bne.n	8005b38 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afc:	3330      	adds	r3, #48	@ 0x30
 8005afe:	332a      	adds	r3, #42	@ 0x2a
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fe fc53 	bl	80043ac <ld_word>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <find_volume+0x330>
 8005b0c:	230d      	movs	r3, #13
 8005b0e:	e0a8      	b.n	8005c62 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b12:	891b      	ldrh	r3, [r3, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <find_volume+0x33c>
 8005b18:	230d      	movs	r3, #13
 8005b1a:	e0a2      	b.n	8005c62 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1e:	3330      	adds	r3, #48	@ 0x30
 8005b20:	332c      	adds	r3, #44	@ 0x2c
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fe fc5a 	bl	80043dc <ld_dword>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b36:	e01f      	b.n	8005b78 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3a:	891b      	ldrh	r3, [r3, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <find_volume+0x364>
 8005b40:	230d      	movs	r3, #13
 8005b42:	e08e      	b.n	8005c62 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b46:	6a1a      	ldr	r2, [r3, #32]
 8005b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b4a:	441a      	add	r2, r3
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005b50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d103      	bne.n	8005b60 <find_volume+0x380>
 8005b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	e00a      	b.n	8005b76 <find_volume+0x396>
 8005b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b62:	695a      	ldr	r2, [r3, #20]
 8005b64:	4613      	mov	r3, r2
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	4413      	add	r3, r2
 8005b6a:	085a      	lsrs	r2, r3, #1
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005b76:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7a:	699a      	ldr	r2, [r3, #24]
 8005b7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b7e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8005b82:	0a5b      	lsrs	r3, r3, #9
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d201      	bcs.n	8005b8c <find_volume+0x3ac>
 8005b88:	230d      	movs	r3, #13
 8005b8a:	e06a      	b.n	8005c62 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b92:	611a      	str	r2, [r3, #16]
 8005b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9e:	2280      	movs	r2, #128	@ 0x80
 8005ba0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005ba2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ba6:	2b03      	cmp	r3, #3
 8005ba8:	d149      	bne.n	8005c3e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bac:	3330      	adds	r3, #48	@ 0x30
 8005bae:	3330      	adds	r3, #48	@ 0x30
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fe fbfb 	bl	80043ac <ld_word>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d140      	bne.n	8005c3e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005bc4:	f7fe fea2 	bl	800490c <move_window>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d137      	bne.n	8005c3e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd6:	3330      	adds	r3, #48	@ 0x30
 8005bd8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fe fbe5 	bl	80043ac <ld_word>
 8005be2:	4603      	mov	r3, r0
 8005be4:	461a      	mov	r2, r3
 8005be6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d127      	bne.n	8005c3e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf0:	3330      	adds	r3, #48	@ 0x30
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fbf2 	bl	80043dc <ld_dword>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8005c6c <find_volume+0x48c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d11e      	bne.n	8005c3e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c02:	3330      	adds	r3, #48	@ 0x30
 8005c04:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fe fbe7 	bl	80043dc <ld_dword>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	4a17      	ldr	r2, [pc, #92]	@ (8005c70 <find_volume+0x490>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d113      	bne.n	8005c3e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c18:	3330      	adds	r3, #48	@ 0x30
 8005c1a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe fbdc 	bl	80043dc <ld_dword>
 8005c24:	4602      	mov	r2, r0
 8005c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c28:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2c:	3330      	adds	r3, #48	@ 0x30
 8005c2e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fe fbd2 	bl	80043dc <ld_dword>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c40:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005c44:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005c46:	4b0b      	ldr	r3, [pc, #44]	@ (8005c74 <find_volume+0x494>)
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	4b09      	ldr	r3, [pc, #36]	@ (8005c74 <find_volume+0x494>)
 8005c50:	801a      	strh	r2, [r3, #0]
 8005c52:	4b08      	ldr	r3, [pc, #32]	@ (8005c74 <find_volume+0x494>)
 8005c54:	881a      	ldrh	r2, [r3, #0]
 8005c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c58:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005c5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005c5c:	f7fe fdee 	bl	800483c <clear_lock>
#endif
	return FR_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3758      	adds	r7, #88	@ 0x58
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	41615252 	.word	0x41615252
 8005c70:	61417272 	.word	0x61417272
 8005c74:	20000148 	.word	0x20000148

08005c78 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005c82:	2309      	movs	r3, #9
 8005c84:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01c      	beq.n	8005cc6 <validate+0x4e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d018      	beq.n	8005cc6 <validate+0x4e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d013      	beq.n	8005cc6 <validate+0x4e>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	889a      	ldrh	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	88db      	ldrh	r3, [r3, #6]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d10c      	bne.n	8005cc6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fe fadc 	bl	8004270 <disk_status>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <validate+0x4e>
			res = FR_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d102      	bne.n	8005cd2 <validate+0x5a>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	e000      	b.n	8005cd4 <validate+0x5c>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	6013      	str	r3, [r2, #0]
	return res;
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005cf6:	f107 0310 	add.w	r3, r7, #16
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff fcd5 	bl	80056aa <get_ldnumber>
 8005d00:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	da01      	bge.n	8005d0c <f_mount+0x28>
 8005d08:	230b      	movs	r3, #11
 8005d0a:	e02b      	b.n	8005d64 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005d0c:	4a17      	ldr	r2, [pc, #92]	@ (8005d6c <f_mount+0x88>)
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d14:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005d1c:	69b8      	ldr	r0, [r7, #24]
 8005d1e:	f7fe fd8d 	bl	800483c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	2200      	movs	r2, #0
 8005d26:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	490d      	ldr	r1, [pc, #52]	@ (8005d6c <f_mount+0x88>)
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <f_mount+0x66>
 8005d44:	79fb      	ldrb	r3, [r7, #7]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d001      	beq.n	8005d4e <f_mount+0x6a>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	e00a      	b.n	8005d64 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005d4e:	f107 010c 	add.w	r1, r7, #12
 8005d52:	f107 0308 	add.w	r3, r7, #8
 8005d56:	2200      	movs	r2, #0
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7ff fd41 	bl	80057e0 <find_volume>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3720      	adds	r7, #32
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	20000144 	.word	0x20000144

08005d70 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b098      	sub	sp, #96	@ 0x60
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <f_open+0x18>
 8005d84:	2309      	movs	r3, #9
 8005d86:	e1a9      	b.n	80060dc <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d8e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005d90:	79fa      	ldrb	r2, [r7, #7]
 8005d92:	f107 0110 	add.w	r1, r7, #16
 8005d96:	f107 0308 	add.w	r3, r7, #8
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff fd20 	bl	80057e0 <find_volume>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8005da6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f040 818d 	bne.w	80060ca <f_open+0x35a>
		dj.obj.fs = fs;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	f107 0314 	add.w	r3, r7, #20
 8005dba:	4611      	mov	r1, r2
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7ff fc03 	bl	80055c8 <follow_path>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005dc8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d118      	bne.n	8005e02 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005dd0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005dd4:	b25b      	sxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	da03      	bge.n	8005de2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8005dda:	2306      	movs	r3, #6
 8005ddc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005de0:	e00f      	b.n	8005e02 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005de2:	79fb      	ldrb	r3, [r7, #7]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	bf8c      	ite	hi
 8005de8:	2301      	movhi	r3, #1
 8005dea:	2300      	movls	r3, #0
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	f107 0314 	add.w	r3, r7, #20
 8005df4:	4611      	mov	r1, r2
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fe fbd8 	bl	80045ac <chk_lock>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	f003 031c 	and.w	r3, r3, #28
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d07f      	beq.n	8005f0c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8005e0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d017      	beq.n	8005e44 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005e14:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005e18:	2b04      	cmp	r3, #4
 8005e1a:	d10e      	bne.n	8005e3a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005e1c:	f7fe fc22 	bl	8004664 <enq_lock>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d006      	beq.n	8005e34 <f_open+0xc4>
 8005e26:	f107 0314 	add.w	r3, r7, #20
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7ff fb06 	bl	800543c <dir_register>
 8005e30:	4603      	mov	r3, r0
 8005e32:	e000      	b.n	8005e36 <f_open+0xc6>
 8005e34:	2312      	movs	r3, #18
 8005e36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005e3a:	79fb      	ldrb	r3, [r7, #7]
 8005e3c:	f043 0308 	orr.w	r3, r3, #8
 8005e40:	71fb      	strb	r3, [r7, #7]
 8005e42:	e010      	b.n	8005e66 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005e44:	7ebb      	ldrb	r3, [r7, #26]
 8005e46:	f003 0311 	and.w	r3, r3, #17
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <f_open+0xe6>
					res = FR_DENIED;
 8005e4e:	2307      	movs	r3, #7
 8005e50:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005e54:	e007      	b.n	8005e66 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <f_open+0xf6>
 8005e60:	2308      	movs	r3, #8
 8005e62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005e66:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d168      	bne.n	8005f40 <f_open+0x1d0>
 8005e6e:	79fb      	ldrb	r3, [r7, #7]
 8005e70:	f003 0308 	and.w	r3, r3, #8
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d063      	beq.n	8005f40 <f_open+0x1d0>
				dw = GET_FATTIME();
 8005e78:	f7fd fcc2 	bl	8003800 <get_fattime>
 8005e7c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e80:	330e      	adds	r3, #14
 8005e82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fe fae7 	bl	8004458 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e8c:	3316      	adds	r3, #22
 8005e8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7fe fae1 	bl	8004458 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e98:	330b      	adds	r3, #11
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff fa35 	bl	8005314 <ld_clust>
 8005eaa:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff fa4d 	bl	8005352 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eba:	331c      	adds	r3, #28
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fe faca 	bl	8004458 <st_dword>
					fs->wflag = 1;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d037      	beq.n	8005f40 <f_open+0x1d0>
						dw = fs->winsect;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005ed6:	f107 0314 	add.w	r3, r7, #20
 8005eda:	2200      	movs	r2, #0
 8005edc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fe ff60 	bl	8004da4 <remove_chain>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8005eea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d126      	bne.n	8005f40 <f_open+0x1d0>
							res = move_window(fs, dw);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fe fd08 	bl	800490c <move_window>
 8005efc:	4603      	mov	r3, r0
 8005efe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f06:	3a01      	subs	r2, #1
 8005f08:	60da      	str	r2, [r3, #12]
 8005f0a:	e019      	b.n	8005f40 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005f0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d115      	bne.n	8005f40 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005f14:	7ebb      	ldrb	r3, [r7, #26]
 8005f16:	f003 0310 	and.w	r3, r3, #16
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <f_open+0x1b6>
					res = FR_NO_FILE;
 8005f1e:	2304      	movs	r3, #4
 8005f20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005f24:	e00c      	b.n	8005f40 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005f26:	79fb      	ldrb	r3, [r7, #7]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d007      	beq.n	8005f40 <f_open+0x1d0>
 8005f30:	7ebb      	ldrb	r3, [r7, #26]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <f_open+0x1d0>
						res = FR_DENIED;
 8005f3a:	2307      	movs	r3, #7
 8005f3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005f40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d126      	bne.n	8005f96 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005f48:	79fb      	ldrb	r3, [r7, #7]
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f58:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8005f62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	bf8c      	ite	hi
 8005f6e:	2301      	movhi	r3, #1
 8005f70:	2300      	movls	r3, #0
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	461a      	mov	r2, r3
 8005f76:	f107 0314 	add.w	r3, r7, #20
 8005f7a:	4611      	mov	r1, r2
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fe fb93 	bl	80046a8 <inc_lock>
 8005f82:	4602      	mov	r2, r0
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d102      	bne.n	8005f96 <f_open+0x226>
 8005f90:	2302      	movs	r3, #2
 8005f92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005f96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f040 8095 	bne.w	80060ca <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7ff f9b4 	bl	8005314 <ld_clust>
 8005fac:	4602      	mov	r2, r0
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb4:	331c      	adds	r3, #28
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fe fa10 	bl	80043dc <ld_dword>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	88da      	ldrh	r2, [r3, #6]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	79fa      	ldrb	r2, [r7, #7]
 8005fda:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3330      	adds	r3, #48	@ 0x30
 8005ff2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fe fa7a 	bl	80044f2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b00      	cmp	r3, #0
 8006006:	d060      	beq.n	80060ca <f_open+0x35a>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d05c      	beq.n	80060ca <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	895b      	ldrh	r3, [r3, #10]
 800601c:	025b      	lsls	r3, r3, #9
 800601e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	657b      	str	r3, [r7, #84]	@ 0x54
 800602c:	e016      	b.n	800605c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006032:	4618      	mov	r0, r3
 8006034:	f7fe fd25 	bl	8004a82 <get_fat>
 8006038:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800603a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800603c:	2b01      	cmp	r3, #1
 800603e:	d802      	bhi.n	8006046 <f_open+0x2d6>
 8006040:	2302      	movs	r3, #2
 8006042:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006046:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006048:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800604c:	d102      	bne.n	8006054 <f_open+0x2e4>
 800604e:	2301      	movs	r3, #1
 8006050:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006054:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006056:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	657b      	str	r3, [r7, #84]	@ 0x54
 800605c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006060:	2b00      	cmp	r3, #0
 8006062:	d103      	bne.n	800606c <f_open+0x2fc>
 8006064:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006066:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006068:	429a      	cmp	r2, r3
 800606a:	d8e0      	bhi.n	800602e <f_open+0x2be>
				}
				fp->clust = clst;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006070:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006072:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006076:	2b00      	cmp	r3, #0
 8006078:	d127      	bne.n	80060ca <f_open+0x35a>
 800607a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800607c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006080:	2b00      	cmp	r3, #0
 8006082:	d022      	beq.n	80060ca <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006088:	4618      	mov	r0, r3
 800608a:	f7fe fcdb 	bl	8004a44 <clust2sect>
 800608e:	6478      	str	r0, [r7, #68]	@ 0x44
 8006090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006092:	2b00      	cmp	r3, #0
 8006094:	d103      	bne.n	800609e <f_open+0x32e>
						res = FR_INT_ERR;
 8006096:	2302      	movs	r3, #2
 8006098:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800609c:	e015      	b.n	80060ca <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800609e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060a0:	0a5a      	lsrs	r2, r3, #9
 80060a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060a4:	441a      	add	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	7858      	ldrb	r0, [r3, #1]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a1a      	ldr	r2, [r3, #32]
 80060b8:	2301      	movs	r3, #1
 80060ba:	f7fe f919 	bl	80042f0 <disk_read>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <f_open+0x35a>
 80060c4:	2301      	movs	r3, #1
 80060c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80060ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <f_open+0x368>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80060d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3760      	adds	r7, #96	@ 0x60
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08c      	sub	sp, #48	@ 0x30
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f107 0210 	add.w	r2, r7, #16
 8006102:	4611      	mov	r1, r2
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff fdb7 	bl	8005c78 <validate>
 800610a:	4603      	mov	r3, r0
 800610c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006110:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006114:	2b00      	cmp	r3, #0
 8006116:	d107      	bne.n	8006128 <f_write+0x44>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	7d5b      	ldrb	r3, [r3, #21]
 800611c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006120:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006124:	2b00      	cmp	r3, #0
 8006126:	d002      	beq.n	800612e <f_write+0x4a>
 8006128:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800612c:	e14b      	b.n	80063c6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	7d1b      	ldrb	r3, [r3, #20]
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <f_write+0x5a>
 800613a:	2307      	movs	r3, #7
 800613c:	e143      	b.n	80063c6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	441a      	add	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	429a      	cmp	r2, r3
 800614c:	f080 812d 	bcs.w	80063aa <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	43db      	mvns	r3, r3
 8006156:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006158:	e127      	b.n	80063aa <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006162:	2b00      	cmp	r3, #0
 8006164:	f040 80e3 	bne.w	800632e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	0a5b      	lsrs	r3, r3, #9
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	8952      	ldrh	r2, [r2, #10]
 8006172:	3a01      	subs	r2, #1
 8006174:	4013      	ands	r3, r2
 8006176:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d143      	bne.n	8006206 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10c      	bne.n	80061a0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800618c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618e:	2b00      	cmp	r3, #0
 8006190:	d11a      	bne.n	80061c8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2100      	movs	r1, #0
 8006196:	4618      	mov	r0, r3
 8006198:	f7fe fe69 	bl	8004e6e <create_chain>
 800619c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800619e:	e013      	b.n	80061c8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d007      	beq.n	80061b8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	4619      	mov	r1, r3
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f7fe fef5 	bl	8004f9e <clmt_clust>
 80061b4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80061b6:	e007      	b.n	80061c8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	4619      	mov	r1, r3
 80061c0:	4610      	mov	r0, r2
 80061c2:	f7fe fe54 	bl	8004e6e <create_chain>
 80061c6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80061c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 80f2 	beq.w	80063b4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80061d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d104      	bne.n	80061e0 <f_write+0xfc>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2202      	movs	r2, #2
 80061da:	755a      	strb	r2, [r3, #21]
 80061dc:	2302      	movs	r3, #2
 80061de:	e0f2      	b.n	80063c6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80061e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061e6:	d104      	bne.n	80061f2 <f_write+0x10e>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	755a      	strb	r2, [r3, #21]
 80061ee:	2301      	movs	r3, #1
 80061f0:	e0e9      	b.n	80063c6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061f6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <f_write+0x122>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006204:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	7d1b      	ldrb	r3, [r3, #20]
 800620a:	b25b      	sxtb	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	da18      	bge.n	8006242 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	7858      	ldrb	r0, [r3, #1]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a1a      	ldr	r2, [r3, #32]
 800621e:	2301      	movs	r3, #1
 8006220:	f7fe f886 	bl	8004330 <disk_write>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d004      	beq.n	8006234 <f_write+0x150>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2201      	movs	r2, #1
 800622e:	755a      	strb	r2, [r3, #21]
 8006230:	2301      	movs	r3, #1
 8006232:	e0c8      	b.n	80063c6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	7d1b      	ldrb	r3, [r3, #20]
 8006238:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800623c:	b2da      	uxtb	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	4619      	mov	r1, r3
 800624a:	4610      	mov	r0, r2
 800624c:	f7fe fbfa 	bl	8004a44 <clust2sect>
 8006250:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d104      	bne.n	8006262 <f_write+0x17e>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2202      	movs	r2, #2
 800625c:	755a      	strb	r2, [r3, #21]
 800625e:	2302      	movs	r3, #2
 8006260:	e0b1      	b.n	80063c6 <f_write+0x2e2>
			sect += csect;
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	4413      	add	r3, r2
 8006268:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	0a5b      	lsrs	r3, r3, #9
 800626e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d03c      	beq.n	80062f0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	4413      	add	r3, r2
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	8952      	ldrh	r2, [r2, #10]
 8006280:	4293      	cmp	r3, r2
 8006282:	d905      	bls.n	8006290 <f_write+0x1ac>
					cc = fs->csize - csect;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	895b      	ldrh	r3, [r3, #10]
 8006288:	461a      	mov	r2, r3
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	7858      	ldrb	r0, [r3, #1]
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	69f9      	ldr	r1, [r7, #28]
 800629a:	f7fe f849 	bl	8004330 <disk_write>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d004      	beq.n	80062ae <f_write+0x1ca>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2201      	movs	r2, #1
 80062a8:	755a      	strb	r2, [r3, #21]
 80062aa:	2301      	movs	r3, #1
 80062ac:	e08b      	b.n	80063c6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a1a      	ldr	r2, [r3, #32]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	6a3a      	ldr	r2, [r7, #32]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d915      	bls.n	80062e8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a1a      	ldr	r2, [r3, #32]
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	025b      	lsls	r3, r3, #9
 80062cc:	69fa      	ldr	r2, [r7, #28]
 80062ce:	4413      	add	r3, r2
 80062d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062d4:	4619      	mov	r1, r3
 80062d6:	f7fe f8eb 	bl	80044b0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	7d1b      	ldrb	r3, [r3, #20]
 80062de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	025b      	lsls	r3, r3, #9
 80062ec:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80062ee:	e03f      	b.n	8006370 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d016      	beq.n	8006328 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	699a      	ldr	r2, [r3, #24]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006302:	429a      	cmp	r2, r3
 8006304:	d210      	bcs.n	8006328 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	7858      	ldrb	r0, [r3, #1]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006310:	2301      	movs	r3, #1
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	f7fd ffec 	bl	80042f0 <disk_read>
 8006318:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800631a:	2b00      	cmp	r3, #0
 800631c:	d004      	beq.n	8006328 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	755a      	strb	r2, [r3, #21]
 8006324:	2301      	movs	r3, #1
 8006326:	e04e      	b.n	80063c6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006336:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800633a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800633c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	429a      	cmp	r2, r3
 8006342:	d901      	bls.n	8006348 <f_write+0x264>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006356:	4413      	add	r3, r2
 8006358:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800635a:	69f9      	ldr	r1, [r7, #28]
 800635c:	4618      	mov	r0, r3
 800635e:	f7fe f8a7 	bl	80044b0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	7d1b      	ldrb	r3, [r3, #20]
 8006366:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800636a:	b2da      	uxtb	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006370:	69fa      	ldr	r2, [r7, #28]
 8006372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006374:	4413      	add	r3, r2
 8006376:	61fb      	str	r3, [r7, #28]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	699a      	ldr	r2, [r3, #24]
 800637c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637e:	441a      	add	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	619a      	str	r2, [r3, #24]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	429a      	cmp	r2, r3
 800638e:	bf38      	it	cc
 8006390:	461a      	movcc	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	60da      	str	r2, [r3, #12]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	441a      	add	r2, r3
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f47f aed4 	bne.w	800615a <f_write+0x76>
 80063b2:	e000      	b.n	80063b6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80063b4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	7d1b      	ldrb	r3, [r3, #20]
 80063ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3730      	adds	r7, #48	@ 0x30
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b086      	sub	sp, #24
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f107 0208 	add.w	r2, r7, #8
 80063dc:	4611      	mov	r1, r2
 80063de:	4618      	mov	r0, r3
 80063e0:	f7ff fc4a 	bl	8005c78 <validate>
 80063e4:	4603      	mov	r3, r0
 80063e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d168      	bne.n	80064c0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	7d1b      	ldrb	r3, [r3, #20]
 80063f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d062      	beq.n	80064c0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	7d1b      	ldrb	r3, [r3, #20]
 80063fe:	b25b      	sxtb	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	da15      	bge.n	8006430 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	7858      	ldrb	r0, [r3, #1]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1a      	ldr	r2, [r3, #32]
 8006412:	2301      	movs	r3, #1
 8006414:	f7fd ff8c 	bl	8004330 <disk_write>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <f_sync+0x54>
 800641e:	2301      	movs	r3, #1
 8006420:	e04f      	b.n	80064c2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	7d1b      	ldrb	r3, [r3, #20]
 8006426:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800642a:	b2da      	uxtb	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006430:	f7fd f9e6 	bl	8003800 <get_fattime>
 8006434:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643c:	4619      	mov	r1, r3
 800643e:	4610      	mov	r0, r2
 8006440:	f7fe fa64 	bl	800490c <move_window>
 8006444:	4603      	mov	r3, r0
 8006446:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006448:	7dfb      	ldrb	r3, [r7, #23]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d138      	bne.n	80064c0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006452:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	330b      	adds	r3, #11
 8006458:	781a      	ldrb	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	330b      	adds	r3, #11
 800645e:	f042 0220 	orr.w	r2, r2, #32
 8006462:	b2d2      	uxtb	r2, r2
 8006464:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	461a      	mov	r2, r3
 8006470:	68f9      	ldr	r1, [r7, #12]
 8006472:	f7fe ff6e 	bl	8005352 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f103 021c 	add.w	r2, r3, #28
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	4619      	mov	r1, r3
 8006482:	4610      	mov	r0, r2
 8006484:	f7fd ffe8 	bl	8004458 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3316      	adds	r3, #22
 800648c:	6939      	ldr	r1, [r7, #16]
 800648e:	4618      	mov	r0, r3
 8006490:	f7fd ffe2 	bl	8004458 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3312      	adds	r3, #18
 8006498:	2100      	movs	r1, #0
 800649a:	4618      	mov	r0, r3
 800649c:	f7fd ffc1 	bl	8004422 <st_word>
					fs->wflag = 1;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2201      	movs	r2, #1
 80064a4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fe fa5d 	bl	8004968 <sync_fs>
 80064ae:	4603      	mov	r3, r0
 80064b0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	7d1b      	ldrb	r3, [r3, #20]
 80064b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80064c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3718      	adds	r7, #24
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7ff ff7b 	bl	80063ce <f_sync>
 80064d8:	4603      	mov	r3, r0
 80064da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d118      	bne.n	8006514 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f107 0208 	add.w	r2, r7, #8
 80064e8:	4611      	mov	r1, r2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7ff fbc4 	bl	8005c78 <validate>
 80064f0:	4603      	mov	r3, r0
 80064f2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10c      	bne.n	8006514 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fe f960 	bl	80047c4 <dec_lock>
 8006504:	4603      	mov	r3, r0
 8006506:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d102      	bne.n	8006514 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006514:	7bfb      	ldrb	r3, [r7, #15]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	4613      	mov	r3, r2
 800652c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800652e:	2301      	movs	r3, #1
 8006530:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006536:	4b1f      	ldr	r3, [pc, #124]	@ (80065b4 <FATFS_LinkDriverEx+0x94>)
 8006538:	7a5b      	ldrb	r3, [r3, #9]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d131      	bne.n	80065a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006540:	4b1c      	ldr	r3, [pc, #112]	@ (80065b4 <FATFS_LinkDriverEx+0x94>)
 8006542:	7a5b      	ldrb	r3, [r3, #9]
 8006544:	b2db      	uxtb	r3, r3
 8006546:	461a      	mov	r2, r3
 8006548:	4b1a      	ldr	r3, [pc, #104]	@ (80065b4 <FATFS_LinkDriverEx+0x94>)
 800654a:	2100      	movs	r1, #0
 800654c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800654e:	4b19      	ldr	r3, [pc, #100]	@ (80065b4 <FATFS_LinkDriverEx+0x94>)
 8006550:	7a5b      	ldrb	r3, [r3, #9]
 8006552:	b2db      	uxtb	r3, r3
 8006554:	4a17      	ldr	r2, [pc, #92]	@ (80065b4 <FATFS_LinkDriverEx+0x94>)
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800655e:	4b15      	ldr	r3, [pc, #84]	@ (80065b4 <FATFS_LinkDriverEx+0x94>)
 8006560:	7a5b      	ldrb	r3, [r3, #9]
 8006562:	b2db      	uxtb	r3, r3
 8006564:	461a      	mov	r2, r3
 8006566:	4b13      	ldr	r3, [pc, #76]	@ (80065b4 <FATFS_LinkDriverEx+0x94>)
 8006568:	4413      	add	r3, r2
 800656a:	79fa      	ldrb	r2, [r7, #7]
 800656c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800656e:	4b11      	ldr	r3, [pc, #68]	@ (80065b4 <FATFS_LinkDriverEx+0x94>)
 8006570:	7a5b      	ldrb	r3, [r3, #9]
 8006572:	b2db      	uxtb	r3, r3
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	b2d1      	uxtb	r1, r2
 8006578:	4a0e      	ldr	r2, [pc, #56]	@ (80065b4 <FATFS_LinkDriverEx+0x94>)
 800657a:	7251      	strb	r1, [r2, #9]
 800657c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800657e:	7dbb      	ldrb	r3, [r7, #22]
 8006580:	3330      	adds	r3, #48	@ 0x30
 8006582:	b2da      	uxtb	r2, r3
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	3301      	adds	r3, #1
 800658c:	223a      	movs	r2, #58	@ 0x3a
 800658e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	3302      	adds	r3, #2
 8006594:	222f      	movs	r2, #47	@ 0x2f
 8006596:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	3303      	adds	r3, #3
 800659c:	2200      	movs	r2, #0
 800659e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80065a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	2000016c 	.word	0x2000016c

080065b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80065c2:	2200      	movs	r2, #0
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff ffaa 	bl	8006520 <FATFS_LinkDriverEx>
 80065cc:	4603      	mov	r3, r0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <memset>:
 80065d6:	4402      	add	r2, r0
 80065d8:	4603      	mov	r3, r0
 80065da:	4293      	cmp	r3, r2
 80065dc:	d100      	bne.n	80065e0 <memset+0xa>
 80065de:	4770      	bx	lr
 80065e0:	f803 1b01 	strb.w	r1, [r3], #1
 80065e4:	e7f9      	b.n	80065da <memset+0x4>
	...

080065e8 <__libc_init_array>:
 80065e8:	b570      	push	{r4, r5, r6, lr}
 80065ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006620 <__libc_init_array+0x38>)
 80065ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006624 <__libc_init_array+0x3c>)
 80065ee:	1b64      	subs	r4, r4, r5
 80065f0:	10a4      	asrs	r4, r4, #2
 80065f2:	2600      	movs	r6, #0
 80065f4:	42a6      	cmp	r6, r4
 80065f6:	d109      	bne.n	800660c <__libc_init_array+0x24>
 80065f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006628 <__libc_init_array+0x40>)
 80065fa:	4c0c      	ldr	r4, [pc, #48]	@ (800662c <__libc_init_array+0x44>)
 80065fc:	f000 f818 	bl	8006630 <_init>
 8006600:	1b64      	subs	r4, r4, r5
 8006602:	10a4      	asrs	r4, r4, #2
 8006604:	2600      	movs	r6, #0
 8006606:	42a6      	cmp	r6, r4
 8006608:	d105      	bne.n	8006616 <__libc_init_array+0x2e>
 800660a:	bd70      	pop	{r4, r5, r6, pc}
 800660c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006610:	4798      	blx	r3
 8006612:	3601      	adds	r6, #1
 8006614:	e7ee      	b.n	80065f4 <__libc_init_array+0xc>
 8006616:	f855 3b04 	ldr.w	r3, [r5], #4
 800661a:	4798      	blx	r3
 800661c:	3601      	adds	r6, #1
 800661e:	e7f2      	b.n	8006606 <__libc_init_array+0x1e>
 8006620:	08006784 	.word	0x08006784
 8006624:	08006784 	.word	0x08006784
 8006628:	08006784 	.word	0x08006784
 800662c:	08006788 	.word	0x08006788

08006630 <_init>:
 8006630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006632:	bf00      	nop
 8006634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006636:	bc08      	pop	{r3}
 8006638:	469e      	mov	lr, r3
 800663a:	4770      	bx	lr

0800663c <_fini>:
 800663c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663e:	bf00      	nop
 8006640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006642:	bc08      	pop	{r3}
 8006644:	469e      	mov	lr, r3
 8006646:	4770      	bx	lr
