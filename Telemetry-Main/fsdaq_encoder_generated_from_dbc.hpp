#include "mbed.h"

#define COLS 254
#define ROWS 8

static const char *col_names[] = { "SME_THROTL_TorqueDemand", "SME_THROTL_MaxSpeed", "SME_THROTL_Forward", "SME_THROTL_Reverse", "SME_THROTL_UNUSED_BIT_1", "SME_THROTL_PowerReady", "SME_THROTL_UNUSED_BIT_2", "SME_THROTL_UNUSED_BIT_3", "SME_THROTL_UNUSED_BIT_4", "SME_THROTL_UNUSED_BIT_5", "SME_THROTL_MBB_Alive", "SME_THROTL_UNUSED_BIT_6", "SME_THROTL_UNUSED_BIT_7", "SME_THROTL_UNUSED_BIT_8", "SME_THROTL_UNUSED_BIT_9", "SME_THROTL_UNUSED_SHORT_1", "SME_CURRLIM_ChargeCurrentLim", "SME_CURRLIM_DischargeCurrentLim", "SME_CURRLIM_UNUSED_INT_1", "SME_TRQSPD_Speed", "SME_TRQSPD_Torque", "SME_TRQSPD_SOC_Low_Traction", "SME_TRQSPD_SOC_Low_Hydraulic", "SME_TRQSPD_Reverse", "SME_TRQSPD_Forward", "SME_TRQSPD_Park_Brake", "SME_TRQSPD_Pedal_Brake", "SME_TRQSPD_Controller_Overtermp", "SME_TRQSPD_Key_switch_overvolt", "SME_TRQSPD_Key_switch_undervolt", "SME_TRQSPD_Running", "SME_TRQSPD_Traction", "SME_TRQSPD_Hydraulic", "SME_TRQSPD_Powering_Enabled", "SME_TRQSPD_Powering_Ready", "SME_TRQSPD_Precharging", "SME_TRQSPD_contactor_closed", "SME_TRQSPD_MotorFlags", "SME_TEMP_MotorTemperature", "SME_TEMP_ControllerTemperature", "SME_TEMP_DC_Bus_V", "SME_TEMP_FaultCode", "SME_TEMP_FaultLevel", "SME_TEMP_BusCurrent", "ACC_STATUS_BMS_FAULT", "ACC_STATUS_IMD_FAULT", "ACC_STATUS_SHUTDOWN_STATE", "ACC_STATUS_PRECHARGE_DONE", "ACC_STATUS_PRECHARGING", "ACC_STATUS_CHARGING", "ACC_STATUS_CELL_TOO_LOW", "ACC_STATUS_CELL_TOO_HIGH", "ACC_STATUS_TEMP_TOO_LOW", "ACC_STATUS_TEMP_TOO_HIGH", "ACC_STATUS_TEMP_TOO_HIGH_CRG", "ACC_STATUS_BALANCING", "ACC_STATUS_GLV_VOLTAGE", "ACC_STATUS_CELL_FAULT_INDEX", "ACC_POWER_PACK_VOLTAGE", "ACC_POWER_SOC", "ACC_POWER_CURRENT", "ACC_SEG0_VOLTS_CELL0", "ACC_SEG0_VOLTS_CELL1", "ACC_SEG0_VOLTS_CELL2", "ACC_SEG0_VOLTS_CELL3", "ACC_SEG0_VOLTS_CELL4", "ACC_SEG0_VOLTS_CELL5", "ACC_SEG0_TEMPS_CELL0", "ACC_SEG0_TEMPS_CELL1", "ACC_SEG0_TEMPS_CELL2", "ACC_SEG0_TEMPS_CELL3", "ACC_SEG0_TEMPS_CELL4", "ACC_SEG0_TEMPS_CELL5", "ACC_SEG1_VOLTS_CELL0", "ACC_SEG1_VOLTS_CELL1", "ACC_SEG1_VOLTS_CELL2", "ACC_SEG1_VOLTS_CELL3", "ACC_SEG1_VOLTS_CELL4", "ACC_SEG1_VOLTS_CELL5", "ACC_SEG1_TEMPS_CELL0", "ACC_SEG1_TEMPS_CELL1", "ACC_SEG1_TEMPS_CELL2", "ACC_SEG1_TEMPS_CELL3", "ACC_SEG1_TEMPS_CELL4", "ACC_SEG1_TEMPS_CELL5", "ACC_SEG2_VOLTS_CELL0", "ACC_SEG2_VOLTS_CELL1", "ACC_SEG2_VOLTS_CELL2", "ACC_SEG2_VOLTS_CELL3", "ACC_SEG2_VOLTS_CELL4", "ACC_SEG2_VOLTS_CELL5", "ACC_SEG2_TEMPS_CELL0", "ACC_SEG2_TEMPS_CELL1", "ACC_SEG2_TEMPS_CELL2", "ACC_SEG2_TEMPS_CELL3", "ACC_SEG2_TEMPS_CELL4", "ACC_SEG2_TEMPS_CELL5", "ACC_SEG3_VOLTS_CELL0", "ACC_SEG3_VOLTS_CELL1", "ACC_SEG3_VOLTS_CELL2", "ACC_SEG3_VOLTS_CELL3", "ACC_SEG3_VOLTS_CELL4", "ACC_SEG3_VOLTS_CELL5", "ACC_SEG3_TEMPS_CELL0", "ACC_SEG3_TEMPS_CELL1", "ACC_SEG3_TEMPS_CELL2", "ACC_SEG3_TEMPS_CELL3", "ACC_SEG3_TEMPS_CELL4", "ACC_SEG3_TEMPS_CELL5", "ACC_SEG4_VOLTS_CELL0", "ACC_SEG4_VOLTS_CELL1", "ACC_SEG4_VOLTS_CELL2", "ACC_SEG4_VOLTS_CELL3", "ACC_SEG4_VOLTS_CELL4", "ACC_SEG4_VOLTS_CELL5", "ACC_SEG4_TEMPS_CELL0", "ACC_SEG4_TEMPS_CELL1", "ACC_SEG4_TEMPS_CELL2", "ACC_SEG4_TEMPS_CELL3", "ACC_SEG4_TEMPS_CELL4", "ACC_SEG4_TEMPS_CELL5", "VDM_GPS_Latitude", "VDM_GPS_Longitude", "VDM_GPS_SPEED", "VDM_GPS_ALTITUDE", "VDM_GPS_TRUE_COURSE", "VDM_GPS_SATELLITES_IN_USE", "VDM_GPS_VALID1", "VDM_GPS_VALID2", "VDM_UTC_DATE_YEAR", "VDM_UTC_DATE_MONTH", "VDM_UTC_DATE_DAY", "VDM_UTC_TIME_HOURS", "VDM_UTC_TIME_MINUTES", "VDM_UTC_TIME_SECONDS", "VDM_X_AXIS_ACCELERATION", "VDM_Y_AXIS_ACCELERATION", "VDM_Z_AXIS_ACCELERATION", "VDM_X_AXIS_YAW_RATE", "VDM_Y_AXIS_YAW_RATE", "VDM_Z_AXIS_YAW_RATE", "ETC_STATUS_HE1", "ETC_STATUS_HE2", "ETC_STATUS_BRAKE_SENSE_VOLTAGE", "ETC_STATUS_PEDAL_TRAVEL", "ETC_STATUS_RTD_BUTTON", "ETC_STATUS_RTDS", "ETC_STATUS_REVERSE", "ETC_STATUS_BRAKELIGHT", "ETC_STATUS_RTD", "ETC_STATUS_IMPLAUSIBILITY", "ETC_STATUS_TS_ACTIVE", "PDB_POWER_A_GLV_VOLTAGE", "PDB_POWER_A_CURRENT_SHUTDOWN", "PDB_POWER_A_CURRENT_ACC", "PDB_POWER_A_CURRENT_ETC", "PDB_POWER_A_CURRENT_BPS", "PDB_POWER_A_CURRENT_TRACTIVE", "PDB_POWER_A_CURRENT_BSPD", "PDB_POWER_B_CURRENT_TELEMETRY", "PDB_POWER_B_CURRENT_PDB", "PDB_POWER_B_CURRENT_DASH", "PDB_POWER_B_CURRENT_RTML", "PDB_POWER_B_CURRENT_EXTRA_1", "PDB_POWER_B_CURRENT_EXTRA_2", "TMAIN_DATA_BRAKES_F", "TMAIN_DATA_BRAKES_R", "TPERIPH_FL_DATA_WHEELSPEED", "TPERIPH_FL_DATA_SUSTRAVEL", "TPERIPH_FL_DATA_STRAIN", "TPERIPH_FL_DATA_SIDE_TIRE_TEMP", "TPERIPH_FR_DATA_WHEELSPEED", "TPERIPH_FR_DATA_SUSTRAVEL", "TPERIPH_FR_DATA_STRAIN", "TPERIPH_FR_DATA_SIDE_TIRE_TEMP", "TPERIPH_BL_DATA_WHEELSPEED", "TPERIPH_BL_DATA_SUSTRAVEL", "TPERIPH_BL_DATA_STRAIN", "TPERIPH_BL_DATA_SIDE_TIRE_TEMP", "TPERIPH_BR_DATA_WHEELSPEED", "TPERIPH_BR_DATA_SUSTRAVEL", "TPERIPH_BR_DATA_STRAIN", "TPERIPH_BR_DATA_SIDE_TIRE_TEMP", "TPERIPH_FL_TIRETEMP_1", "TPERIPH_FL_TIRETEMP_2", "TPERIPH_FL_TIRETEMP_3", "TPERIPH_FL_TIRETEMP_4", "TPERIPH_FL_TIRETEMP_5", "TPERIPH_FL_TIRETEMP_6", "TPERIPH_FL_TIRETEMP_7", "TPERIPH_FL_TIRETEMP_8", "TPERIPH_FR_TIRETEMP_1", "TPERIPH_FR_TIRETEMP_2", "TPERIPH_FR_TIRETEMP_3", "TPERIPH_FR_TIRETEMP_4", "TPERIPH_FR_TIRETEMP_5", "TPERIPH_FR_TIRETEMP_6", "TPERIPH_FR_TIRETEMP_7", "TPERIPH_FR_TIRETEMP_8", "TPERIPH_BL_TIRETEMP_1", "TPERIPH_BL_TIRETEMP_2", "TPERIPH_BL_TIRETEMP_3", "TPERIPH_BL_TIRETEMP_4", "TPERIPH_BL_TIRETEMP_5", "TPERIPH_BL_TIRETEMP_6", "TPERIPH_BL_TIRETEMP_7", "TPERIPH_BL_TIRETEMP_8", "TPERIPH_BR_TIRETEMP_1", "TPERIPH_BR_TIRETEMP_2", "TPERIPH_BR_TIRETEMP_3", "TPERIPH_BR_TIRETEMP_4", "TPERIPH_BR_TIRETEMP_5", "TPERIPH_BR_TIRETEMP_6", "TPERIPH_BR_TIRETEMP_7", "TPERIPH_BR_TIRETEMP_8", "COMMAND_COMMAND_SPECIFIER", "COMMAND_MODE", "RESPONSE_COMMAND_SPECIFIER", "SMPC_CONTROL_DEST_NODE_ID", "SMPC_CONTROL_ENABLE", "SMPC_CONTROL_CURRENT_10X_MULT", "SMPC_CONTROL_EVSE_OVERRIDE", "SMPC_CONTROL_PACK_VOLTAGE", "SMPC_MAX_DEST_NODE_ID", "SMPC_MAX_CHRG_VOLTAGE", "SMPC_MAX_CHRG_CURRENT", "SMPC_MAX_INPUT_EVSE_OVERRIDE", "SMPC_STATUS_READY", "SMPC_STATUS_CHARGE_COMPLETE", "SMPC_STATUS_OVERTEMP_FAULT", "SMPC_STATUS_OVERCURRENT_FAULT", "SMPC_STATUS_OVERVOLTAGE_FAULT", "SMPC_STATUS_UNDERVOLTAGE_FAULT", "SMPC_STATUS_INTERNAL_FAULT", "SMPC_STATUS_CHARGING", "SMPC_STATUS_CHARGER_UNPLUGGED", "SMPC_STATUS_REQUEST_EXCLUSIVE", "SMPC_STATUS_J1772_DISCONN", "SMPC_STATUS_VOLTAGE_MV", "SMPC_STATUS_CURRENT_MA", "SMPC_MAX2_MAX_VOLTAGE_MV", "SMPC_MAX2_MAX_CURRENT_MA", "SMPC_MAX2_EVSE_CURRENT", "SMPC_MAX2_INPUT_CURR_LIM", "SMPC_INPUT_AC_INPUT_VOLTAGE", "SMPC_INPUT_J1772_CONNECTED", "SMPC_INPUT_J1772_DISCONNECTED", "SMPC_INPUT_J1772_TRIGGERED", "SMPC_INPUT_AC_INPUT_CURRENT_MA", "SMPC_INPUT_AC_INPUT_FREQUENCY_HZ", "SMPC_INPUT_MAX_CHARGER_TEMP_C", "SMPC_SER_PART_NUMBER", "SMPC_SER_SERIAL_NUMBER", "SMPC_SER_FIRMWARE_VER" };
static const uint8_t col_name_sizes[] = { 23, 19, 18, 18, 23, 21, 23, 23, 23, 23, 20, 23, 23, 23, 23, 25, 28, 31, 24, 16, 17, 27, 28, 18, 18, 21, 22, 31, 30, 31, 18, 19, 20, 27, 25, 22, 27, 21, 25, 30, 17, 18, 19, 19, 20, 20, 25, 25, 22, 19, 23, 24, 23, 24, 28, 20, 22, 27, 22, 13, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16, 17, 13, 16, 19, 25, 14, 14, 17, 18, 16, 18, 20, 20, 23, 23, 23, 19, 19, 19, 14, 14, 30, 23, 21, 15, 18, 21, 14, 25, 20, 23, 28, 23, 23, 23, 28, 24, 29, 23, 24, 24, 27, 27, 19, 19, 26, 25, 22, 30, 26, 25, 22, 30, 26, 25, 22, 30, 26, 25, 22, 30, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 25, 12, 26, 25, 19, 29, 26, 25, 21, 21, 21, 28, 17, 27, 26, 29, 29, 30, 26, 20, 29, 29, 25, 22, 22, 24, 24, 22, 24, 27, 26, 29, 26, 30, 32, 29, 20, 22, 21 };
static const char *col_name_types[] = { "i4", "i4", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "u3", "b0", "b0", "b0", "b0", "u4", "u4", "u4", "u5", "u4", "i4", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "u4", "u3", "u3", "f5", "u3", "u3", "f5", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "u4", "u5", "f5", "u3", "f5", "f5", "f5", "f5", "f5", "f5", "f5", "i3", "i3", "i3", "i3", "i3", "i3", "f5", "f5", "f5", "f5", "f5", "f5", "i3", "i3", "i3", "i3", "i3", "i3", "f5", "f5", "f5", "f5", "f5", "f5", "i3", "i3", "i3", "i3", "i3", "i3", "f5", "f5", "f5", "f5", "f5", "f5", "i3", "i3", "i3", "i3", "i3", "i3", "f5", "f5", "f5", "f5", "f5", "f5", "i3", "i3", "i3", "i3", "i3", "i3", "i5", "i5", "f5", "i4", "f5", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "f5", "f5", "f5", "f5", "f5", "f5", "u4", "u4", "u4", "u3", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "u4", "f5", "f5", "f5", "f5", "f5", "f5", "f5", "f5", "f5", "f5", "f5", "f5", "f5", "f5", "f5", "f5", "f5", "u3", "f5", "f5", "f5", "u3", "f5", "f5", "f5", "u3", "f5", "f5", "f5", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "u3", "b0", "b0", "b0", "u5", "u3", "u5", "u4", "u3", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "b0", "u5", "u4", "u5", "u4", "u3", "u3", "u3", "b0", "b0", "b0", "u4", "u3", "u3", "u4", "u5", "u4" };

struct ValuesRow {
    int16_t SME_THROTL_TorqueDemand;
    int16_t SME_THROTL_MaxSpeed;
    bool SME_THROTL_Forward;
    bool SME_THROTL_Reverse;
    bool SME_THROTL_UNUSED_BIT_1;
    bool SME_THROTL_PowerReady;
    bool SME_THROTL_UNUSED_BIT_2;
    bool SME_THROTL_UNUSED_BIT_3;
    bool SME_THROTL_UNUSED_BIT_4;
    bool SME_THROTL_UNUSED_BIT_5;
    uint8_t SME_THROTL_MBB_Alive;
    bool SME_THROTL_UNUSED_BIT_6;
    bool SME_THROTL_UNUSED_BIT_7;
    bool SME_THROTL_UNUSED_BIT_8;
    bool SME_THROTL_UNUSED_BIT_9;
    uint16_t SME_THROTL_UNUSED_SHORT_1;
    uint16_t SME_CURRLIM_ChargeCurrentLim;
    uint16_t SME_CURRLIM_DischargeCurrentLim;
    uint32_t SME_CURRLIM_UNUSED_INT_1;
    uint16_t SME_TRQSPD_Speed;
    int16_t SME_TRQSPD_Torque;
    bool SME_TRQSPD_SOC_Low_Traction;
    bool SME_TRQSPD_SOC_Low_Hydraulic;
    bool SME_TRQSPD_Reverse;
    bool SME_TRQSPD_Forward;
    bool SME_TRQSPD_Park_Brake;
    bool SME_TRQSPD_Pedal_Brake;
    bool SME_TRQSPD_Controller_Overtermp;
    bool SME_TRQSPD_Key_switch_overvolt;
    bool SME_TRQSPD_Key_switch_undervolt;
    bool SME_TRQSPD_Running;
    bool SME_TRQSPD_Traction;
    bool SME_TRQSPD_Hydraulic;
    bool SME_TRQSPD_Powering_Enabled;
    bool SME_TRQSPD_Powering_Ready;
    bool SME_TRQSPD_Precharging;
    bool SME_TRQSPD_contactor_closed;
    uint16_t SME_TRQSPD_MotorFlags;
    uint8_t SME_TEMP_MotorTemperature;
    uint8_t SME_TEMP_ControllerTemperature;
    float SME_TEMP_DC_Bus_V;
    uint8_t SME_TEMP_FaultCode;
    uint8_t SME_TEMP_FaultLevel;
    float SME_TEMP_BusCurrent;
    bool ACC_STATUS_BMS_FAULT;
    bool ACC_STATUS_IMD_FAULT;
    bool ACC_STATUS_SHUTDOWN_STATE;
    bool ACC_STATUS_PRECHARGE_DONE;
    bool ACC_STATUS_PRECHARGING;
    bool ACC_STATUS_CHARGING;
    bool ACC_STATUS_CELL_TOO_LOW;
    bool ACC_STATUS_CELL_TOO_HIGH;
    bool ACC_STATUS_TEMP_TOO_LOW;
    bool ACC_STATUS_TEMP_TOO_HIGH;
    bool ACC_STATUS_TEMP_TOO_HIGH_CRG;
    bool ACC_STATUS_BALANCING;
    uint16_t ACC_STATUS_GLV_VOLTAGE;
    uint32_t ACC_STATUS_CELL_FAULT_INDEX;
    float ACC_POWER_PACK_VOLTAGE;
    uint8_t ACC_POWER_SOC;
    float ACC_POWER_CURRENT;
    float ACC_SEG0_VOLTS_CELL0;
    float ACC_SEG0_VOLTS_CELL1;
    float ACC_SEG0_VOLTS_CELL2;
    float ACC_SEG0_VOLTS_CELL3;
    float ACC_SEG0_VOLTS_CELL4;
    float ACC_SEG0_VOLTS_CELL5;
    int8_t ACC_SEG0_TEMPS_CELL0;
    int8_t ACC_SEG0_TEMPS_CELL1;
    int8_t ACC_SEG0_TEMPS_CELL2;
    int8_t ACC_SEG0_TEMPS_CELL3;
    int8_t ACC_SEG0_TEMPS_CELL4;
    int8_t ACC_SEG0_TEMPS_CELL5;
    float ACC_SEG1_VOLTS_CELL0;
    float ACC_SEG1_VOLTS_CELL1;
    float ACC_SEG1_VOLTS_CELL2;
    float ACC_SEG1_VOLTS_CELL3;
    float ACC_SEG1_VOLTS_CELL4;
    float ACC_SEG1_VOLTS_CELL5;
    int8_t ACC_SEG1_TEMPS_CELL0;
    int8_t ACC_SEG1_TEMPS_CELL1;
    int8_t ACC_SEG1_TEMPS_CELL2;
    int8_t ACC_SEG1_TEMPS_CELL3;
    int8_t ACC_SEG1_TEMPS_CELL4;
    int8_t ACC_SEG1_TEMPS_CELL5;
    float ACC_SEG2_VOLTS_CELL0;
    float ACC_SEG2_VOLTS_CELL1;
    float ACC_SEG2_VOLTS_CELL2;
    float ACC_SEG2_VOLTS_CELL3;
    float ACC_SEG2_VOLTS_CELL4;
    float ACC_SEG2_VOLTS_CELL5;
    int8_t ACC_SEG2_TEMPS_CELL0;
    int8_t ACC_SEG2_TEMPS_CELL1;
    int8_t ACC_SEG2_TEMPS_CELL2;
    int8_t ACC_SEG2_TEMPS_CELL3;
    int8_t ACC_SEG2_TEMPS_CELL4;
    int8_t ACC_SEG2_TEMPS_CELL5;
    float ACC_SEG3_VOLTS_CELL0;
    float ACC_SEG3_VOLTS_CELL1;
    float ACC_SEG3_VOLTS_CELL2;
    float ACC_SEG3_VOLTS_CELL3;
    float ACC_SEG3_VOLTS_CELL4;
    float ACC_SEG3_VOLTS_CELL5;
    int8_t ACC_SEG3_TEMPS_CELL0;
    int8_t ACC_SEG3_TEMPS_CELL1;
    int8_t ACC_SEG3_TEMPS_CELL2;
    int8_t ACC_SEG3_TEMPS_CELL3;
    int8_t ACC_SEG3_TEMPS_CELL4;
    int8_t ACC_SEG3_TEMPS_CELL5;
    float ACC_SEG4_VOLTS_CELL0;
    float ACC_SEG4_VOLTS_CELL1;
    float ACC_SEG4_VOLTS_CELL2;
    float ACC_SEG4_VOLTS_CELL3;
    float ACC_SEG4_VOLTS_CELL4;
    float ACC_SEG4_VOLTS_CELL5;
    int8_t ACC_SEG4_TEMPS_CELL0;
    int8_t ACC_SEG4_TEMPS_CELL1;
    int8_t ACC_SEG4_TEMPS_CELL2;
    int8_t ACC_SEG4_TEMPS_CELL3;
    int8_t ACC_SEG4_TEMPS_CELL4;
    int8_t ACC_SEG4_TEMPS_CELL5;
    int32_t VDM_GPS_Latitude;
    int32_t VDM_GPS_Longitude;
    float VDM_GPS_SPEED;
    int16_t VDM_GPS_ALTITUDE;
    float VDM_GPS_TRUE_COURSE;
    uint8_t VDM_GPS_SATELLITES_IN_USE;
    uint8_t VDM_GPS_VALID1;
    uint8_t VDM_GPS_VALID2;
    uint8_t VDM_UTC_DATE_YEAR;
    uint8_t VDM_UTC_DATE_MONTH;
    uint8_t VDM_UTC_DATE_DAY;
    uint8_t VDM_UTC_TIME_HOURS;
    uint8_t VDM_UTC_TIME_MINUTES;
    uint8_t VDM_UTC_TIME_SECONDS;
    float VDM_X_AXIS_ACCELERATION;
    float VDM_Y_AXIS_ACCELERATION;
    float VDM_Z_AXIS_ACCELERATION;
    float VDM_X_AXIS_YAW_RATE;
    float VDM_Y_AXIS_YAW_RATE;
    float VDM_Z_AXIS_YAW_RATE;
    uint16_t ETC_STATUS_HE1;
    uint16_t ETC_STATUS_HE2;
    uint16_t ETC_STATUS_BRAKE_SENSE_VOLTAGE;
    uint8_t ETC_STATUS_PEDAL_TRAVEL;
    bool ETC_STATUS_RTD_BUTTON;
    bool ETC_STATUS_RTDS;
    bool ETC_STATUS_REVERSE;
    bool ETC_STATUS_BRAKELIGHT;
    bool ETC_STATUS_RTD;
    bool ETC_STATUS_IMPLAUSIBILITY;
    bool ETC_STATUS_TS_ACTIVE;
    uint16_t PDB_POWER_A_GLV_VOLTAGE;
    float PDB_POWER_A_CURRENT_SHUTDOWN;
    float PDB_POWER_A_CURRENT_ACC;
    float PDB_POWER_A_CURRENT_ETC;
    float PDB_POWER_A_CURRENT_BPS;
    float PDB_POWER_A_CURRENT_TRACTIVE;
    float PDB_POWER_A_CURRENT_BSPD;
    float PDB_POWER_B_CURRENT_TELEMETRY;
    float PDB_POWER_B_CURRENT_PDB;
    float PDB_POWER_B_CURRENT_DASH;
    float PDB_POWER_B_CURRENT_RTML;
    float PDB_POWER_B_CURRENT_EXTRA_1;
    float PDB_POWER_B_CURRENT_EXTRA_2;
    float TMAIN_DATA_BRAKES_F;
    float TMAIN_DATA_BRAKES_R;
    float TPERIPH_FL_DATA_WHEELSPEED;
    float TPERIPH_FL_DATA_SUSTRAVEL;
    float TPERIPH_FL_DATA_STRAIN;
    uint8_t TPERIPH_FL_DATA_SIDE_TIRE_TEMP;
    float TPERIPH_FR_DATA_WHEELSPEED;
    float TPERIPH_FR_DATA_SUSTRAVEL;
    float TPERIPH_FR_DATA_STRAIN;
    uint8_t TPERIPH_FR_DATA_SIDE_TIRE_TEMP;
    float TPERIPH_BL_DATA_WHEELSPEED;
    float TPERIPH_BL_DATA_SUSTRAVEL;
    float TPERIPH_BL_DATA_STRAIN;
    uint8_t TPERIPH_BL_DATA_SIDE_TIRE_TEMP;
    float TPERIPH_BR_DATA_WHEELSPEED;
    float TPERIPH_BR_DATA_SUSTRAVEL;
    float TPERIPH_BR_DATA_STRAIN;
    uint8_t TPERIPH_BR_DATA_SIDE_TIRE_TEMP;
    uint8_t TPERIPH_FL_TIRETEMP_1;
    uint8_t TPERIPH_FL_TIRETEMP_2;
    uint8_t TPERIPH_FL_TIRETEMP_3;
    uint8_t TPERIPH_FL_TIRETEMP_4;
    uint8_t TPERIPH_FL_TIRETEMP_5;
    uint8_t TPERIPH_FL_TIRETEMP_6;
    uint8_t TPERIPH_FL_TIRETEMP_7;
    uint8_t TPERIPH_FL_TIRETEMP_8;
    uint8_t TPERIPH_FR_TIRETEMP_1;
    uint8_t TPERIPH_FR_TIRETEMP_2;
    uint8_t TPERIPH_FR_TIRETEMP_3;
    uint8_t TPERIPH_FR_TIRETEMP_4;
    uint8_t TPERIPH_FR_TIRETEMP_5;
    uint8_t TPERIPH_FR_TIRETEMP_6;
    uint8_t TPERIPH_FR_TIRETEMP_7;
    uint8_t TPERIPH_FR_TIRETEMP_8;
    uint8_t TPERIPH_BL_TIRETEMP_1;
    uint8_t TPERIPH_BL_TIRETEMP_2;
    uint8_t TPERIPH_BL_TIRETEMP_3;
    uint8_t TPERIPH_BL_TIRETEMP_4;
    uint8_t TPERIPH_BL_TIRETEMP_5;
    uint8_t TPERIPH_BL_TIRETEMP_6;
    uint8_t TPERIPH_BL_TIRETEMP_7;
    uint8_t TPERIPH_BL_TIRETEMP_8;
    uint8_t TPERIPH_BR_TIRETEMP_1;
    uint8_t TPERIPH_BR_TIRETEMP_2;
    uint8_t TPERIPH_BR_TIRETEMP_3;
    uint8_t TPERIPH_BR_TIRETEMP_4;
    uint8_t TPERIPH_BR_TIRETEMP_5;
    uint8_t TPERIPH_BR_TIRETEMP_6;
    uint8_t TPERIPH_BR_TIRETEMP_7;
    uint8_t TPERIPH_BR_TIRETEMP_8;
    uint8_t COMMAND_COMMAND_SPECIFIER;
    uint8_t COMMAND_MODE;
    uint8_t RESPONSE_COMMAND_SPECIFIER;
    uint8_t SMPC_CONTROL_DEST_NODE_ID;
    bool SMPC_CONTROL_ENABLE;
    bool SMPC_CONTROL_CURRENT_10X_MULT;
    bool SMPC_CONTROL_EVSE_OVERRIDE;
    uint32_t SMPC_CONTROL_PACK_VOLTAGE;
    uint8_t SMPC_MAX_DEST_NODE_ID;
    uint32_t SMPC_MAX_CHRG_VOLTAGE;
    uint16_t SMPC_MAX_CHRG_CURRENT;
    uint8_t SMPC_MAX_INPUT_EVSE_OVERRIDE;
    bool SMPC_STATUS_READY;
    bool SMPC_STATUS_CHARGE_COMPLETE;
    bool SMPC_STATUS_OVERTEMP_FAULT;
    bool SMPC_STATUS_OVERCURRENT_FAULT;
    bool SMPC_STATUS_OVERVOLTAGE_FAULT;
    bool SMPC_STATUS_UNDERVOLTAGE_FAULT;
    bool SMPC_STATUS_INTERNAL_FAULT;
    bool SMPC_STATUS_CHARGING;
    bool SMPC_STATUS_CHARGER_UNPLUGGED;
    bool SMPC_STATUS_REQUEST_EXCLUSIVE;
    bool SMPC_STATUS_J1772_DISCONN;
    uint32_t SMPC_STATUS_VOLTAGE_MV;
    uint16_t SMPC_STATUS_CURRENT_MA;
    uint32_t SMPC_MAX2_MAX_VOLTAGE_MV;
    uint16_t SMPC_MAX2_MAX_CURRENT_MA;
    uint8_t SMPC_MAX2_EVSE_CURRENT;
    uint8_t SMPC_MAX2_INPUT_CURR_LIM;
    uint8_t SMPC_INPUT_AC_INPUT_VOLTAGE;
    bool SMPC_INPUT_J1772_CONNECTED;
    bool SMPC_INPUT_J1772_DISCONNECTED;
    bool SMPC_INPUT_J1772_TRIGGERED;
    uint16_t SMPC_INPUT_AC_INPUT_CURRENT_MA;
    uint8_t SMPC_INPUT_AC_INPUT_FREQUENCY_HZ;
    uint8_t SMPC_INPUT_MAX_CHARGER_TEMP_C;
    uint16_t SMPC_SER_PART_NUMBER;
    uint32_t SMPC_SER_SERIAL_NUMBER;
    uint16_t SMPC_SER_FIRMWARE_VER;
};

#pragma pack(1)
class Values {
    int16_t SME_THROTL_TorqueDemand[ROWS];
    int16_t SME_THROTL_MaxSpeed[ROWS];
    uint8_t SME_THROTL_Forward[ROWS/8];
    uint8_t SME_THROTL_Reverse[ROWS/8];
    uint8_t SME_THROTL_UNUSED_BIT_1[ROWS/8];
    uint8_t SME_THROTL_PowerReady[ROWS/8];
    uint8_t SME_THROTL_UNUSED_BIT_2[ROWS/8];
    uint8_t SME_THROTL_UNUSED_BIT_3[ROWS/8];
    uint8_t SME_THROTL_UNUSED_BIT_4[ROWS/8];
    uint8_t SME_THROTL_UNUSED_BIT_5[ROWS/8];
    uint8_t SME_THROTL_MBB_Alive[ROWS];
    uint8_t SME_THROTL_UNUSED_BIT_6[ROWS/8];
    uint8_t SME_THROTL_UNUSED_BIT_7[ROWS/8];
    uint8_t SME_THROTL_UNUSED_BIT_8[ROWS/8];
    uint8_t SME_THROTL_UNUSED_BIT_9[ROWS/8];
    uint16_t SME_THROTL_UNUSED_SHORT_1[ROWS];
    uint16_t SME_CURRLIM_ChargeCurrentLim[ROWS];
    uint16_t SME_CURRLIM_DischargeCurrentLim[ROWS];
    uint32_t SME_CURRLIM_UNUSED_INT_1[ROWS];
    uint16_t SME_TRQSPD_Speed[ROWS];
    int16_t SME_TRQSPD_Torque[ROWS];
    uint8_t SME_TRQSPD_SOC_Low_Traction[ROWS/8];
    uint8_t SME_TRQSPD_SOC_Low_Hydraulic[ROWS/8];
    uint8_t SME_TRQSPD_Reverse[ROWS/8];
    uint8_t SME_TRQSPD_Forward[ROWS/8];
    uint8_t SME_TRQSPD_Park_Brake[ROWS/8];
    uint8_t SME_TRQSPD_Pedal_Brake[ROWS/8];
    uint8_t SME_TRQSPD_Controller_Overtermp[ROWS/8];
    uint8_t SME_TRQSPD_Key_switch_overvolt[ROWS/8];
    uint8_t SME_TRQSPD_Key_switch_undervolt[ROWS/8];
    uint8_t SME_TRQSPD_Running[ROWS/8];
    uint8_t SME_TRQSPD_Traction[ROWS/8];
    uint8_t SME_TRQSPD_Hydraulic[ROWS/8];
    uint8_t SME_TRQSPD_Powering_Enabled[ROWS/8];
    uint8_t SME_TRQSPD_Powering_Ready[ROWS/8];
    uint8_t SME_TRQSPD_Precharging[ROWS/8];
    uint8_t SME_TRQSPD_contactor_closed[ROWS/8];
    uint16_t SME_TRQSPD_MotorFlags[ROWS];
    uint8_t SME_TEMP_MotorTemperature[ROWS];
    uint8_t SME_TEMP_ControllerTemperature[ROWS];
    float SME_TEMP_DC_Bus_V[ROWS];
    uint8_t SME_TEMP_FaultCode[ROWS];
    uint8_t SME_TEMP_FaultLevel[ROWS];
    float SME_TEMP_BusCurrent[ROWS];
    uint8_t ACC_STATUS_BMS_FAULT[ROWS/8];
    uint8_t ACC_STATUS_IMD_FAULT[ROWS/8];
    uint8_t ACC_STATUS_SHUTDOWN_STATE[ROWS/8];
    uint8_t ACC_STATUS_PRECHARGE_DONE[ROWS/8];
    uint8_t ACC_STATUS_PRECHARGING[ROWS/8];
    uint8_t ACC_STATUS_CHARGING[ROWS/8];
    uint8_t ACC_STATUS_CELL_TOO_LOW[ROWS/8];
    uint8_t ACC_STATUS_CELL_TOO_HIGH[ROWS/8];
    uint8_t ACC_STATUS_TEMP_TOO_LOW[ROWS/8];
    uint8_t ACC_STATUS_TEMP_TOO_HIGH[ROWS/8];
    uint8_t ACC_STATUS_TEMP_TOO_HIGH_CRG[ROWS/8];
    uint8_t ACC_STATUS_BALANCING[ROWS/8];
    uint16_t ACC_STATUS_GLV_VOLTAGE[ROWS];
    uint32_t ACC_STATUS_CELL_FAULT_INDEX[ROWS];
    float ACC_POWER_PACK_VOLTAGE[ROWS];
    uint8_t ACC_POWER_SOC[ROWS];
    float ACC_POWER_CURRENT[ROWS];
    float ACC_SEG0_VOLTS_CELL0[ROWS];
    float ACC_SEG0_VOLTS_CELL1[ROWS];
    float ACC_SEG0_VOLTS_CELL2[ROWS];
    float ACC_SEG0_VOLTS_CELL3[ROWS];
    float ACC_SEG0_VOLTS_CELL4[ROWS];
    float ACC_SEG0_VOLTS_CELL5[ROWS];
    int8_t ACC_SEG0_TEMPS_CELL0[ROWS];
    int8_t ACC_SEG0_TEMPS_CELL1[ROWS];
    int8_t ACC_SEG0_TEMPS_CELL2[ROWS];
    int8_t ACC_SEG0_TEMPS_CELL3[ROWS];
    int8_t ACC_SEG0_TEMPS_CELL4[ROWS];
    int8_t ACC_SEG0_TEMPS_CELL5[ROWS];
    float ACC_SEG1_VOLTS_CELL0[ROWS];
    float ACC_SEG1_VOLTS_CELL1[ROWS];
    float ACC_SEG1_VOLTS_CELL2[ROWS];
    float ACC_SEG1_VOLTS_CELL3[ROWS];
    float ACC_SEG1_VOLTS_CELL4[ROWS];
    float ACC_SEG1_VOLTS_CELL5[ROWS];
    int8_t ACC_SEG1_TEMPS_CELL0[ROWS];
    int8_t ACC_SEG1_TEMPS_CELL1[ROWS];
    int8_t ACC_SEG1_TEMPS_CELL2[ROWS];
    int8_t ACC_SEG1_TEMPS_CELL3[ROWS];
    int8_t ACC_SEG1_TEMPS_CELL4[ROWS];
    int8_t ACC_SEG1_TEMPS_CELL5[ROWS];
    float ACC_SEG2_VOLTS_CELL0[ROWS];
    float ACC_SEG2_VOLTS_CELL1[ROWS];
    float ACC_SEG2_VOLTS_CELL2[ROWS];
    float ACC_SEG2_VOLTS_CELL3[ROWS];
    float ACC_SEG2_VOLTS_CELL4[ROWS];
    float ACC_SEG2_VOLTS_CELL5[ROWS];
    int8_t ACC_SEG2_TEMPS_CELL0[ROWS];
    int8_t ACC_SEG2_TEMPS_CELL1[ROWS];
    int8_t ACC_SEG2_TEMPS_CELL2[ROWS];
    int8_t ACC_SEG2_TEMPS_CELL3[ROWS];
    int8_t ACC_SEG2_TEMPS_CELL4[ROWS];
    int8_t ACC_SEG2_TEMPS_CELL5[ROWS];
    float ACC_SEG3_VOLTS_CELL0[ROWS];
    float ACC_SEG3_VOLTS_CELL1[ROWS];
    float ACC_SEG3_VOLTS_CELL2[ROWS];
    float ACC_SEG3_VOLTS_CELL3[ROWS];
    float ACC_SEG3_VOLTS_CELL4[ROWS];
    float ACC_SEG3_VOLTS_CELL5[ROWS];
    int8_t ACC_SEG3_TEMPS_CELL0[ROWS];
    int8_t ACC_SEG3_TEMPS_CELL1[ROWS];
    int8_t ACC_SEG3_TEMPS_CELL2[ROWS];
    int8_t ACC_SEG3_TEMPS_CELL3[ROWS];
    int8_t ACC_SEG3_TEMPS_CELL4[ROWS];
    int8_t ACC_SEG3_TEMPS_CELL5[ROWS];
    float ACC_SEG4_VOLTS_CELL0[ROWS];
    float ACC_SEG4_VOLTS_CELL1[ROWS];
    float ACC_SEG4_VOLTS_CELL2[ROWS];
    float ACC_SEG4_VOLTS_CELL3[ROWS];
    float ACC_SEG4_VOLTS_CELL4[ROWS];
    float ACC_SEG4_VOLTS_CELL5[ROWS];
    int8_t ACC_SEG4_TEMPS_CELL0[ROWS];
    int8_t ACC_SEG4_TEMPS_CELL1[ROWS];
    int8_t ACC_SEG4_TEMPS_CELL2[ROWS];
    int8_t ACC_SEG4_TEMPS_CELL3[ROWS];
    int8_t ACC_SEG4_TEMPS_CELL4[ROWS];
    int8_t ACC_SEG4_TEMPS_CELL5[ROWS];
    int32_t VDM_GPS_Latitude[ROWS];
    int32_t VDM_GPS_Longitude[ROWS];
    float VDM_GPS_SPEED[ROWS];
    int16_t VDM_GPS_ALTITUDE[ROWS];
    float VDM_GPS_TRUE_COURSE[ROWS];
    uint8_t VDM_GPS_SATELLITES_IN_USE[ROWS];
    uint8_t VDM_GPS_VALID1[ROWS];
    uint8_t VDM_GPS_VALID2[ROWS];
    uint8_t VDM_UTC_DATE_YEAR[ROWS];
    uint8_t VDM_UTC_DATE_MONTH[ROWS];
    uint8_t VDM_UTC_DATE_DAY[ROWS];
    uint8_t VDM_UTC_TIME_HOURS[ROWS];
    uint8_t VDM_UTC_TIME_MINUTES[ROWS];
    uint8_t VDM_UTC_TIME_SECONDS[ROWS];
    float VDM_X_AXIS_ACCELERATION[ROWS];
    float VDM_Y_AXIS_ACCELERATION[ROWS];
    float VDM_Z_AXIS_ACCELERATION[ROWS];
    float VDM_X_AXIS_YAW_RATE[ROWS];
    float VDM_Y_AXIS_YAW_RATE[ROWS];
    float VDM_Z_AXIS_YAW_RATE[ROWS];
    uint16_t ETC_STATUS_HE1[ROWS];
    uint16_t ETC_STATUS_HE2[ROWS];
    uint16_t ETC_STATUS_BRAKE_SENSE_VOLTAGE[ROWS];
    uint8_t ETC_STATUS_PEDAL_TRAVEL[ROWS];
    uint8_t ETC_STATUS_RTD_BUTTON[ROWS/8];
    uint8_t ETC_STATUS_RTDS[ROWS/8];
    uint8_t ETC_STATUS_REVERSE[ROWS/8];
    uint8_t ETC_STATUS_BRAKELIGHT[ROWS/8];
    uint8_t ETC_STATUS_RTD[ROWS/8];
    uint8_t ETC_STATUS_IMPLAUSIBILITY[ROWS/8];
    uint8_t ETC_STATUS_TS_ACTIVE[ROWS/8];
    uint16_t PDB_POWER_A_GLV_VOLTAGE[ROWS];
    float PDB_POWER_A_CURRENT_SHUTDOWN[ROWS];
    float PDB_POWER_A_CURRENT_ACC[ROWS];
    float PDB_POWER_A_CURRENT_ETC[ROWS];
    float PDB_POWER_A_CURRENT_BPS[ROWS];
    float PDB_POWER_A_CURRENT_TRACTIVE[ROWS];
    float PDB_POWER_A_CURRENT_BSPD[ROWS];
    float PDB_POWER_B_CURRENT_TELEMETRY[ROWS];
    float PDB_POWER_B_CURRENT_PDB[ROWS];
    float PDB_POWER_B_CURRENT_DASH[ROWS];
    float PDB_POWER_B_CURRENT_RTML[ROWS];
    float PDB_POWER_B_CURRENT_EXTRA_1[ROWS];
    float PDB_POWER_B_CURRENT_EXTRA_2[ROWS];
    float TMAIN_DATA_BRAKES_F[ROWS];
    float TMAIN_DATA_BRAKES_R[ROWS];
    float TPERIPH_FL_DATA_WHEELSPEED[ROWS];
    float TPERIPH_FL_DATA_SUSTRAVEL[ROWS];
    float TPERIPH_FL_DATA_STRAIN[ROWS];
    uint8_t TPERIPH_FL_DATA_SIDE_TIRE_TEMP[ROWS];
    float TPERIPH_FR_DATA_WHEELSPEED[ROWS];
    float TPERIPH_FR_DATA_SUSTRAVEL[ROWS];
    float TPERIPH_FR_DATA_STRAIN[ROWS];
    uint8_t TPERIPH_FR_DATA_SIDE_TIRE_TEMP[ROWS];
    float TPERIPH_BL_DATA_WHEELSPEED[ROWS];
    float TPERIPH_BL_DATA_SUSTRAVEL[ROWS];
    float TPERIPH_BL_DATA_STRAIN[ROWS];
    uint8_t TPERIPH_BL_DATA_SIDE_TIRE_TEMP[ROWS];
    float TPERIPH_BR_DATA_WHEELSPEED[ROWS];
    float TPERIPH_BR_DATA_SUSTRAVEL[ROWS];
    float TPERIPH_BR_DATA_STRAIN[ROWS];
    uint8_t TPERIPH_BR_DATA_SIDE_TIRE_TEMP[ROWS];
    uint8_t TPERIPH_FL_TIRETEMP_1[ROWS];
    uint8_t TPERIPH_FL_TIRETEMP_2[ROWS];
    uint8_t TPERIPH_FL_TIRETEMP_3[ROWS];
    uint8_t TPERIPH_FL_TIRETEMP_4[ROWS];
    uint8_t TPERIPH_FL_TIRETEMP_5[ROWS];
    uint8_t TPERIPH_FL_TIRETEMP_6[ROWS];
    uint8_t TPERIPH_FL_TIRETEMP_7[ROWS];
    uint8_t TPERIPH_FL_TIRETEMP_8[ROWS];
    uint8_t TPERIPH_FR_TIRETEMP_1[ROWS];
    uint8_t TPERIPH_FR_TIRETEMP_2[ROWS];
    uint8_t TPERIPH_FR_TIRETEMP_3[ROWS];
    uint8_t TPERIPH_FR_TIRETEMP_4[ROWS];
    uint8_t TPERIPH_FR_TIRETEMP_5[ROWS];
    uint8_t TPERIPH_FR_TIRETEMP_6[ROWS];
    uint8_t TPERIPH_FR_TIRETEMP_7[ROWS];
    uint8_t TPERIPH_FR_TIRETEMP_8[ROWS];
    uint8_t TPERIPH_BL_TIRETEMP_1[ROWS];
    uint8_t TPERIPH_BL_TIRETEMP_2[ROWS];
    uint8_t TPERIPH_BL_TIRETEMP_3[ROWS];
    uint8_t TPERIPH_BL_TIRETEMP_4[ROWS];
    uint8_t TPERIPH_BL_TIRETEMP_5[ROWS];
    uint8_t TPERIPH_BL_TIRETEMP_6[ROWS];
    uint8_t TPERIPH_BL_TIRETEMP_7[ROWS];
    uint8_t TPERIPH_BL_TIRETEMP_8[ROWS];
    uint8_t TPERIPH_BR_TIRETEMP_1[ROWS];
    uint8_t TPERIPH_BR_TIRETEMP_2[ROWS];
    uint8_t TPERIPH_BR_TIRETEMP_3[ROWS];
    uint8_t TPERIPH_BR_TIRETEMP_4[ROWS];
    uint8_t TPERIPH_BR_TIRETEMP_5[ROWS];
    uint8_t TPERIPH_BR_TIRETEMP_6[ROWS];
    uint8_t TPERIPH_BR_TIRETEMP_7[ROWS];
    uint8_t TPERIPH_BR_TIRETEMP_8[ROWS];
    uint8_t COMMAND_COMMAND_SPECIFIER[ROWS];
    uint8_t COMMAND_MODE[ROWS];
    uint8_t RESPONSE_COMMAND_SPECIFIER[ROWS];
    uint8_t SMPC_CONTROL_DEST_NODE_ID[ROWS];
    uint8_t SMPC_CONTROL_ENABLE[ROWS/8];
    uint8_t SMPC_CONTROL_CURRENT_10X_MULT[ROWS/8];
    uint8_t SMPC_CONTROL_EVSE_OVERRIDE[ROWS/8];
    uint32_t SMPC_CONTROL_PACK_VOLTAGE[ROWS];
    uint8_t SMPC_MAX_DEST_NODE_ID[ROWS];
    uint32_t SMPC_MAX_CHRG_VOLTAGE[ROWS];
    uint16_t SMPC_MAX_CHRG_CURRENT[ROWS];
    uint8_t SMPC_MAX_INPUT_EVSE_OVERRIDE[ROWS];
    uint8_t SMPC_STATUS_READY[ROWS/8];
    uint8_t SMPC_STATUS_CHARGE_COMPLETE[ROWS/8];
    uint8_t SMPC_STATUS_OVERTEMP_FAULT[ROWS/8];
    uint8_t SMPC_STATUS_OVERCURRENT_FAULT[ROWS/8];
    uint8_t SMPC_STATUS_OVERVOLTAGE_FAULT[ROWS/8];
    uint8_t SMPC_STATUS_UNDERVOLTAGE_FAULT[ROWS/8];
    uint8_t SMPC_STATUS_INTERNAL_FAULT[ROWS/8];
    uint8_t SMPC_STATUS_CHARGING[ROWS/8];
    uint8_t SMPC_STATUS_CHARGER_UNPLUGGED[ROWS/8];
    uint8_t SMPC_STATUS_REQUEST_EXCLUSIVE[ROWS/8];
    uint8_t SMPC_STATUS_J1772_DISCONN[ROWS/8];
    uint32_t SMPC_STATUS_VOLTAGE_MV[ROWS];
    uint16_t SMPC_STATUS_CURRENT_MA[ROWS];
    uint32_t SMPC_MAX2_MAX_VOLTAGE_MV[ROWS];
    uint16_t SMPC_MAX2_MAX_CURRENT_MA[ROWS];
    uint8_t SMPC_MAX2_EVSE_CURRENT[ROWS];
    uint8_t SMPC_MAX2_INPUT_CURR_LIM[ROWS];
    uint8_t SMPC_INPUT_AC_INPUT_VOLTAGE[ROWS];
    uint8_t SMPC_INPUT_J1772_CONNECTED[ROWS/8];
    uint8_t SMPC_INPUT_J1772_DISCONNECTED[ROWS/8];
    uint8_t SMPC_INPUT_J1772_TRIGGERED[ROWS/8];
    uint16_t SMPC_INPUT_AC_INPUT_CURRENT_MA[ROWS];
    uint8_t SMPC_INPUT_AC_INPUT_FREQUENCY_HZ[ROWS];
    uint8_t SMPC_INPUT_MAX_CHARGER_TEMP_C[ROWS];
    uint16_t SMPC_SER_PART_NUMBER[ROWS];
    uint32_t SMPC_SER_SERIAL_NUMBER[ROWS];
    uint16_t SMPC_SER_FIRMWARE_VER[ROWS];

public:
    void setRow(ValuesRow row, int idx) {
        this->SME_THROTL_TorqueDemand[idx] = row.SME_THROTL_TorqueDemand;
        this->SME_THROTL_MaxSpeed[idx] = row.SME_THROTL_MaxSpeed;
        this->SME_THROTL_Forward[idx/8] |= row.SME_THROTL_Forward << idx;
        this->SME_THROTL_Reverse[idx/8] |= row.SME_THROTL_Reverse << idx;
        this->SME_THROTL_UNUSED_BIT_1[idx/8] |= row.SME_THROTL_UNUSED_BIT_1 << idx;
        this->SME_THROTL_PowerReady[idx/8] |= row.SME_THROTL_PowerReady << idx;
        this->SME_THROTL_UNUSED_BIT_2[idx/8] |= row.SME_THROTL_UNUSED_BIT_2 << idx;
        this->SME_THROTL_UNUSED_BIT_3[idx/8] |= row.SME_THROTL_UNUSED_BIT_3 << idx;
        this->SME_THROTL_UNUSED_BIT_4[idx/8] |= row.SME_THROTL_UNUSED_BIT_4 << idx;
        this->SME_THROTL_UNUSED_BIT_5[idx/8] |= row.SME_THROTL_UNUSED_BIT_5 << idx;
        this->SME_THROTL_MBB_Alive[idx] = row.SME_THROTL_MBB_Alive;
        this->SME_THROTL_UNUSED_BIT_6[idx/8] |= row.SME_THROTL_UNUSED_BIT_6 << idx;
        this->SME_THROTL_UNUSED_BIT_7[idx/8] |= row.SME_THROTL_UNUSED_BIT_7 << idx;
        this->SME_THROTL_UNUSED_BIT_8[idx/8] |= row.SME_THROTL_UNUSED_BIT_8 << idx;
        this->SME_THROTL_UNUSED_BIT_9[idx/8] |= row.SME_THROTL_UNUSED_BIT_9 << idx;
        this->SME_THROTL_UNUSED_SHORT_1[idx] = row.SME_THROTL_UNUSED_SHORT_1;
        this->SME_CURRLIM_ChargeCurrentLim[idx] = row.SME_CURRLIM_ChargeCurrentLim;
        this->SME_CURRLIM_DischargeCurrentLim[idx] = row.SME_CURRLIM_DischargeCurrentLim;
        this->SME_CURRLIM_UNUSED_INT_1[idx] = row.SME_CURRLIM_UNUSED_INT_1;
        this->SME_TRQSPD_Speed[idx] = row.SME_TRQSPD_Speed;
        this->SME_TRQSPD_Torque[idx] = row.SME_TRQSPD_Torque;
        this->SME_TRQSPD_SOC_Low_Traction[idx/8] |= row.SME_TRQSPD_SOC_Low_Traction << idx;
        this->SME_TRQSPD_SOC_Low_Hydraulic[idx/8] |= row.SME_TRQSPD_SOC_Low_Hydraulic << idx;
        this->SME_TRQSPD_Reverse[idx/8] |= row.SME_TRQSPD_Reverse << idx;
        this->SME_TRQSPD_Forward[idx/8] |= row.SME_TRQSPD_Forward << idx;
        this->SME_TRQSPD_Park_Brake[idx/8] |= row.SME_TRQSPD_Park_Brake << idx;
        this->SME_TRQSPD_Pedal_Brake[idx/8] |= row.SME_TRQSPD_Pedal_Brake << idx;
        this->SME_TRQSPD_Controller_Overtermp[idx/8] |= row.SME_TRQSPD_Controller_Overtermp << idx;
        this->SME_TRQSPD_Key_switch_overvolt[idx/8] |= row.SME_TRQSPD_Key_switch_overvolt << idx;
        this->SME_TRQSPD_Key_switch_undervolt[idx/8] |= row.SME_TRQSPD_Key_switch_undervolt << idx;
        this->SME_TRQSPD_Running[idx/8] |= row.SME_TRQSPD_Running << idx;
        this->SME_TRQSPD_Traction[idx/8] |= row.SME_TRQSPD_Traction << idx;
        this->SME_TRQSPD_Hydraulic[idx/8] |= row.SME_TRQSPD_Hydraulic << idx;
        this->SME_TRQSPD_Powering_Enabled[idx/8] |= row.SME_TRQSPD_Powering_Enabled << idx;
        this->SME_TRQSPD_Powering_Ready[idx/8] |= row.SME_TRQSPD_Powering_Ready << idx;
        this->SME_TRQSPD_Precharging[idx/8] |= row.SME_TRQSPD_Precharging << idx;
        this->SME_TRQSPD_contactor_closed[idx/8] |= row.SME_TRQSPD_contactor_closed << idx;
        this->SME_TRQSPD_MotorFlags[idx] = row.SME_TRQSPD_MotorFlags;
        this->SME_TEMP_MotorTemperature[idx] = row.SME_TEMP_MotorTemperature;
        this->SME_TEMP_ControllerTemperature[idx] = row.SME_TEMP_ControllerTemperature;
        this->SME_TEMP_DC_Bus_V[idx] = row.SME_TEMP_DC_Bus_V;
        this->SME_TEMP_FaultCode[idx] = row.SME_TEMP_FaultCode;
        this->SME_TEMP_FaultLevel[idx] = row.SME_TEMP_FaultLevel;
        this->SME_TEMP_BusCurrent[idx] = row.SME_TEMP_BusCurrent;
        this->ACC_STATUS_BMS_FAULT[idx/8] |= row.ACC_STATUS_BMS_FAULT << idx;
        this->ACC_STATUS_IMD_FAULT[idx/8] |= row.ACC_STATUS_IMD_FAULT << idx;
        this->ACC_STATUS_SHUTDOWN_STATE[idx/8] |= row.ACC_STATUS_SHUTDOWN_STATE << idx;
        this->ACC_STATUS_PRECHARGE_DONE[idx/8] |= row.ACC_STATUS_PRECHARGE_DONE << idx;
        this->ACC_STATUS_PRECHARGING[idx/8] |= row.ACC_STATUS_PRECHARGING << idx;
        this->ACC_STATUS_CHARGING[idx/8] |= row.ACC_STATUS_CHARGING << idx;
        this->ACC_STATUS_CELL_TOO_LOW[idx/8] |= row.ACC_STATUS_CELL_TOO_LOW << idx;
        this->ACC_STATUS_CELL_TOO_HIGH[idx/8] |= row.ACC_STATUS_CELL_TOO_HIGH << idx;
        this->ACC_STATUS_TEMP_TOO_LOW[idx/8] |= row.ACC_STATUS_TEMP_TOO_LOW << idx;
        this->ACC_STATUS_TEMP_TOO_HIGH[idx/8] |= row.ACC_STATUS_TEMP_TOO_HIGH << idx;
        this->ACC_STATUS_TEMP_TOO_HIGH_CRG[idx/8] |= row.ACC_STATUS_TEMP_TOO_HIGH_CRG << idx;
        this->ACC_STATUS_BALANCING[idx/8] |= row.ACC_STATUS_BALANCING << idx;
        this->ACC_STATUS_GLV_VOLTAGE[idx] = row.ACC_STATUS_GLV_VOLTAGE;
        this->ACC_STATUS_CELL_FAULT_INDEX[idx] = row.ACC_STATUS_CELL_FAULT_INDEX;
        this->ACC_POWER_PACK_VOLTAGE[idx] = row.ACC_POWER_PACK_VOLTAGE;
        this->ACC_POWER_SOC[idx] = row.ACC_POWER_SOC;
        this->ACC_POWER_CURRENT[idx] = row.ACC_POWER_CURRENT;
        this->ACC_SEG0_VOLTS_CELL0[idx] = row.ACC_SEG0_VOLTS_CELL0;
        this->ACC_SEG0_VOLTS_CELL1[idx] = row.ACC_SEG0_VOLTS_CELL1;
        this->ACC_SEG0_VOLTS_CELL2[idx] = row.ACC_SEG0_VOLTS_CELL2;
        this->ACC_SEG0_VOLTS_CELL3[idx] = row.ACC_SEG0_VOLTS_CELL3;
        this->ACC_SEG0_VOLTS_CELL4[idx] = row.ACC_SEG0_VOLTS_CELL4;
        this->ACC_SEG0_VOLTS_CELL5[idx] = row.ACC_SEG0_VOLTS_CELL5;
        this->ACC_SEG0_TEMPS_CELL0[idx] = row.ACC_SEG0_TEMPS_CELL0;
        this->ACC_SEG0_TEMPS_CELL1[idx] = row.ACC_SEG0_TEMPS_CELL1;
        this->ACC_SEG0_TEMPS_CELL2[idx] = row.ACC_SEG0_TEMPS_CELL2;
        this->ACC_SEG0_TEMPS_CELL3[idx] = row.ACC_SEG0_TEMPS_CELL3;
        this->ACC_SEG0_TEMPS_CELL4[idx] = row.ACC_SEG0_TEMPS_CELL4;
        this->ACC_SEG0_TEMPS_CELL5[idx] = row.ACC_SEG0_TEMPS_CELL5;
        this->ACC_SEG1_VOLTS_CELL0[idx] = row.ACC_SEG1_VOLTS_CELL0;
        this->ACC_SEG1_VOLTS_CELL1[idx] = row.ACC_SEG1_VOLTS_CELL1;
        this->ACC_SEG1_VOLTS_CELL2[idx] = row.ACC_SEG1_VOLTS_CELL2;
        this->ACC_SEG1_VOLTS_CELL3[idx] = row.ACC_SEG1_VOLTS_CELL3;
        this->ACC_SEG1_VOLTS_CELL4[idx] = row.ACC_SEG1_VOLTS_CELL4;
        this->ACC_SEG1_VOLTS_CELL5[idx] = row.ACC_SEG1_VOLTS_CELL5;
        this->ACC_SEG1_TEMPS_CELL0[idx] = row.ACC_SEG1_TEMPS_CELL0;
        this->ACC_SEG1_TEMPS_CELL1[idx] = row.ACC_SEG1_TEMPS_CELL1;
        this->ACC_SEG1_TEMPS_CELL2[idx] = row.ACC_SEG1_TEMPS_CELL2;
        this->ACC_SEG1_TEMPS_CELL3[idx] = row.ACC_SEG1_TEMPS_CELL3;
        this->ACC_SEG1_TEMPS_CELL4[idx] = row.ACC_SEG1_TEMPS_CELL4;
        this->ACC_SEG1_TEMPS_CELL5[idx] = row.ACC_SEG1_TEMPS_CELL5;
        this->ACC_SEG2_VOLTS_CELL0[idx] = row.ACC_SEG2_VOLTS_CELL0;
        this->ACC_SEG2_VOLTS_CELL1[idx] = row.ACC_SEG2_VOLTS_CELL1;
        this->ACC_SEG2_VOLTS_CELL2[idx] = row.ACC_SEG2_VOLTS_CELL2;
        this->ACC_SEG2_VOLTS_CELL3[idx] = row.ACC_SEG2_VOLTS_CELL3;
        this->ACC_SEG2_VOLTS_CELL4[idx] = row.ACC_SEG2_VOLTS_CELL4;
        this->ACC_SEG2_VOLTS_CELL5[idx] = row.ACC_SEG2_VOLTS_CELL5;
        this->ACC_SEG2_TEMPS_CELL0[idx] = row.ACC_SEG2_TEMPS_CELL0;
        this->ACC_SEG2_TEMPS_CELL1[idx] = row.ACC_SEG2_TEMPS_CELL1;
        this->ACC_SEG2_TEMPS_CELL2[idx] = row.ACC_SEG2_TEMPS_CELL2;
        this->ACC_SEG2_TEMPS_CELL3[idx] = row.ACC_SEG2_TEMPS_CELL3;
        this->ACC_SEG2_TEMPS_CELL4[idx] = row.ACC_SEG2_TEMPS_CELL4;
        this->ACC_SEG2_TEMPS_CELL5[idx] = row.ACC_SEG2_TEMPS_CELL5;
        this->ACC_SEG3_VOLTS_CELL0[idx] = row.ACC_SEG3_VOLTS_CELL0;
        this->ACC_SEG3_VOLTS_CELL1[idx] = row.ACC_SEG3_VOLTS_CELL1;
        this->ACC_SEG3_VOLTS_CELL2[idx] = row.ACC_SEG3_VOLTS_CELL2;
        this->ACC_SEG3_VOLTS_CELL3[idx] = row.ACC_SEG3_VOLTS_CELL3;
        this->ACC_SEG3_VOLTS_CELL4[idx] = row.ACC_SEG3_VOLTS_CELL4;
        this->ACC_SEG3_VOLTS_CELL5[idx] = row.ACC_SEG3_VOLTS_CELL5;
        this->ACC_SEG3_TEMPS_CELL0[idx] = row.ACC_SEG3_TEMPS_CELL0;
        this->ACC_SEG3_TEMPS_CELL1[idx] = row.ACC_SEG3_TEMPS_CELL1;
        this->ACC_SEG3_TEMPS_CELL2[idx] = row.ACC_SEG3_TEMPS_CELL2;
        this->ACC_SEG3_TEMPS_CELL3[idx] = row.ACC_SEG3_TEMPS_CELL3;
        this->ACC_SEG3_TEMPS_CELL4[idx] = row.ACC_SEG3_TEMPS_CELL4;
        this->ACC_SEG3_TEMPS_CELL5[idx] = row.ACC_SEG3_TEMPS_CELL5;
        this->ACC_SEG4_VOLTS_CELL0[idx] = row.ACC_SEG4_VOLTS_CELL0;
        this->ACC_SEG4_VOLTS_CELL1[idx] = row.ACC_SEG4_VOLTS_CELL1;
        this->ACC_SEG4_VOLTS_CELL2[idx] = row.ACC_SEG4_VOLTS_CELL2;
        this->ACC_SEG4_VOLTS_CELL3[idx] = row.ACC_SEG4_VOLTS_CELL3;
        this->ACC_SEG4_VOLTS_CELL4[idx] = row.ACC_SEG4_VOLTS_CELL4;
        this->ACC_SEG4_VOLTS_CELL5[idx] = row.ACC_SEG4_VOLTS_CELL5;
        this->ACC_SEG4_TEMPS_CELL0[idx] = row.ACC_SEG4_TEMPS_CELL0;
        this->ACC_SEG4_TEMPS_CELL1[idx] = row.ACC_SEG4_TEMPS_CELL1;
        this->ACC_SEG4_TEMPS_CELL2[idx] = row.ACC_SEG4_TEMPS_CELL2;
        this->ACC_SEG4_TEMPS_CELL3[idx] = row.ACC_SEG4_TEMPS_CELL3;
        this->ACC_SEG4_TEMPS_CELL4[idx] = row.ACC_SEG4_TEMPS_CELL4;
        this->ACC_SEG4_TEMPS_CELL5[idx] = row.ACC_SEG4_TEMPS_CELL5;
        this->VDM_GPS_Latitude[idx] = row.VDM_GPS_Latitude;
        this->VDM_GPS_Longitude[idx] = row.VDM_GPS_Longitude;
        this->VDM_GPS_SPEED[idx] = row.VDM_GPS_SPEED;
        this->VDM_GPS_ALTITUDE[idx] = row.VDM_GPS_ALTITUDE;
        this->VDM_GPS_TRUE_COURSE[idx] = row.VDM_GPS_TRUE_COURSE;
        this->VDM_GPS_SATELLITES_IN_USE[idx] = row.VDM_GPS_SATELLITES_IN_USE;
        this->VDM_GPS_VALID1[idx] = row.VDM_GPS_VALID1;
        this->VDM_GPS_VALID2[idx] = row.VDM_GPS_VALID2;
        this->VDM_UTC_DATE_YEAR[idx] = row.VDM_UTC_DATE_YEAR;
        this->VDM_UTC_DATE_MONTH[idx] = row.VDM_UTC_DATE_MONTH;
        this->VDM_UTC_DATE_DAY[idx] = row.VDM_UTC_DATE_DAY;
        this->VDM_UTC_TIME_HOURS[idx] = row.VDM_UTC_TIME_HOURS;
        this->VDM_UTC_TIME_MINUTES[idx] = row.VDM_UTC_TIME_MINUTES;
        this->VDM_UTC_TIME_SECONDS[idx] = row.VDM_UTC_TIME_SECONDS;
        this->VDM_X_AXIS_ACCELERATION[idx] = row.VDM_X_AXIS_ACCELERATION;
        this->VDM_Y_AXIS_ACCELERATION[idx] = row.VDM_Y_AXIS_ACCELERATION;
        this->VDM_Z_AXIS_ACCELERATION[idx] = row.VDM_Z_AXIS_ACCELERATION;
        this->VDM_X_AXIS_YAW_RATE[idx] = row.VDM_X_AXIS_YAW_RATE;
        this->VDM_Y_AXIS_YAW_RATE[idx] = row.VDM_Y_AXIS_YAW_RATE;
        this->VDM_Z_AXIS_YAW_RATE[idx] = row.VDM_Z_AXIS_YAW_RATE;
        this->ETC_STATUS_HE1[idx] = row.ETC_STATUS_HE1;
        this->ETC_STATUS_HE2[idx] = row.ETC_STATUS_HE2;
        this->ETC_STATUS_BRAKE_SENSE_VOLTAGE[idx] = row.ETC_STATUS_BRAKE_SENSE_VOLTAGE;
        this->ETC_STATUS_PEDAL_TRAVEL[idx] = row.ETC_STATUS_PEDAL_TRAVEL;
        this->ETC_STATUS_RTD_BUTTON[idx/8] |= row.ETC_STATUS_RTD_BUTTON << idx;
        this->ETC_STATUS_RTDS[idx/8] |= row.ETC_STATUS_RTDS << idx;
        this->ETC_STATUS_REVERSE[idx/8] |= row.ETC_STATUS_REVERSE << idx;
        this->ETC_STATUS_BRAKELIGHT[idx/8] |= row.ETC_STATUS_BRAKELIGHT << idx;
        this->ETC_STATUS_RTD[idx/8] |= row.ETC_STATUS_RTD << idx;
        this->ETC_STATUS_IMPLAUSIBILITY[idx/8] |= row.ETC_STATUS_IMPLAUSIBILITY << idx;
        this->ETC_STATUS_TS_ACTIVE[idx/8] |= row.ETC_STATUS_TS_ACTIVE << idx;
        this->PDB_POWER_A_GLV_VOLTAGE[idx] = row.PDB_POWER_A_GLV_VOLTAGE;
        this->PDB_POWER_A_CURRENT_SHUTDOWN[idx] = row.PDB_POWER_A_CURRENT_SHUTDOWN;
        this->PDB_POWER_A_CURRENT_ACC[idx] = row.PDB_POWER_A_CURRENT_ACC;
        this->PDB_POWER_A_CURRENT_ETC[idx] = row.PDB_POWER_A_CURRENT_ETC;
        this->PDB_POWER_A_CURRENT_BPS[idx] = row.PDB_POWER_A_CURRENT_BPS;
        this->PDB_POWER_A_CURRENT_TRACTIVE[idx] = row.PDB_POWER_A_CURRENT_TRACTIVE;
        this->PDB_POWER_A_CURRENT_BSPD[idx] = row.PDB_POWER_A_CURRENT_BSPD;
        this->PDB_POWER_B_CURRENT_TELEMETRY[idx] = row.PDB_POWER_B_CURRENT_TELEMETRY;
        this->PDB_POWER_B_CURRENT_PDB[idx] = row.PDB_POWER_B_CURRENT_PDB;
        this->PDB_POWER_B_CURRENT_DASH[idx] = row.PDB_POWER_B_CURRENT_DASH;
        this->PDB_POWER_B_CURRENT_RTML[idx] = row.PDB_POWER_B_CURRENT_RTML;
        this->PDB_POWER_B_CURRENT_EXTRA_1[idx] = row.PDB_POWER_B_CURRENT_EXTRA_1;
        this->PDB_POWER_B_CURRENT_EXTRA_2[idx] = row.PDB_POWER_B_CURRENT_EXTRA_2;
        this->TMAIN_DATA_BRAKES_F[idx] = row.TMAIN_DATA_BRAKES_F;
        this->TMAIN_DATA_BRAKES_R[idx] = row.TMAIN_DATA_BRAKES_R;
        this->TPERIPH_FL_DATA_WHEELSPEED[idx] = row.TPERIPH_FL_DATA_WHEELSPEED;
        this->TPERIPH_FL_DATA_SUSTRAVEL[idx] = row.TPERIPH_FL_DATA_SUSTRAVEL;
        this->TPERIPH_FL_DATA_STRAIN[idx] = row.TPERIPH_FL_DATA_STRAIN;
        this->TPERIPH_FL_DATA_SIDE_TIRE_TEMP[idx] = row.TPERIPH_FL_DATA_SIDE_TIRE_TEMP;
        this->TPERIPH_FR_DATA_WHEELSPEED[idx] = row.TPERIPH_FR_DATA_WHEELSPEED;
        this->TPERIPH_FR_DATA_SUSTRAVEL[idx] = row.TPERIPH_FR_DATA_SUSTRAVEL;
        this->TPERIPH_FR_DATA_STRAIN[idx] = row.TPERIPH_FR_DATA_STRAIN;
        this->TPERIPH_FR_DATA_SIDE_TIRE_TEMP[idx] = row.TPERIPH_FR_DATA_SIDE_TIRE_TEMP;
        this->TPERIPH_BL_DATA_WHEELSPEED[idx] = row.TPERIPH_BL_DATA_WHEELSPEED;
        this->TPERIPH_BL_DATA_SUSTRAVEL[idx] = row.TPERIPH_BL_DATA_SUSTRAVEL;
        this->TPERIPH_BL_DATA_STRAIN[idx] = row.TPERIPH_BL_DATA_STRAIN;
        this->TPERIPH_BL_DATA_SIDE_TIRE_TEMP[idx] = row.TPERIPH_BL_DATA_SIDE_TIRE_TEMP;
        this->TPERIPH_BR_DATA_WHEELSPEED[idx] = row.TPERIPH_BR_DATA_WHEELSPEED;
        this->TPERIPH_BR_DATA_SUSTRAVEL[idx] = row.TPERIPH_BR_DATA_SUSTRAVEL;
        this->TPERIPH_BR_DATA_STRAIN[idx] = row.TPERIPH_BR_DATA_STRAIN;
        this->TPERIPH_BR_DATA_SIDE_TIRE_TEMP[idx] = row.TPERIPH_BR_DATA_SIDE_TIRE_TEMP;
        this->TPERIPH_FL_TIRETEMP_1[idx] = row.TPERIPH_FL_TIRETEMP_1;
        this->TPERIPH_FL_TIRETEMP_2[idx] = row.TPERIPH_FL_TIRETEMP_2;
        this->TPERIPH_FL_TIRETEMP_3[idx] = row.TPERIPH_FL_TIRETEMP_3;
        this->TPERIPH_FL_TIRETEMP_4[idx] = row.TPERIPH_FL_TIRETEMP_4;
        this->TPERIPH_FL_TIRETEMP_5[idx] = row.TPERIPH_FL_TIRETEMP_5;
        this->TPERIPH_FL_TIRETEMP_6[idx] = row.TPERIPH_FL_TIRETEMP_6;
        this->TPERIPH_FL_TIRETEMP_7[idx] = row.TPERIPH_FL_TIRETEMP_7;
        this->TPERIPH_FL_TIRETEMP_8[idx] = row.TPERIPH_FL_TIRETEMP_8;
        this->TPERIPH_FR_TIRETEMP_1[idx] = row.TPERIPH_FR_TIRETEMP_1;
        this->TPERIPH_FR_TIRETEMP_2[idx] = row.TPERIPH_FR_TIRETEMP_2;
        this->TPERIPH_FR_TIRETEMP_3[idx] = row.TPERIPH_FR_TIRETEMP_3;
        this->TPERIPH_FR_TIRETEMP_4[idx] = row.TPERIPH_FR_TIRETEMP_4;
        this->TPERIPH_FR_TIRETEMP_5[idx] = row.TPERIPH_FR_TIRETEMP_5;
        this->TPERIPH_FR_TIRETEMP_6[idx] = row.TPERIPH_FR_TIRETEMP_6;
        this->TPERIPH_FR_TIRETEMP_7[idx] = row.TPERIPH_FR_TIRETEMP_7;
        this->TPERIPH_FR_TIRETEMP_8[idx] = row.TPERIPH_FR_TIRETEMP_8;
        this->TPERIPH_BL_TIRETEMP_1[idx] = row.TPERIPH_BL_TIRETEMP_1;
        this->TPERIPH_BL_TIRETEMP_2[idx] = row.TPERIPH_BL_TIRETEMP_2;
        this->TPERIPH_BL_TIRETEMP_3[idx] = row.TPERIPH_BL_TIRETEMP_3;
        this->TPERIPH_BL_TIRETEMP_4[idx] = row.TPERIPH_BL_TIRETEMP_4;
        this->TPERIPH_BL_TIRETEMP_5[idx] = row.TPERIPH_BL_TIRETEMP_5;
        this->TPERIPH_BL_TIRETEMP_6[idx] = row.TPERIPH_BL_TIRETEMP_6;
        this->TPERIPH_BL_TIRETEMP_7[idx] = row.TPERIPH_BL_TIRETEMP_7;
        this->TPERIPH_BL_TIRETEMP_8[idx] = row.TPERIPH_BL_TIRETEMP_8;
        this->TPERIPH_BR_TIRETEMP_1[idx] = row.TPERIPH_BR_TIRETEMP_1;
        this->TPERIPH_BR_TIRETEMP_2[idx] = row.TPERIPH_BR_TIRETEMP_2;
        this->TPERIPH_BR_TIRETEMP_3[idx] = row.TPERIPH_BR_TIRETEMP_3;
        this->TPERIPH_BR_TIRETEMP_4[idx] = row.TPERIPH_BR_TIRETEMP_4;
        this->TPERIPH_BR_TIRETEMP_5[idx] = row.TPERIPH_BR_TIRETEMP_5;
        this->TPERIPH_BR_TIRETEMP_6[idx] = row.TPERIPH_BR_TIRETEMP_6;
        this->TPERIPH_BR_TIRETEMP_7[idx] = row.TPERIPH_BR_TIRETEMP_7;
        this->TPERIPH_BR_TIRETEMP_8[idx] = row.TPERIPH_BR_TIRETEMP_8;
        this->COMMAND_COMMAND_SPECIFIER[idx] = row.COMMAND_COMMAND_SPECIFIER;
        this->COMMAND_MODE[idx] = row.COMMAND_MODE;
        this->RESPONSE_COMMAND_SPECIFIER[idx] = row.RESPONSE_COMMAND_SPECIFIER;
        this->SMPC_CONTROL_DEST_NODE_ID[idx] = row.SMPC_CONTROL_DEST_NODE_ID;
        this->SMPC_CONTROL_ENABLE[idx/8] |= row.SMPC_CONTROL_ENABLE << idx;
        this->SMPC_CONTROL_CURRENT_10X_MULT[idx/8] |= row.SMPC_CONTROL_CURRENT_10X_MULT << idx;
        this->SMPC_CONTROL_EVSE_OVERRIDE[idx/8] |= row.SMPC_CONTROL_EVSE_OVERRIDE << idx;
        this->SMPC_CONTROL_PACK_VOLTAGE[idx] = row.SMPC_CONTROL_PACK_VOLTAGE;
        this->SMPC_MAX_DEST_NODE_ID[idx] = row.SMPC_MAX_DEST_NODE_ID;
        this->SMPC_MAX_CHRG_VOLTAGE[idx] = row.SMPC_MAX_CHRG_VOLTAGE;
        this->SMPC_MAX_CHRG_CURRENT[idx] = row.SMPC_MAX_CHRG_CURRENT;
        this->SMPC_MAX_INPUT_EVSE_OVERRIDE[idx] = row.SMPC_MAX_INPUT_EVSE_OVERRIDE;
        this->SMPC_STATUS_READY[idx/8] |= row.SMPC_STATUS_READY << idx;
        this->SMPC_STATUS_CHARGE_COMPLETE[idx/8] |= row.SMPC_STATUS_CHARGE_COMPLETE << idx;
        this->SMPC_STATUS_OVERTEMP_FAULT[idx/8] |= row.SMPC_STATUS_OVERTEMP_FAULT << idx;
        this->SMPC_STATUS_OVERCURRENT_FAULT[idx/8] |= row.SMPC_STATUS_OVERCURRENT_FAULT << idx;
        this->SMPC_STATUS_OVERVOLTAGE_FAULT[idx/8] |= row.SMPC_STATUS_OVERVOLTAGE_FAULT << idx;
        this->SMPC_STATUS_UNDERVOLTAGE_FAULT[idx/8] |= row.SMPC_STATUS_UNDERVOLTAGE_FAULT << idx;
        this->SMPC_STATUS_INTERNAL_FAULT[idx/8] |= row.SMPC_STATUS_INTERNAL_FAULT << idx;
        this->SMPC_STATUS_CHARGING[idx/8] |= row.SMPC_STATUS_CHARGING << idx;
        this->SMPC_STATUS_CHARGER_UNPLUGGED[idx/8] |= row.SMPC_STATUS_CHARGER_UNPLUGGED << idx;
        this->SMPC_STATUS_REQUEST_EXCLUSIVE[idx/8] |= row.SMPC_STATUS_REQUEST_EXCLUSIVE << idx;
        this->SMPC_STATUS_J1772_DISCONN[idx/8] |= row.SMPC_STATUS_J1772_DISCONN << idx;
        this->SMPC_STATUS_VOLTAGE_MV[idx] = row.SMPC_STATUS_VOLTAGE_MV;
        this->SMPC_STATUS_CURRENT_MA[idx] = row.SMPC_STATUS_CURRENT_MA;
        this->SMPC_MAX2_MAX_VOLTAGE_MV[idx] = row.SMPC_MAX2_MAX_VOLTAGE_MV;
        this->SMPC_MAX2_MAX_CURRENT_MA[idx] = row.SMPC_MAX2_MAX_CURRENT_MA;
        this->SMPC_MAX2_EVSE_CURRENT[idx] = row.SMPC_MAX2_EVSE_CURRENT;
        this->SMPC_MAX2_INPUT_CURR_LIM[idx] = row.SMPC_MAX2_INPUT_CURR_LIM;
        this->SMPC_INPUT_AC_INPUT_VOLTAGE[idx] = row.SMPC_INPUT_AC_INPUT_VOLTAGE;
        this->SMPC_INPUT_J1772_CONNECTED[idx/8] |= row.SMPC_INPUT_J1772_CONNECTED << idx;
        this->SMPC_INPUT_J1772_DISCONNECTED[idx/8] |= row.SMPC_INPUT_J1772_DISCONNECTED << idx;
        this->SMPC_INPUT_J1772_TRIGGERED[idx/8] |= row.SMPC_INPUT_J1772_TRIGGERED << idx;
        this->SMPC_INPUT_AC_INPUT_CURRENT_MA[idx] = row.SMPC_INPUT_AC_INPUT_CURRENT_MA;
        this->SMPC_INPUT_AC_INPUT_FREQUENCY_HZ[idx] = row.SMPC_INPUT_AC_INPUT_FREQUENCY_HZ;
        this->SMPC_INPUT_MAX_CHARGER_TEMP_C[idx] = row.SMPC_INPUT_MAX_CHARGER_TEMP_C;
        this->SMPC_SER_PART_NUMBER[idx] = row.SMPC_SER_PART_NUMBER;
        this->SMPC_SER_SERIAL_NUMBER[idx] = row.SMPC_SER_SERIAL_NUMBER;
        this->SMPC_SER_FIRMWARE_VER[idx] = row.SMPC_SER_FIRMWARE_VER;
    }
};
#pragma pack()

inline void write_fsdaq_schema(FILE *file) {
    uint32_t m = COLS;
    uint32_t n = ROWS;
    fwrite(&m, sizeof(m), 1, file);
    fwrite(&n, sizeof(n), 1, file);

    for (int i=0; i<COLS; i++) {
        const uint8_t col_len = col_name_sizes[i];
        const char *col = col_names[i];

        fwrite(&col_len, sizeof(col_len), 1, file);
        fwrite(col, col_len, 1, file);
    }

    for (int i=0; i<COLS; i++) {
        const char *col_type = col_name_types[i];
        fwrite(col_type, 2, 1, file);
    }
}

inline void write_fsdaq_batch(Values *vals, FILE *file) {
    fwrite(vals, sizeof(*vals), 1, file);
}

