#pragma once

#include "mbed.h"

namespace fsdaq {


static const int COLS = @COLS@;
static const int ROWS_PER_BATCH = @ROWS_PER_BATCH@;

static const char *col_names[] = { "Time_ms", @COL_NAMES@ };
static const uint8_t col_name_sizes[] = { 7, @COL_NAME_SIZES@ };
static const char *col_name_types[] = { "u5", @COL_NAME_TYPES@ };

struct DataRow {
    uint32_t Time_ms;

@DATA_ROW_STRUCT_FIELDS@
};

#pragma pack(1)
class DataBatch {
    uint32_t Time_ms[ROWS_PER_BATCH];

@DATA_BATCH_STRUCT_FIELDS@

public:
    void set_row(DataRow row, int idx, uint32_t current_time_ms) {
        this->Time_ms[idx] = current_time_ms;

@UPDATE_FIELDS_FROM_ROW@
    }
};
#pragma pack()

inline void write_fsdaq_schema(FILE *file) {
    uint32_t m = COLS;
    uint32_t n = ROWS_PER_BATCH;
    fwrite(&m, sizeof(m), 1, file);
    fwrite(&n, sizeof(n), 1, file);

    for (int i=0; i<COLS; i++) {
        const uint8_t col_len = col_name_sizes[i];
        const char *col = col_names[i];

        fwrite(&col_len, sizeof(col_len), 1, file);
        fwrite(col, col_len, 1, file);
    }

    for (int i=0; i<COLS; i++) {
        const char *col_type = col_name_types[i];
        fwrite(col_type, 2, 1, file);
    }
}

inline size_t bufwrite_fsdaq_schema(uint8_t *dest) {
    size_t offset = 0;
    uint32_t m = COLS;
    uint32_t n = ROWS_PER_BATCH;
    memcpy(dest, &m, sizeof(m));
    offset += sizeof(m);
    memcpy(dest + offset, &n, sizeof(n));
    offset += sizeof(n);

    for (int i=0; i<COLS; i++) {
        const uint8_t col_len = col_name_sizes[i];
        const char *col = col_names[i];

        memcpy(dest + offset, &col_len, sizeof(col_len));
        offset += sizeof(col_len);
        memcpy(dest + offset, &col, col_len);
        offset += col_len;
    }

    for (int i=0; i<COLS; i++) {
        const char *col_type = col_name_types[i];
        memcpy(dest, &col_type, 2);
        offset += 2;
    }

    return offset;
}

inline void write_fsdaq_batch(DataBatch *batch, FILE *file) {
    fwrite(batch, sizeof(*batch), 1, file);
}

inline size_t bufwrite_fsdaq_batch(DataBatch *batch, uint8_t *dest) {
    memcpy(dest, &batch, sizeof(*batch));
    return sizeof(*batch);
}

inline void write_fsdaq_header(FILE *file) {
    fwrite("FSDAQ001", 8, 1, file);
}

inline size_t bufwrite_fsdaq_header(uint8_t *dest) {
    static const char magic[] = "FSDAQ001";
    memcpy(dest, magic, 8);
    return 8;
}

    
} // namespace fsdaq
