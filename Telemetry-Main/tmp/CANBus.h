/**
 * @file CANBus.h
 *
 * @brief This header file was generated by cantools version 40.2.3 Fri Aug  1 16:57:02 2025.
 *
 * @copyright Copyright (c) 2018-2019 Erik Moqvist
 *
 * @par License
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef CANBUS_H
#define CANBUS_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define CANBUS_SYNC_FRAME_ID (0x80u)
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_FRAME_ID (0x186u)
#define CANBUS_SME_RPDO_MAX_CURRENTS_FRAME_ID (0x286u)
#define CANBUS_SME_TPDO_TORQUE_SPEED_FRAME_ID (0x482u)
#define CANBUS_SME_TPDO_TEMPERATURE_FRAME_ID (0x682u)
#define CANBUS_ACC_TPDO_STATUS_FRAME_ID (0x188u)
#define CANBUS_ACC_TPDO_POWER_FRAME_ID (0x288u)
#define CANBUS_ACC_TPDO_SEG0_VOLTS_FRAME_ID (0x191u)
#define CANBUS_ACC_TPDO_SEG0_TEMPS_FRAME_ID (0x291u)
#define CANBUS_ACC_TPDO_SEG1_VOLTS_FRAME_ID (0x192u)
#define CANBUS_ACC_TPDO_SEG1_TEMPS_FRAME_ID (0x292u)
#define CANBUS_ACC_TPDO_SEG2_VOLTS_FRAME_ID (0x193u)
#define CANBUS_ACC_TPDO_SEG2_TEMPS_FRAME_ID (0x293u)
#define CANBUS_ACC_TPDO_SEG3_VOLTS_FRAME_ID (0x194u)
#define CANBUS_ACC_TPDO_SEG3_TEMPS_FRAME_ID (0x294u)
#define CANBUS_ACC_TPDO_SEG4_VOLTS_FRAME_ID (0x195u)
#define CANBUS_ACC_TPDO_SEG4_TEMPS_FRAME_ID (0x295u)
#define CANBUS_VDM_GPS_LAT_LONG_FRAME_ID (0xa0000u)
#define CANBUS_VDM_GPS_DATA_FRAME_ID (0xa0001u)
#define CANBUS_VDM_DATE_TIME_FRAME_ID (0xa0002u)
#define CANBUS_VDM_ACCELERATION_FRAME_ID (0xa0003u)
#define CANBUS_VDM_YAW_RATE_FRAME_ID (0xa0004u)
#define CANBUS_ETC_TPDO_STATUS_FRAME_ID (0x189u)
#define CANBUS_PDB_TPDO_POWER_A_FRAME_ID (0x19au)
#define CANBUS_PDB_TPDO_POWER_B_FRAME_ID (0x29au)
#define CANBUS_TMAIN_TPDO_DATA_FRAME_ID (0x1a0u)
#define CANBUS_TPERIPH_FL_TPDO_DATA_FRAME_ID (0x1a2u)
#define CANBUS_TPERIPH_FR_TPDO_DATA_FRAME_ID (0x1a3u)
#define CANBUS_TPERIPH_BL_TPDO_DATA_FRAME_ID (0x1a4u)
#define CANBUS_TPERIPH_BR_TPDO_DATA_FRAME_ID (0x1a5u)
#define CANBUS_TPERIPH_FL_TPDO_TIRETEMP_FRAME_ID (0x2a1u)
#define CANBUS_TPERIPH_FR_TPDO_TIRETEMP_FRAME_ID (0x2a2u)
#define CANBUS_TPERIPH_BL_TPDO_TIRETEMP_FRAME_ID (0x2a3u)
#define CANBUS_TPERIPH_BR_TPDO_TIRETEMP_FRAME_ID (0x2a4u)
#define CANBUS_LSS_COMMAND_FRAME_ID (0x7e5u)
#define CANBUS_LSS_RESPONSE_FRAME_ID (0x7e4u)
#define CANBUS_SMPC_RPDO_CONTROL_FRAME_ID (0x206u)
#define CANBUS_SMPC_RPDO_MAX_VOLTAGE_CURRENT_FRAME_ID (0x306u)
#define CANBUS_SMPC_TPDO_STATUS_FRAME_ID (0x190u)
#define CANBUS_SMPC_TPDO_MAX_VOLTAGE_CURRENT_FRAME_ID (0x290u)
#define CANBUS_SMPC_TPDO_INPUT_AC_FRAME_ID (0x390u)
#define CANBUS_SMPC_TPDO_SERIAL_PART_NUM_FRAME_ID (0x490u)

/* Frame lengths in bytes. */
#define CANBUS_SYNC_LENGTH (0u)
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_LENGTH (8u)
#define CANBUS_SME_RPDO_MAX_CURRENTS_LENGTH (8u)
#define CANBUS_SME_TPDO_TORQUE_SPEED_LENGTH (8u)
#define CANBUS_SME_TPDO_TEMPERATURE_LENGTH (8u)
#define CANBUS_ACC_TPDO_STATUS_LENGTH (8u)
#define CANBUS_ACC_TPDO_POWER_LENGTH (8u)
#define CANBUS_ACC_TPDO_SEG0_VOLTS_LENGTH (6u)
#define CANBUS_ACC_TPDO_SEG0_TEMPS_LENGTH (6u)
#define CANBUS_ACC_TPDO_SEG1_VOLTS_LENGTH (6u)
#define CANBUS_ACC_TPDO_SEG1_TEMPS_LENGTH (6u)
#define CANBUS_ACC_TPDO_SEG2_VOLTS_LENGTH (6u)
#define CANBUS_ACC_TPDO_SEG2_TEMPS_LENGTH (6u)
#define CANBUS_ACC_TPDO_SEG3_VOLTS_LENGTH (6u)
#define CANBUS_ACC_TPDO_SEG3_TEMPS_LENGTH (6u)
#define CANBUS_ACC_TPDO_SEG4_VOLTS_LENGTH (6u)
#define CANBUS_ACC_TPDO_SEG4_TEMPS_LENGTH (6u)
#define CANBUS_VDM_GPS_LAT_LONG_LENGTH (8u)
#define CANBUS_VDM_GPS_DATA_LENGTH (8u)
#define CANBUS_VDM_DATE_TIME_LENGTH (8u)
#define CANBUS_VDM_ACCELERATION_LENGTH (8u)
#define CANBUS_VDM_YAW_RATE_LENGTH (8u)
#define CANBUS_ETC_TPDO_STATUS_LENGTH (8u)
#define CANBUS_PDB_TPDO_POWER_A_LENGTH (8u)
#define CANBUS_PDB_TPDO_POWER_B_LENGTH (8u)
#define CANBUS_TMAIN_TPDO_DATA_LENGTH (8u)
#define CANBUS_TPERIPH_FL_TPDO_DATA_LENGTH (7u)
#define CANBUS_TPERIPH_FR_TPDO_DATA_LENGTH (7u)
#define CANBUS_TPERIPH_BL_TPDO_DATA_LENGTH (7u)
#define CANBUS_TPERIPH_BR_TPDO_DATA_LENGTH (7u)
#define CANBUS_TPERIPH_FL_TPDO_TIRETEMP_LENGTH (8u)
#define CANBUS_TPERIPH_FR_TPDO_TIRETEMP_LENGTH (8u)
#define CANBUS_TPERIPH_BL_TPDO_TIRETEMP_LENGTH (8u)
#define CANBUS_TPERIPH_BR_TPDO_TIRETEMP_LENGTH (8u)
#define CANBUS_LSS_COMMAND_LENGTH (8u)
#define CANBUS_LSS_RESPONSE_LENGTH (8u)
#define CANBUS_SMPC_RPDO_CONTROL_LENGTH (8u)
#define CANBUS_SMPC_RPDO_MAX_VOLTAGE_CURRENT_LENGTH (8u)
#define CANBUS_SMPC_TPDO_STATUS_LENGTH (8u)
#define CANBUS_SMPC_TPDO_MAX_VOLTAGE_CURRENT_LENGTH (8u)
#define CANBUS_SMPC_TPDO_INPUT_AC_LENGTH (8u)
#define CANBUS_SMPC_TPDO_SERIAL_PART_NUM_LENGTH (8u)

/* Extended or standard frame types. */
#define CANBUS_SYNC_IS_EXTENDED (0)
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_IS_EXTENDED (0)
#define CANBUS_SME_RPDO_MAX_CURRENTS_IS_EXTENDED (0)
#define CANBUS_SME_TPDO_TORQUE_SPEED_IS_EXTENDED (0)
#define CANBUS_SME_TPDO_TEMPERATURE_IS_EXTENDED (0)
#define CANBUS_ACC_TPDO_STATUS_IS_EXTENDED (0)
#define CANBUS_ACC_TPDO_POWER_IS_EXTENDED (0)
#define CANBUS_ACC_TPDO_SEG0_VOLTS_IS_EXTENDED (0)
#define CANBUS_ACC_TPDO_SEG0_TEMPS_IS_EXTENDED (0)
#define CANBUS_ACC_TPDO_SEG1_VOLTS_IS_EXTENDED (0)
#define CANBUS_ACC_TPDO_SEG1_TEMPS_IS_EXTENDED (0)
#define CANBUS_ACC_TPDO_SEG2_VOLTS_IS_EXTENDED (0)
#define CANBUS_ACC_TPDO_SEG2_TEMPS_IS_EXTENDED (0)
#define CANBUS_ACC_TPDO_SEG3_VOLTS_IS_EXTENDED (0)
#define CANBUS_ACC_TPDO_SEG3_TEMPS_IS_EXTENDED (0)
#define CANBUS_ACC_TPDO_SEG4_VOLTS_IS_EXTENDED (0)
#define CANBUS_ACC_TPDO_SEG4_TEMPS_IS_EXTENDED (0)
#define CANBUS_VDM_GPS_LAT_LONG_IS_EXTENDED (1)
#define CANBUS_VDM_GPS_DATA_IS_EXTENDED (1)
#define CANBUS_VDM_DATE_TIME_IS_EXTENDED (1)
#define CANBUS_VDM_ACCELERATION_IS_EXTENDED (1)
#define CANBUS_VDM_YAW_RATE_IS_EXTENDED (1)
#define CANBUS_ETC_TPDO_STATUS_IS_EXTENDED (0)
#define CANBUS_PDB_TPDO_POWER_A_IS_EXTENDED (0)
#define CANBUS_PDB_TPDO_POWER_B_IS_EXTENDED (0)
#define CANBUS_TMAIN_TPDO_DATA_IS_EXTENDED (0)
#define CANBUS_TPERIPH_FL_TPDO_DATA_IS_EXTENDED (0)
#define CANBUS_TPERIPH_FR_TPDO_DATA_IS_EXTENDED (0)
#define CANBUS_TPERIPH_BL_TPDO_DATA_IS_EXTENDED (0)
#define CANBUS_TPERIPH_BR_TPDO_DATA_IS_EXTENDED (0)
#define CANBUS_TPERIPH_FL_TPDO_TIRETEMP_IS_EXTENDED (0)
#define CANBUS_TPERIPH_FR_TPDO_TIRETEMP_IS_EXTENDED (0)
#define CANBUS_TPERIPH_BL_TPDO_TIRETEMP_IS_EXTENDED (0)
#define CANBUS_TPERIPH_BR_TPDO_TIRETEMP_IS_EXTENDED (0)
#define CANBUS_LSS_COMMAND_IS_EXTENDED (0)
#define CANBUS_LSS_RESPONSE_IS_EXTENDED (0)
#define CANBUS_SMPC_RPDO_CONTROL_IS_EXTENDED (0)
#define CANBUS_SMPC_RPDO_MAX_VOLTAGE_CURRENT_IS_EXTENDED (0)
#define CANBUS_SMPC_TPDO_STATUS_IS_EXTENDED (0)
#define CANBUS_SMPC_TPDO_MAX_VOLTAGE_CURRENT_IS_EXTENDED (0)
#define CANBUS_SMPC_TPDO_INPUT_AC_IS_EXTENDED (0)
#define CANBUS_SMPC_TPDO_SERIAL_PART_NUM_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define CANBUS_SYNC_NAME "SYNC"
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_NAME "SME_RPDO_Throttle_Demand"
#define CANBUS_SME_RPDO_MAX_CURRENTS_NAME "SME_RPDO_Max_Currents"
#define CANBUS_SME_TPDO_TORQUE_SPEED_NAME "SME_TPDO_Torque_speed"
#define CANBUS_SME_TPDO_TEMPERATURE_NAME "SME_TPDO_Temperature"
#define CANBUS_ACC_TPDO_STATUS_NAME "ACC_TPDO_STATUS"
#define CANBUS_ACC_TPDO_POWER_NAME "ACC_TPDO_POWER"
#define CANBUS_ACC_TPDO_SEG0_VOLTS_NAME "ACC_TPDO_SEG0_VOLTS"
#define CANBUS_ACC_TPDO_SEG0_TEMPS_NAME "ACC_TPDO_SEG0_TEMPS"
#define CANBUS_ACC_TPDO_SEG1_VOLTS_NAME "ACC_TPDO_SEG1_VOLTS"
#define CANBUS_ACC_TPDO_SEG1_TEMPS_NAME "ACC_TPDO_SEG1_TEMPS"
#define CANBUS_ACC_TPDO_SEG2_VOLTS_NAME "ACC_TPDO_SEG2_VOLTS"
#define CANBUS_ACC_TPDO_SEG2_TEMPS_NAME "ACC_TPDO_SEG2_TEMPS"
#define CANBUS_ACC_TPDO_SEG3_VOLTS_NAME "ACC_TPDO_SEG3_VOLTS"
#define CANBUS_ACC_TPDO_SEG3_TEMPS_NAME "ACC_TPDO_SEG3_TEMPS"
#define CANBUS_ACC_TPDO_SEG4_VOLTS_NAME "ACC_TPDO_SEG4_VOLTS"
#define CANBUS_ACC_TPDO_SEG4_TEMPS_NAME "ACC_TPDO_SEG4_TEMPS"
#define CANBUS_VDM_GPS_LAT_LONG_NAME "VDM_GPS_LAT_LONG"
#define CANBUS_VDM_GPS_DATA_NAME "VDM_GPS_DATA"
#define CANBUS_VDM_DATE_TIME_NAME "VDM_DATE_TIME"
#define CANBUS_VDM_ACCELERATION_NAME "VDM_ACCELERATION"
#define CANBUS_VDM_YAW_RATE_NAME "VDM_YAW_RATE"
#define CANBUS_ETC_TPDO_STATUS_NAME "ETC_TPDO_STATUS"
#define CANBUS_PDB_TPDO_POWER_A_NAME "PDB_TPDO_POWER_A"
#define CANBUS_PDB_TPDO_POWER_B_NAME "PDB_TPDO_POWER_B"
#define CANBUS_TMAIN_TPDO_DATA_NAME "TMAIN_TPDO_DATA"
#define CANBUS_TPERIPH_FL_TPDO_DATA_NAME "TPERIPH_FL_TPDO_DATA"
#define CANBUS_TPERIPH_FR_TPDO_DATA_NAME "TPERIPH_FR_TPDO_DATA"
#define CANBUS_TPERIPH_BL_TPDO_DATA_NAME "TPERIPH_BL_TPDO_DATA"
#define CANBUS_TPERIPH_BR_TPDO_DATA_NAME "TPERIPH_BR_TPDO_DATA"
#define CANBUS_TPERIPH_FL_TPDO_TIRETEMP_NAME "TPERIPH_FL_TPDO_TIRETEMP"
#define CANBUS_TPERIPH_FR_TPDO_TIRETEMP_NAME "TPERIPH_FR_TPDO_TIRETEMP"
#define CANBUS_TPERIPH_BL_TPDO_TIRETEMP_NAME "TPERIPH_BL_TPDO_TIRETEMP"
#define CANBUS_TPERIPH_BR_TPDO_TIRETEMP_NAME "TPERIPH_BR_TPDO_TIRETEMP"
#define CANBUS_LSS_COMMAND_NAME "LSS_COMMAND"
#define CANBUS_LSS_RESPONSE_NAME "LSS_RESPONSE"
#define CANBUS_SMPC_RPDO_CONTROL_NAME "SMPC_RPDO_CONTROL"
#define CANBUS_SMPC_RPDO_MAX_VOLTAGE_CURRENT_NAME "SMPC_RPDO_MAX_VOLTAGE_CURRENT"
#define CANBUS_SMPC_TPDO_STATUS_NAME "SMPC_TPDO_STATUS"
#define CANBUS_SMPC_TPDO_MAX_VOLTAGE_CURRENT_NAME "SMPC_TPDO_MAX_VOLTAGE_CURRENT"
#define CANBUS_SMPC_TPDO_INPUT_AC_NAME "SMPC_TPDO_INPUT_AC"
#define CANBUS_SMPC_TPDO_SERIAL_PART_NUM_NAME "SMPC_TPDO_SERIAL_PART_NUM"

/* Signal Names. */
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_SME_THROTL_TORQUE_DEMAND_NAME "SME_THROTL_TorqueDemand"
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_SME_THROTL_MAX_SPEED_NAME "SME_THROTL_MaxSpeed"
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_SME_THROTL_FORWARD_NAME "SME_THROTL_Forward"
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_SME_THROTL_REVERSE_NAME "SME_THROTL_Reverse"
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_SME_THROTL_UNUSED_BIT_1_NAME "SME_THROTL_UNUSED_BIT_1"
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_SME_THROTL_POWER_READY_NAME "SME_THROTL_PowerReady"
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_SME_THROTL_UNUSED_BIT_2_NAME "SME_THROTL_UNUSED_BIT_2"
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_SME_THROTL_UNUSED_BIT_3_NAME "SME_THROTL_UNUSED_BIT_3"
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_SME_THROTL_UNUSED_BIT_4_NAME "SME_THROTL_UNUSED_BIT_4"
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_SME_THROTL_UNUSED_BIT_5_NAME "SME_THROTL_UNUSED_BIT_5"
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_SME_THROTL_MBB_ALIVE_NAME "SME_THROTL_MBB_Alive"
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_SME_THROTL_UNUSED_BIT_6_NAME "SME_THROTL_UNUSED_BIT_6"
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_SME_THROTL_UNUSED_BIT_7_NAME "SME_THROTL_UNUSED_BIT_7"
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_SME_THROTL_UNUSED_BIT_8_NAME "SME_THROTL_UNUSED_BIT_8"
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_SME_THROTL_UNUSED_BIT_9_NAME "SME_THROTL_UNUSED_BIT_9"
#define CANBUS_SME_RPDO_THROTTLE_DEMAND_SME_THROTL_UNUSED_SHORT_1_NAME "SME_THROTL_UNUSED_SHORT_1"
#define CANBUS_SME_RPDO_MAX_CURRENTS_SME_CURRLIM_CHARGE_CURRENT_LIM_NAME "SME_CURRLIM_ChargeCurrentLim"
#define CANBUS_SME_RPDO_MAX_CURRENTS_SME_CURRLIM_DISCHARGE_CURRENT_LIM_NAME "SME_CURRLIM_DischargeCurrentLim"
#define CANBUS_SME_RPDO_MAX_CURRENTS_SME_CURRLIM_UNUSED_INT_1_NAME "SME_CURRLIM_UNUSED_INT_1"
#define CANBUS_SME_TPDO_TORQUE_SPEED_SME_TRQSPD_SPEED_NAME "SME_TRQSPD_Speed"
#define CANBUS_SME_TPDO_TORQUE_SPEED_SME_TRQSPD_TORQUE_NAME "SME_TRQSPD_Torque"
#define CANBUS_SME_TPDO_TORQUE_SPEED_SME_TRQSPD_SOC_LOW_TRACTION_NAME "SME_TRQSPD_SOC_Low_Traction"
#define CANBUS_SME_TPDO_TORQUE_SPEED_SME_TRQSPD_SOC_LOW_HYDRAULIC_NAME "SME_TRQSPD_SOC_Low_Hydraulic"
#define CANBUS_SME_TPDO_TORQUE_SPEED_SME_TRQSPD_REVERSE_NAME "SME_TRQSPD_Reverse"
#define CANBUS_SME_TPDO_TORQUE_SPEED_SME_TRQSPD_FORWARD_NAME "SME_TRQSPD_Forward"
#define CANBUS_SME_TPDO_TORQUE_SPEED_SME_TRQSPD_PARK_BRAKE_NAME "SME_TRQSPD_Park_Brake"
#define CANBUS_SME_TPDO_TORQUE_SPEED_SME_TRQSPD_PEDAL_BRAKE_NAME "SME_TRQSPD_Pedal_Brake"
#define CANBUS_SME_TPDO_TORQUE_SPEED_SME_TRQSPD_CONTROLLER_OVERTERMP_NAME "SME_TRQSPD_Controller_Overtermp"
#define CANBUS_SME_TPDO_TORQUE_SPEED_SME_TRQSPD_KEY_SWITCH_OVERVOLT_NAME "SME_TRQSPD_Key_switch_overvolt"
#define CANBUS_SME_TPDO_TORQUE_SPEED_SME_TRQSPD_KEY_SWITCH_UNDERVOLT_NAME "SME_TRQSPD_Key_switch_undervolt"
#define CANBUS_SME_TPDO_TORQUE_SPEED_SME_TRQSPD_RUNNING_NAME "SME_TRQSPD_Running"
#define CANBUS_SME_TPDO_TORQUE_SPEED_SME_TRQSPD_TRACTION_NAME "SME_TRQSPD_Traction"
#define CANBUS_SME_TPDO_TORQUE_SPEED_SME_TRQSPD_HYDRAULIC_NAME "SME_TRQSPD_Hydraulic"
#define CANBUS_SME_TPDO_TORQUE_SPEED_SME_TRQSPD_POWERING_ENABLED_NAME "SME_TRQSPD_Powering_Enabled"
#define CANBUS_SME_TPDO_TORQUE_SPEED_SME_TRQSPD_POWERING_READY_NAME "SME_TRQSPD_Powering_Ready"
#define CANBUS_SME_TPDO_TORQUE_SPEED_SME_TRQSPD_PRECHARGING_NAME "SME_TRQSPD_Precharging"
#define CANBUS_SME_TPDO_TORQUE_SPEED_SME_TRQSPD_CONTACTOR_CLOSED_NAME "SME_TRQSPD_contactor_closed"
#define CANBUS_SME_TPDO_TORQUE_SPEED_SME_TRQSPD_MOTOR_FLAGS_NAME "SME_TRQSPD_MotorFlags"
#define CANBUS_SME_TPDO_TEMPERATURE_SME_TEMP_MOTOR_TEMPERATURE_NAME "SME_TEMP_MotorTemperature"
#define CANBUS_SME_TPDO_TEMPERATURE_SME_TEMP_CONTROLLER_TEMPERATURE_NAME "SME_TEMP_ControllerTemperature"
#define CANBUS_SME_TPDO_TEMPERATURE_SME_TEMP_DC_BUS_V_NAME "SME_TEMP_DC_Bus_V"
#define CANBUS_SME_TPDO_TEMPERATURE_SME_TEMP_FAULT_CODE_NAME "SME_TEMP_FaultCode"
#define CANBUS_SME_TPDO_TEMPERATURE_SME_TEMP_FAULT_LEVEL_NAME "SME_TEMP_FaultLevel"
#define CANBUS_SME_TPDO_TEMPERATURE_SME_TEMP_BUS_CURRENT_NAME "SME_TEMP_BusCurrent"
#define CANBUS_ACC_TPDO_STATUS_ACC_STATUS_BMS_FAULT_NAME "ACC_STATUS_BMS_FAULT"
#define CANBUS_ACC_TPDO_STATUS_ACC_STATUS_IMD_FAULT_NAME "ACC_STATUS_IMD_FAULT"
#define CANBUS_ACC_TPDO_STATUS_ACC_STATUS_SHUTDOWN_STATE_NAME "ACC_STATUS_SHUTDOWN_STATE"
#define CANBUS_ACC_TPDO_STATUS_ACC_STATUS_PRECHARGE_DONE_NAME "ACC_STATUS_PRECHARGE_DONE"
#define CANBUS_ACC_TPDO_STATUS_ACC_STATUS_PRECHARGING_NAME "ACC_STATUS_PRECHARGING"
#define CANBUS_ACC_TPDO_STATUS_ACC_STATUS_CHARGING_NAME "ACC_STATUS_CHARGING"
#define CANBUS_ACC_TPDO_STATUS_ACC_STATUS_CELL_TOO_LOW_NAME "ACC_STATUS_CELL_TOO_LOW"
#define CANBUS_ACC_TPDO_STATUS_ACC_STATUS_CELL_TOO_HIGH_NAME "ACC_STATUS_CELL_TOO_HIGH"
#define CANBUS_ACC_TPDO_STATUS_ACC_STATUS_TEMP_TOO_LOW_NAME "ACC_STATUS_TEMP_TOO_LOW"
#define CANBUS_ACC_TPDO_STATUS_ACC_STATUS_TEMP_TOO_HIGH_NAME "ACC_STATUS_TEMP_TOO_HIGH"
#define CANBUS_ACC_TPDO_STATUS_ACC_STATUS_TEMP_TOO_HIGH_CRG_NAME "ACC_STATUS_TEMP_TOO_HIGH_CRG"
#define CANBUS_ACC_TPDO_STATUS_ACC_STATUS_BALANCING_NAME "ACC_STATUS_BALANCING"
#define CANBUS_ACC_TPDO_STATUS_ACC_STATUS_GLV_VOLTAGE_NAME "ACC_STATUS_GLV_VOLTAGE"
#define CANBUS_ACC_TPDO_STATUS_ACC_STATUS_CELL_FAULT_INDEX_NAME "ACC_STATUS_CELL_FAULT_INDEX"
#define CANBUS_ACC_TPDO_POWER_ACC_POWER_PACK_VOLTAGE_NAME "ACC_POWER_PACK_VOLTAGE"
#define CANBUS_ACC_TPDO_POWER_ACC_POWER_SOC_NAME "ACC_POWER_SOC"
#define CANBUS_ACC_TPDO_POWER_ACC_POWER_CURRENT_NAME "ACC_POWER_CURRENT"
#define CANBUS_ACC_TPDO_SEG0_VOLTS_ACC_SEG0_VOLTS_CELL0_NAME "ACC_SEG0_VOLTS_CELL0"
#define CANBUS_ACC_TPDO_SEG0_VOLTS_ACC_SEG0_VOLTS_CELL1_NAME "ACC_SEG0_VOLTS_CELL1"
#define CANBUS_ACC_TPDO_SEG0_VOLTS_ACC_SEG0_VOLTS_CELL2_NAME "ACC_SEG0_VOLTS_CELL2"
#define CANBUS_ACC_TPDO_SEG0_VOLTS_ACC_SEG0_VOLTS_CELL3_NAME "ACC_SEG0_VOLTS_CELL3"
#define CANBUS_ACC_TPDO_SEG0_VOLTS_ACC_SEG0_VOLTS_CELL4_NAME "ACC_SEG0_VOLTS_CELL4"
#define CANBUS_ACC_TPDO_SEG0_VOLTS_ACC_SEG0_VOLTS_CELL5_NAME "ACC_SEG0_VOLTS_CELL5"
#define CANBUS_ACC_TPDO_SEG0_TEMPS_ACC_SEG0_TEMPS_CELL0_NAME "ACC_SEG0_TEMPS_CELL0"
#define CANBUS_ACC_TPDO_SEG0_TEMPS_ACC_SEG0_TEMPS_CELL1_NAME "ACC_SEG0_TEMPS_CELL1"
#define CANBUS_ACC_TPDO_SEG0_TEMPS_ACC_SEG0_TEMPS_CELL2_NAME "ACC_SEG0_TEMPS_CELL2"
#define CANBUS_ACC_TPDO_SEG0_TEMPS_ACC_SEG0_TEMPS_CELL3_NAME "ACC_SEG0_TEMPS_CELL3"
#define CANBUS_ACC_TPDO_SEG0_TEMPS_ACC_SEG0_TEMPS_CELL4_NAME "ACC_SEG0_TEMPS_CELL4"
#define CANBUS_ACC_TPDO_SEG0_TEMPS_ACC_SEG0_TEMPS_CELL5_NAME "ACC_SEG0_TEMPS_CELL5"
#define CANBUS_ACC_TPDO_SEG1_VOLTS_ACC_SEG1_VOLTS_CELL0_NAME "ACC_SEG1_VOLTS_CELL0"
#define CANBUS_ACC_TPDO_SEG1_VOLTS_ACC_SEG1_VOLTS_CELL1_NAME "ACC_SEG1_VOLTS_CELL1"
#define CANBUS_ACC_TPDO_SEG1_VOLTS_ACC_SEG1_VOLTS_CELL2_NAME "ACC_SEG1_VOLTS_CELL2"
#define CANBUS_ACC_TPDO_SEG1_VOLTS_ACC_SEG1_VOLTS_CELL3_NAME "ACC_SEG1_VOLTS_CELL3"
#define CANBUS_ACC_TPDO_SEG1_VOLTS_ACC_SEG1_VOLTS_CELL4_NAME "ACC_SEG1_VOLTS_CELL4"
#define CANBUS_ACC_TPDO_SEG1_VOLTS_ACC_SEG1_VOLTS_CELL5_NAME "ACC_SEG1_VOLTS_CELL5"
#define CANBUS_ACC_TPDO_SEG1_TEMPS_ACC_SEG1_TEMPS_CELL0_NAME "ACC_SEG1_TEMPS_CELL0"
#define CANBUS_ACC_TPDO_SEG1_TEMPS_ACC_SEG1_TEMPS_CELL1_NAME "ACC_SEG1_TEMPS_CELL1"
#define CANBUS_ACC_TPDO_SEG1_TEMPS_ACC_SEG1_TEMPS_CELL2_NAME "ACC_SEG1_TEMPS_CELL2"
#define CANBUS_ACC_TPDO_SEG1_TEMPS_ACC_SEG1_TEMPS_CELL3_NAME "ACC_SEG1_TEMPS_CELL3"
#define CANBUS_ACC_TPDO_SEG1_TEMPS_ACC_SEG1_TEMPS_CELL4_NAME "ACC_SEG1_TEMPS_CELL4"
#define CANBUS_ACC_TPDO_SEG1_TEMPS_ACC_SEG1_TEMPS_CELL5_NAME "ACC_SEG1_TEMPS_CELL5"
#define CANBUS_ACC_TPDO_SEG2_VOLTS_ACC_SEG2_VOLTS_CELL0_NAME "ACC_SEG2_VOLTS_CELL0"
#define CANBUS_ACC_TPDO_SEG2_VOLTS_ACC_SEG2_VOLTS_CELL1_NAME "ACC_SEG2_VOLTS_CELL1"
#define CANBUS_ACC_TPDO_SEG2_VOLTS_ACC_SEG2_VOLTS_CELL2_NAME "ACC_SEG2_VOLTS_CELL2"
#define CANBUS_ACC_TPDO_SEG2_VOLTS_ACC_SEG2_VOLTS_CELL3_NAME "ACC_SEG2_VOLTS_CELL3"
#define CANBUS_ACC_TPDO_SEG2_VOLTS_ACC_SEG2_VOLTS_CELL4_NAME "ACC_SEG2_VOLTS_CELL4"
#define CANBUS_ACC_TPDO_SEG2_VOLTS_ACC_SEG2_VOLTS_CELL5_NAME "ACC_SEG2_VOLTS_CELL5"
#define CANBUS_ACC_TPDO_SEG2_TEMPS_ACC_SEG2_TEMPS_CELL0_NAME "ACC_SEG2_TEMPS_CELL0"
#define CANBUS_ACC_TPDO_SEG2_TEMPS_ACC_SEG2_TEMPS_CELL1_NAME "ACC_SEG2_TEMPS_CELL1"
#define CANBUS_ACC_TPDO_SEG2_TEMPS_ACC_SEG2_TEMPS_CELL2_NAME "ACC_SEG2_TEMPS_CELL2"
#define CANBUS_ACC_TPDO_SEG2_TEMPS_ACC_SEG2_TEMPS_CELL3_NAME "ACC_SEG2_TEMPS_CELL3"
#define CANBUS_ACC_TPDO_SEG2_TEMPS_ACC_SEG2_TEMPS_CELL4_NAME "ACC_SEG2_TEMPS_CELL4"
#define CANBUS_ACC_TPDO_SEG2_TEMPS_ACC_SEG2_TEMPS_CELL5_NAME "ACC_SEG2_TEMPS_CELL5"
#define CANBUS_ACC_TPDO_SEG3_VOLTS_ACC_SEG3_VOLTS_CELL0_NAME "ACC_SEG3_VOLTS_CELL0"
#define CANBUS_ACC_TPDO_SEG3_VOLTS_ACC_SEG3_VOLTS_CELL1_NAME "ACC_SEG3_VOLTS_CELL1"
#define CANBUS_ACC_TPDO_SEG3_VOLTS_ACC_SEG3_VOLTS_CELL2_NAME "ACC_SEG3_VOLTS_CELL2"
#define CANBUS_ACC_TPDO_SEG3_VOLTS_ACC_SEG3_VOLTS_CELL3_NAME "ACC_SEG3_VOLTS_CELL3"
#define CANBUS_ACC_TPDO_SEG3_VOLTS_ACC_SEG3_VOLTS_CELL4_NAME "ACC_SEG3_VOLTS_CELL4"
#define CANBUS_ACC_TPDO_SEG3_VOLTS_ACC_SEG3_VOLTS_CELL5_NAME "ACC_SEG3_VOLTS_CELL5"
#define CANBUS_ACC_TPDO_SEG3_TEMPS_ACC_SEG3_TEMPS_CELL0_NAME "ACC_SEG3_TEMPS_CELL0"
#define CANBUS_ACC_TPDO_SEG3_TEMPS_ACC_SEG3_TEMPS_CELL1_NAME "ACC_SEG3_TEMPS_CELL1"
#define CANBUS_ACC_TPDO_SEG3_TEMPS_ACC_SEG3_TEMPS_CELL2_NAME "ACC_SEG3_TEMPS_CELL2"
#define CANBUS_ACC_TPDO_SEG3_TEMPS_ACC_SEG3_TEMPS_CELL3_NAME "ACC_SEG3_TEMPS_CELL3"
#define CANBUS_ACC_TPDO_SEG3_TEMPS_ACC_SEG3_TEMPS_CELL4_NAME "ACC_SEG3_TEMPS_CELL4"
#define CANBUS_ACC_TPDO_SEG3_TEMPS_ACC_SEG3_TEMPS_CELL5_NAME "ACC_SEG3_TEMPS_CELL5"
#define CANBUS_ACC_TPDO_SEG4_VOLTS_ACC_SEG4_VOLTS_CELL0_NAME "ACC_SEG4_VOLTS_CELL0"
#define CANBUS_ACC_TPDO_SEG4_VOLTS_ACC_SEG4_VOLTS_CELL1_NAME "ACC_SEG4_VOLTS_CELL1"
#define CANBUS_ACC_TPDO_SEG4_VOLTS_ACC_SEG4_VOLTS_CELL2_NAME "ACC_SEG4_VOLTS_CELL2"
#define CANBUS_ACC_TPDO_SEG4_VOLTS_ACC_SEG4_VOLTS_CELL3_NAME "ACC_SEG4_VOLTS_CELL3"
#define CANBUS_ACC_TPDO_SEG4_VOLTS_ACC_SEG4_VOLTS_CELL4_NAME "ACC_SEG4_VOLTS_CELL4"
#define CANBUS_ACC_TPDO_SEG4_VOLTS_ACC_SEG4_VOLTS_CELL5_NAME "ACC_SEG4_VOLTS_CELL5"
#define CANBUS_ACC_TPDO_SEG4_TEMPS_ACC_SEG4_TEMPS_CELL0_NAME "ACC_SEG4_TEMPS_CELL0"
#define CANBUS_ACC_TPDO_SEG4_TEMPS_ACC_SEG4_TEMPS_CELL1_NAME "ACC_SEG4_TEMPS_CELL1"
#define CANBUS_ACC_TPDO_SEG4_TEMPS_ACC_SEG4_TEMPS_CELL2_NAME "ACC_SEG4_TEMPS_CELL2"
#define CANBUS_ACC_TPDO_SEG4_TEMPS_ACC_SEG4_TEMPS_CELL3_NAME "ACC_SEG4_TEMPS_CELL3"
#define CANBUS_ACC_TPDO_SEG4_TEMPS_ACC_SEG4_TEMPS_CELL4_NAME "ACC_SEG4_TEMPS_CELL4"
#define CANBUS_ACC_TPDO_SEG4_TEMPS_ACC_SEG4_TEMPS_CELL5_NAME "ACC_SEG4_TEMPS_CELL5"
#define CANBUS_VDM_GPS_LAT_LONG_VDM_GPS_LATITUDE_NAME "VDM_GPS_Latitude"
#define CANBUS_VDM_GPS_LAT_LONG_VDM_GPS_LONGITUDE_NAME "VDM_GPS_Longitude"
#define CANBUS_VDM_GPS_DATA_VDM_GPS_SPEED_NAME "VDM_GPS_SPEED"
#define CANBUS_VDM_GPS_DATA_VDM_GPS_ALTITUDE_NAME "VDM_GPS_ALTITUDE"
#define CANBUS_VDM_GPS_DATA_VDM_GPS_TRUE_COURSE_NAME "VDM_GPS_TRUE_COURSE"
#define CANBUS_VDM_GPS_DATA_VDM_GPS_SATELLITES_IN_USE_NAME "VDM_GPS_SATELLITES_IN_USE"
#define CANBUS_VDM_GPS_DATA_VDM_GPS_VALID1_NAME "VDM_GPS_VALID1"
#define CANBUS_VDM_DATE_TIME_VDM_GPS_VALID2_NAME "VDM_GPS_VALID2"
#define CANBUS_VDM_DATE_TIME_VDM_UTC_DATE_YEAR_NAME "VDM_UTC_DATE_YEAR"
#define CANBUS_VDM_DATE_TIME_VDM_UTC_DATE_MONTH_NAME "VDM_UTC_DATE_MONTH"
#define CANBUS_VDM_DATE_TIME_VDM_UTC_DATE_DAY_NAME "VDM_UTC_DATE_DAY"
#define CANBUS_VDM_DATE_TIME_VDM_UTC_TIME_HOURS_NAME "VDM_UTC_TIME_HOURS"
#define CANBUS_VDM_DATE_TIME_VDM_UTC_TIME_MINUTES_NAME "VDM_UTC_TIME_MINUTES"
#define CANBUS_VDM_DATE_TIME_VDM_UTC_TIME_SECONDS_NAME "VDM_UTC_TIME_SECONDS"
#define CANBUS_VDM_ACCELERATION_VDM_X_AXIS_ACCELERATION_NAME "VDM_X_AXIS_ACCELERATION"
#define CANBUS_VDM_ACCELERATION_VDM_Y_AXIS_ACCELERATION_NAME "VDM_Y_AXIS_ACCELERATION"
#define CANBUS_VDM_ACCELERATION_VDM_Z_AXIS_ACCELERATION_NAME "VDM_Z_AXIS_ACCELERATION"
#define CANBUS_VDM_YAW_RATE_VDM_X_AXIS_YAW_RATE_NAME "VDM_X_AXIS_YAW_RATE"
#define CANBUS_VDM_YAW_RATE_VDM_Y_AXIS_YAW_RATE_NAME "VDM_Y_AXIS_YAW_RATE"
#define CANBUS_VDM_YAW_RATE_VDM_Z_AXIS_YAW_RATE_NAME "VDM_Z_AXIS_YAW_RATE"
#define CANBUS_ETC_TPDO_STATUS_ETC_STATUS_HE1_NAME "ETC_STATUS_HE1"
#define CANBUS_ETC_TPDO_STATUS_ETC_STATUS_HE2_NAME "ETC_STATUS_HE2"
#define CANBUS_ETC_TPDO_STATUS_ETC_STATUS_BRAKE_SENSE_VOLTAGE_NAME "ETC_STATUS_BRAKE_SENSE_VOLTAGE"
#define CANBUS_ETC_TPDO_STATUS_ETC_STATUS_PEDAL_TRAVEL_NAME "ETC_STATUS_PEDAL_TRAVEL"
#define CANBUS_ETC_TPDO_STATUS_ETC_STATUS_RTD_BUTTON_NAME "ETC_STATUS_RTD_BUTTON"
#define CANBUS_ETC_TPDO_STATUS_ETC_STATUS_RTDS_NAME "ETC_STATUS_RTDS"
#define CANBUS_ETC_TPDO_STATUS_ETC_STATUS_REVERSE_NAME "ETC_STATUS_REVERSE"
#define CANBUS_ETC_TPDO_STATUS_ETC_STATUS_BRAKELIGHT_NAME "ETC_STATUS_BRAKELIGHT"
#define CANBUS_ETC_TPDO_STATUS_ETC_STATUS_RTD_NAME "ETC_STATUS_RTD"
#define CANBUS_ETC_TPDO_STATUS_ETC_STATUS_IMPLAUSIBILITY_NAME "ETC_STATUS_IMPLAUSIBILITY"
#define CANBUS_ETC_TPDO_STATUS_ETC_STATUS_TS_ACTIVE_NAME "ETC_STATUS_TS_ACTIVE"
#define CANBUS_PDB_TPDO_POWER_A_PDB_POWER_A_GLV_VOLTAGE_NAME "PDB_POWER_A_GLV_VOLTAGE"
#define CANBUS_PDB_TPDO_POWER_A_PDB_POWER_A_CURRENT_SHUTDOWN_NAME "PDB_POWER_A_CURRENT_SHUTDOWN"
#define CANBUS_PDB_TPDO_POWER_A_PDB_POWER_A_CURRENT_ACC_NAME "PDB_POWER_A_CURRENT_ACC"
#define CANBUS_PDB_TPDO_POWER_A_PDB_POWER_A_CURRENT_ETC_NAME "PDB_POWER_A_CURRENT_ETC"
#define CANBUS_PDB_TPDO_POWER_A_PDB_POWER_A_CURRENT_BPS_NAME "PDB_POWER_A_CURRENT_BPS"
#define CANBUS_PDB_TPDO_POWER_A_PDB_POWER_A_CURRENT_TRACTIVE_NAME "PDB_POWER_A_CURRENT_TRACTIVE"
#define CANBUS_PDB_TPDO_POWER_A_PDB_POWER_A_CURRENT_BSPD_NAME "PDB_POWER_A_CURRENT_BSPD"
#define CANBUS_PDB_TPDO_POWER_B_PDB_POWER_B_CURRENT_TELEMETRY_NAME "PDB_POWER_B_CURRENT_TELEMETRY"
#define CANBUS_PDB_TPDO_POWER_B_PDB_POWER_B_CURRENT_PDB_NAME "PDB_POWER_B_CURRENT_PDB"
#define CANBUS_PDB_TPDO_POWER_B_PDB_POWER_B_CURRENT_DASH_NAME "PDB_POWER_B_CURRENT_DASH"
#define CANBUS_PDB_TPDO_POWER_B_PDB_POWER_B_CURRENT_RTML_NAME "PDB_POWER_B_CURRENT_RTML"
#define CANBUS_PDB_TPDO_POWER_B_PDB_POWER_B_CURRENT_EXTRA_1_NAME "PDB_POWER_B_CURRENT_EXTRA_1"
#define CANBUS_PDB_TPDO_POWER_B_PDB_POWER_B_CURRENT_EXTRA_2_NAME "PDB_POWER_B_CURRENT_EXTRA_2"
#define CANBUS_TMAIN_TPDO_DATA_TMAIN_DATA_BRAKES_F_NAME "TMAIN_DATA_BRAKES_F"
#define CANBUS_TMAIN_TPDO_DATA_TMAIN_DATA_BRAKES_R_NAME "TMAIN_DATA_BRAKES_R"
#define CANBUS_TPERIPH_FL_TPDO_DATA_TPERIPH_FL_DATA_WHEELSPEED_NAME "TPERIPH_FL_DATA_WHEELSPEED"
#define CANBUS_TPERIPH_FL_TPDO_DATA_TPERIPH_FL_DATA_SUSTRAVEL_NAME "TPERIPH_FL_DATA_SUSTRAVEL"
#define CANBUS_TPERIPH_FL_TPDO_DATA_TPERIPH_FL_DATA_STRAIN_NAME "TPERIPH_FL_DATA_STRAIN"
#define CANBUS_TPERIPH_FL_TPDO_DATA_TPERIPH_FL_DATA_SIDE_TIRE_TEMP_NAME "TPERIPH_FL_DATA_SIDE_TIRE_TEMP"
#define CANBUS_TPERIPH_FR_TPDO_DATA_TPERIPH_FR_DATA_WHEELSPEED_NAME "TPERIPH_FR_DATA_WHEELSPEED"
#define CANBUS_TPERIPH_FR_TPDO_DATA_TPERIPH_FR_DATA_SUSTRAVEL_NAME "TPERIPH_FR_DATA_SUSTRAVEL"
#define CANBUS_TPERIPH_FR_TPDO_DATA_TPERIPH_FR_DATA_STRAIN_NAME "TPERIPH_FR_DATA_STRAIN"
#define CANBUS_TPERIPH_FR_TPDO_DATA_TPERIPH_FR_DATA_SIDE_TIRE_TEMP_NAME "TPERIPH_FR_DATA_SIDE_TIRE_TEMP"
#define CANBUS_TPERIPH_BL_TPDO_DATA_TPERIPH_BL_DATA_WHEELSPEED_NAME "TPERIPH_BL_DATA_WHEELSPEED"
#define CANBUS_TPERIPH_BL_TPDO_DATA_TPERIPH_BL_DATA_SUSTRAVEL_NAME "TPERIPH_BL_DATA_SUSTRAVEL"
#define CANBUS_TPERIPH_BL_TPDO_DATA_TPERIPH_BL_DATA_STRAIN_NAME "TPERIPH_BL_DATA_STRAIN"
#define CANBUS_TPERIPH_BL_TPDO_DATA_TPERIPH_BL_DATA_SIDE_TIRE_TEMP_NAME "TPERIPH_BL_DATA_SIDE_TIRE_TEMP"
#define CANBUS_TPERIPH_BR_TPDO_DATA_TPERIPH_BR_DATA_WHEELSPEED_NAME "TPERIPH_BR_DATA_WHEELSPEED"
#define CANBUS_TPERIPH_BR_TPDO_DATA_TPERIPH_BR_DATA_SUSTRAVEL_NAME "TPERIPH_BR_DATA_SUSTRAVEL"
#define CANBUS_TPERIPH_BR_TPDO_DATA_TPERIPH_BR_DATA_STRAIN_NAME "TPERIPH_BR_DATA_STRAIN"
#define CANBUS_TPERIPH_BR_TPDO_DATA_TPERIPH_BR_DATA_SIDE_TIRE_TEMP_NAME "TPERIPH_BR_DATA_SIDE_TIRE_TEMP"
#define CANBUS_TPERIPH_FL_TPDO_TIRETEMP_TPERIPH_FL_TIRETEMP_1_NAME "TPERIPH_FL_TIRETEMP_1"
#define CANBUS_TPERIPH_FL_TPDO_TIRETEMP_TPERIPH_FL_TIRETEMP_2_NAME "TPERIPH_FL_TIRETEMP_2"
#define CANBUS_TPERIPH_FL_TPDO_TIRETEMP_TPERIPH_FL_TIRETEMP_3_NAME "TPERIPH_FL_TIRETEMP_3"
#define CANBUS_TPERIPH_FL_TPDO_TIRETEMP_TPERIPH_FL_TIRETEMP_4_NAME "TPERIPH_FL_TIRETEMP_4"
#define CANBUS_TPERIPH_FL_TPDO_TIRETEMP_TPERIPH_FL_TIRETEMP_5_NAME "TPERIPH_FL_TIRETEMP_5"
#define CANBUS_TPERIPH_FL_TPDO_TIRETEMP_TPERIPH_FL_TIRETEMP_6_NAME "TPERIPH_FL_TIRETEMP_6"
#define CANBUS_TPERIPH_FL_TPDO_TIRETEMP_TPERIPH_FL_TIRETEMP_7_NAME "TPERIPH_FL_TIRETEMP_7"
#define CANBUS_TPERIPH_FL_TPDO_TIRETEMP_TPERIPH_FL_TIRETEMP_8_NAME "TPERIPH_FL_TIRETEMP_8"
#define CANBUS_TPERIPH_FR_TPDO_TIRETEMP_TPERIPH_FR_TIRETEMP_1_NAME "TPERIPH_FR_TIRETEMP_1"
#define CANBUS_TPERIPH_FR_TPDO_TIRETEMP_TPERIPH_FR_TIRETEMP_2_NAME "TPERIPH_FR_TIRETEMP_2"
#define CANBUS_TPERIPH_FR_TPDO_TIRETEMP_TPERIPH_FR_TIRETEMP_3_NAME "TPERIPH_FR_TIRETEMP_3"
#define CANBUS_TPERIPH_FR_TPDO_TIRETEMP_TPERIPH_FR_TIRETEMP_4_NAME "TPERIPH_FR_TIRETEMP_4"
#define CANBUS_TPERIPH_FR_TPDO_TIRETEMP_TPERIPH_FR_TIRETEMP_5_NAME "TPERIPH_FR_TIRETEMP_5"
#define CANBUS_TPERIPH_FR_TPDO_TIRETEMP_TPERIPH_FR_TIRETEMP_6_NAME "TPERIPH_FR_TIRETEMP_6"
#define CANBUS_TPERIPH_FR_TPDO_TIRETEMP_TPERIPH_FR_TIRETEMP_7_NAME "TPERIPH_FR_TIRETEMP_7"
#define CANBUS_TPERIPH_FR_TPDO_TIRETEMP_TPERIPH_FR_TIRETEMP_8_NAME "TPERIPH_FR_TIRETEMP_8"
#define CANBUS_TPERIPH_BL_TPDO_TIRETEMP_TPERIPH_BL_TIRETEMP_1_NAME "TPERIPH_BL_TIRETEMP_1"
#define CANBUS_TPERIPH_BL_TPDO_TIRETEMP_TPERIPH_BL_TIRETEMP_2_NAME "TPERIPH_BL_TIRETEMP_2"
#define CANBUS_TPERIPH_BL_TPDO_TIRETEMP_TPERIPH_BL_TIRETEMP_3_NAME "TPERIPH_BL_TIRETEMP_3"
#define CANBUS_TPERIPH_BL_TPDO_TIRETEMP_TPERIPH_BL_TIRETEMP_4_NAME "TPERIPH_BL_TIRETEMP_4"
#define CANBUS_TPERIPH_BL_TPDO_TIRETEMP_TPERIPH_BL_TIRETEMP_5_NAME "TPERIPH_BL_TIRETEMP_5"
#define CANBUS_TPERIPH_BL_TPDO_TIRETEMP_TPERIPH_BL_TIRETEMP_6_NAME "TPERIPH_BL_TIRETEMP_6"
#define CANBUS_TPERIPH_BL_TPDO_TIRETEMP_TPERIPH_BL_TIRETEMP_7_NAME "TPERIPH_BL_TIRETEMP_7"
#define CANBUS_TPERIPH_BL_TPDO_TIRETEMP_TPERIPH_BL_TIRETEMP_8_NAME "TPERIPH_BL_TIRETEMP_8"
#define CANBUS_TPERIPH_BR_TPDO_TIRETEMP_TPERIPH_BR_TIRETEMP_1_NAME "TPERIPH_BR_TIRETEMP_1"
#define CANBUS_TPERIPH_BR_TPDO_TIRETEMP_TPERIPH_BR_TIRETEMP_2_NAME "TPERIPH_BR_TIRETEMP_2"
#define CANBUS_TPERIPH_BR_TPDO_TIRETEMP_TPERIPH_BR_TIRETEMP_3_NAME "TPERIPH_BR_TIRETEMP_3"
#define CANBUS_TPERIPH_BR_TPDO_TIRETEMP_TPERIPH_BR_TIRETEMP_4_NAME "TPERIPH_BR_TIRETEMP_4"
#define CANBUS_TPERIPH_BR_TPDO_TIRETEMP_TPERIPH_BR_TIRETEMP_5_NAME "TPERIPH_BR_TIRETEMP_5"
#define CANBUS_TPERIPH_BR_TPDO_TIRETEMP_TPERIPH_BR_TIRETEMP_6_NAME "TPERIPH_BR_TIRETEMP_6"
#define CANBUS_TPERIPH_BR_TPDO_TIRETEMP_TPERIPH_BR_TIRETEMP_7_NAME "TPERIPH_BR_TIRETEMP_7"
#define CANBUS_TPERIPH_BR_TPDO_TIRETEMP_TPERIPH_BR_TIRETEMP_8_NAME "TPERIPH_BR_TIRETEMP_8"
#define CANBUS_LSS_COMMAND_COMMAND_COMMAND_SPECIFIER_NAME "COMMAND_COMMAND_SPECIFIER"
#define CANBUS_LSS_COMMAND_COMMAND_MODE_NAME "COMMAND_MODE"
#define CANBUS_LSS_RESPONSE_RESPONSE_COMMAND_SPECIFIER_NAME "RESPONSE_COMMAND_SPECIFIER"
#define CANBUS_SMPC_RPDO_CONTROL_SMPC_CONTROL_DEST_NODE_ID_NAME "SMPC_CONTROL_DEST_NODE_ID"
#define CANBUS_SMPC_RPDO_CONTROL_SMPC_CONTROL_ENABLE_NAME "SMPC_CONTROL_ENABLE"
#define CANBUS_SMPC_RPDO_CONTROL_SMPC_CONTROL_CURRENT_10_X_MULT_NAME "SMPC_CONTROL_CURRENT_10X_MULT"
#define CANBUS_SMPC_RPDO_CONTROL_SMPC_CONTROL_EVSE_OVERRIDE_NAME "SMPC_CONTROL_EVSE_OVERRIDE"
#define CANBUS_SMPC_RPDO_CONTROL_SMPC_CONTROL_PACK_VOLTAGE_NAME "SMPC_CONTROL_PACK_VOLTAGE"
#define CANBUS_SMPC_RPDO_MAX_VOLTAGE_CURRENT_SMPC_MAX_DEST_NODE_ID_NAME "SMPC_MAX_DEST_NODE_ID"
#define CANBUS_SMPC_RPDO_MAX_VOLTAGE_CURRENT_SMPC_MAX_CHRG_VOLTAGE_NAME "SMPC_MAX_CHRG_VOLTAGE"
#define CANBUS_SMPC_RPDO_MAX_VOLTAGE_CURRENT_SMPC_MAX_CHRG_CURRENT_NAME "SMPC_MAX_CHRG_CURRENT"
#define CANBUS_SMPC_RPDO_MAX_VOLTAGE_CURRENT_SMPC_MAX_INPUT_EVSE_OVERRIDE_NAME "SMPC_MAX_INPUT_EVSE_OVERRIDE"
#define CANBUS_SMPC_TPDO_STATUS_SMPC_STATUS_READY_NAME "SMPC_STATUS_READY"
#define CANBUS_SMPC_TPDO_STATUS_SMPC_STATUS_CHARGE_COMPLETE_NAME "SMPC_STATUS_CHARGE_COMPLETE"
#define CANBUS_SMPC_TPDO_STATUS_SMPC_STATUS_OVERTEMP_FAULT_NAME "SMPC_STATUS_OVERTEMP_FAULT"
#define CANBUS_SMPC_TPDO_STATUS_SMPC_STATUS_OVERCURRENT_FAULT_NAME "SMPC_STATUS_OVERCURRENT_FAULT"
#define CANBUS_SMPC_TPDO_STATUS_SMPC_STATUS_OVERVOLTAGE_FAULT_NAME "SMPC_STATUS_OVERVOLTAGE_FAULT"
#define CANBUS_SMPC_TPDO_STATUS_SMPC_STATUS_UNDERVOLTAGE_FAULT_NAME "SMPC_STATUS_UNDERVOLTAGE_FAULT"
#define CANBUS_SMPC_TPDO_STATUS_SMPC_STATUS_INTERNAL_FAULT_NAME "SMPC_STATUS_INTERNAL_FAULT"
#define CANBUS_SMPC_TPDO_STATUS_SMPC_STATUS_CHARGING_NAME "SMPC_STATUS_CHARGING"
#define CANBUS_SMPC_TPDO_STATUS_SMPC_STATUS_CHARGER_UNPLUGGED_NAME "SMPC_STATUS_CHARGER_UNPLUGGED"
#define CANBUS_SMPC_TPDO_STATUS_SMPC_STATUS_REQUEST_EXCLUSIVE_NAME "SMPC_STATUS_REQUEST_EXCLUSIVE"
#define CANBUS_SMPC_TPDO_STATUS_SMPC_STATUS_J1772_DISCONN_NAME "SMPC_STATUS_J1772_DISCONN"
#define CANBUS_SMPC_TPDO_STATUS_SMPC_STATUS_VOLTAGE_MV_NAME "SMPC_STATUS_VOLTAGE_MV"
#define CANBUS_SMPC_TPDO_STATUS_SMPC_STATUS_CURRENT_MA_NAME "SMPC_STATUS_CURRENT_MA"
#define CANBUS_SMPC_TPDO_MAX_VOLTAGE_CURRENT_SMPC_MAX2_MAX_VOLTAGE_MV_NAME "SMPC_MAX2_MAX_VOLTAGE_MV"
#define CANBUS_SMPC_TPDO_MAX_VOLTAGE_CURRENT_SMPC_MAX2_MAX_CURRENT_MA_NAME "SMPC_MAX2_MAX_CURRENT_MA"
#define CANBUS_SMPC_TPDO_MAX_VOLTAGE_CURRENT_SMPC_MAX2_EVSE_CURRENT_NAME "SMPC_MAX2_EVSE_CURRENT"
#define CANBUS_SMPC_TPDO_MAX_VOLTAGE_CURRENT_SMPC_MAX2_INPUT_CURR_LIM_NAME "SMPC_MAX2_INPUT_CURR_LIM"
#define CANBUS_SMPC_TPDO_INPUT_AC_SMPC_INPUT_AC_INPUT_VOLTAGE_NAME "SMPC_INPUT_AC_INPUT_VOLTAGE"
#define CANBUS_SMPC_TPDO_INPUT_AC_SMPC_INPUT_J1772_CONNECTED_NAME "SMPC_INPUT_J1772_CONNECTED"
#define CANBUS_SMPC_TPDO_INPUT_AC_SMPC_INPUT_J1772_DISCONNECTED_NAME "SMPC_INPUT_J1772_DISCONNECTED"
#define CANBUS_SMPC_TPDO_INPUT_AC_SMPC_INPUT_J1772_TRIGGERED_NAME "SMPC_INPUT_J1772_TRIGGERED"
#define CANBUS_SMPC_TPDO_INPUT_AC_SMPC_INPUT_AC_INPUT_CURRENT_MA_NAME "SMPC_INPUT_AC_INPUT_CURRENT_MA"
#define CANBUS_SMPC_TPDO_INPUT_AC_SMPC_INPUT_AC_INPUT_FREQUENCY_HZ_NAME "SMPC_INPUT_AC_INPUT_FREQUENCY_HZ"
#define CANBUS_SMPC_TPDO_INPUT_AC_SMPC_INPUT_MAX_CHARGER_TEMP_C_NAME "SMPC_INPUT_MAX_CHARGER_TEMP_C"
#define CANBUS_SMPC_TPDO_SERIAL_PART_NUM_SMPC_SER_PART_NUMBER_NAME "SMPC_SER_PART_NUMBER"
#define CANBUS_SMPC_TPDO_SERIAL_PART_NUM_SMPC_SER_SERIAL_NUMBER_NAME "SMPC_SER_SERIAL_NUMBER"
#define CANBUS_SMPC_TPDO_SERIAL_PART_NUM_SMPC_SER_FIRMWARE_VER_NAME "SMPC_SER_FIRMWARE_VER"

/**
 * Signals in message SYNC.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_sync_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message SME_RPDO_Throttle_Demand.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_sme_rpdo_throttle_demand_t {
    /**
     * Range: -32767..32767 (-32767..32767 Q15)
     * Scale: 1
     * Offset: 0
     */
    int16_t sme_throtl_torque_demand;

    /**
     * Range: -32768..32767 (-32768..32767 RPM)
     * Scale: 1
     * Offset: 0
     */
    int16_t sme_throtl_max_speed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t sme_throtl_forward;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t sme_throtl_reverse;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_throtl_unused_bit_1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t sme_throtl_power_ready;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_throtl_unused_bit_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_throtl_unused_bit_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_throtl_unused_bit_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_throtl_unused_bit_5;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_throtl_mbb_alive;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_throtl_unused_bit_6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_throtl_unused_bit_7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_throtl_unused_bit_8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_throtl_unused_bit_9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t sme_throtl_unused_short_1;
};

/**
 * Signals in message SME_RPDO_Max_Currents.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_sme_rpdo_max_currents_t {
    /**
     * Range: 0..65535 (0..65535 A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t sme_currlim_charge_current_lim;

    /**
     * Range: 0..65535 (0..65535 A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t sme_currlim_discharge_current_lim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t sme_currlim_unused_int_1;
};

/**
 * Signals in message SME_TPDO_Torque_speed.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_sme_tpdo_torque_speed_t {
    /**
     * Range: -32768..32767 (-32768..32767 RPM)
     * Scale: 1
     * Offset: 0
     */
    uint16_t sme_trqspd_speed;

    /**
     * Range: -32767..32767 (-32767..32767 Q15)
     * Scale: 1
     * Offset: 0
     */
    int16_t sme_trqspd_torque;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_trqspd_soc_low_traction;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_trqspd_soc_low_hydraulic;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_trqspd_reverse;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_trqspd_forward;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_trqspd_park_brake;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_trqspd_pedal_brake;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_trqspd_controller_overtermp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_trqspd_key_switch_overvolt;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_trqspd_key_switch_undervolt;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_trqspd_running;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_trqspd_traction;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_trqspd_hydraulic;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_trqspd_powering_enabled;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_trqspd_powering_ready;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_trqspd_precharging;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_trqspd_contactor_closed;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t sme_trqspd_motor_flags;
};

/**
 * Signals in message SME_TPDO_Temperature.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_sme_tpdo_temperature_t {
    /**
     * Range: 40..295 (0..255 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t sme_temp_motor_temperature;

    /**
     * Range: 40..295 (0..255 C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t sme_temp_controller_temperature;

    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t sme_temp_dc_bus_v;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_temp_fault_code;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sme_temp_fault_level;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t sme_temp_bus_current;
};

/**
 * Signals in message ACC_TPDO_STATUS.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_acc_tpdo_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_status_bms_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_status_imd_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_status_shutdown_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_status_precharge_done;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_status_precharging;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_status_charging;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_status_cell_too_low;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_status_cell_too_high;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_status_temp_too_low;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_status_temp_too_high;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_status_temp_too_high_crg;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_status_balancing;

    /**
     * Range: 0..66 (0..65.635 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t acc_status_glv_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t acc_status_cell_fault_index;
};

/**
 * Signals in message ACC_TPDO_POWER.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_acc_tpdo_power_t {
    /**
     * Range: 0..65535 (0..655.35 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t acc_power_pack_voltage;

    /**
     * Range: 0..255 (0..255 Percentage)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_power_soc;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t acc_power_current;
};

/**
 * Signals in message ACC_TPDO_SEG0_VOLTS.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_acc_tpdo_seg0_volts_t {
    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg0_volts_cell0;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg0_volts_cell1;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg0_volts_cell2;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg0_volts_cell3;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg0_volts_cell4;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg0_volts_cell5;
};

/**
 * Signals in message ACC_TPDO_SEG0_TEMPS.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_acc_tpdo_seg0_temps_t {
    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg0_temps_cell0;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg0_temps_cell1;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg0_temps_cell2;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg0_temps_cell3;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg0_temps_cell4;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg0_temps_cell5;
};

/**
 * Signals in message ACC_TPDO_SEG1_VOLTS.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_acc_tpdo_seg1_volts_t {
    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg1_volts_cell0;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg1_volts_cell1;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg1_volts_cell2;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg1_volts_cell3;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg1_volts_cell4;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg1_volts_cell5;
};

/**
 * Signals in message ACC_TPDO_SEG1_TEMPS.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_acc_tpdo_seg1_temps_t {
    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg1_temps_cell0;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg1_temps_cell1;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg1_temps_cell2;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg1_temps_cell3;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg1_temps_cell4;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg1_temps_cell5;
};

/**
 * Signals in message ACC_TPDO_SEG2_VOLTS.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_acc_tpdo_seg2_volts_t {
    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg2_volts_cell0;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg2_volts_cell1;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg2_volts_cell2;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg2_volts_cell3;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg2_volts_cell4;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg2_volts_cell5;
};

/**
 * Signals in message ACC_TPDO_SEG2_TEMPS.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_acc_tpdo_seg2_temps_t {
    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg2_temps_cell0;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg2_temps_cell1;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg2_temps_cell2;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg2_temps_cell3;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg2_temps_cell4;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg2_temps_cell5;
};

/**
 * Signals in message ACC_TPDO_SEG3_VOLTS.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_acc_tpdo_seg3_volts_t {
    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg3_volts_cell0;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg3_volts_cell1;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg3_volts_cell2;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg3_volts_cell3;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg3_volts_cell4;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg3_volts_cell5;
};

/**
 * Signals in message ACC_TPDO_SEG3_TEMPS.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_acc_tpdo_seg3_temps_t {
    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg3_temps_cell0;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg3_temps_cell1;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg3_temps_cell2;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg3_temps_cell3;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg3_temps_cell4;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg3_temps_cell5;
};

/**
 * Signals in message ACC_TPDO_SEG4_VOLTS.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_acc_tpdo_seg4_volts_t {
    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg4_volts_cell0;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg4_volts_cell1;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg4_volts_cell2;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg4_volts_cell3;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg4_volts_cell4;

    /**
     * Range: 0..255 (2..4.55 V)
     * Scale: 0.01
     * Offset: 2
     */
    uint8_t acc_seg4_volts_cell5;
};

/**
 * Signals in message ACC_TPDO_SEG4_TEMPS.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_acc_tpdo_seg4_temps_t {
    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg4_temps_cell0;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg4_temps_cell1;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg4_temps_cell2;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg4_temps_cell3;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg4_temps_cell4;

    /**
     * Range: -128..127 (-128..127 C)
     * Scale: 1
     * Offset: 0
     */
    int8_t acc_seg4_temps_cell5;
};

/**
 * Signals in message VDM_GPS_LAT_LONG.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_vdm_gps_lat_long_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t vdm_gps_latitude;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t vdm_gps_longitude;
};

/**
 * Signals in message VDM_GPS_DATA.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_vdm_gps_data_t {
    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t vdm_gps_speed;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t vdm_gps_altitude;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t vdm_gps_true_course;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vdm_gps_satellites_in_use;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vdm_gps_valid1;
};

/**
 * Signals in message VDM_DATE_TIME.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_vdm_date_time_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vdm_gps_valid2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vdm_utc_date_year;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vdm_utc_date_month;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vdm_utc_date_day;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vdm_utc_time_hours;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vdm_utc_time_minutes;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vdm_utc_time_seconds;
};

/**
 * Signals in message VDM_ACCELERATION.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_vdm_acceleration_t {
    /**
     * Range: -
     * Scale: 0.000244141
     * Offset: 0
     */
    int16_t vdm_x_axis_acceleration;

    /**
     * Range: -
     * Scale: 0.000244141
     * Offset: 0
     */
    int16_t vdm_y_axis_acceleration;

    /**
     * Range: -
     * Scale: 0.000244141
     * Offset: 0
     */
    int16_t vdm_z_axis_acceleration;
};

/**
 * Signals in message VDM_YAW_RATE.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_vdm_yaw_rate_t {
    /**
     * Range: -
     * Scale: 0.015258789
     * Offset: 0
     */
    int16_t vdm_x_axis_yaw_rate;

    /**
     * Range: -
     * Scale: 0.015258789
     * Offset: 0
     */
    int16_t vdm_y_axis_yaw_rate;

    /**
     * Range: -
     * Scale: 0.015258789
     * Offset: 0
     */
    int16_t vdm_z_axis_yaw_rate;
};

/**
 * Signals in message ETC_TPDO_STATUS.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_etc_tpdo_status_t {
    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t etc_status_he1;

    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t etc_status_he2;

    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t etc_status_brake_sense_voltage;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t etc_status_pedal_travel;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t etc_status_rtd_button;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t etc_status_rtds;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t etc_status_reverse;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t etc_status_brakelight;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t etc_status_rtd;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t etc_status_implausibility;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t etc_status_ts_active;
};

/**
 * Signals in message PDB_TPDO_POWER_A.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_pdb_tpdo_power_a_t {
    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pdb_power_a_glv_voltage;

    /**
     * Range: 0..255 (0..25.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pdb_power_a_current_shutdown;

    /**
     * Range: 0..255 (0..25.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pdb_power_a_current_acc;

    /**
     * Range: 0..255 (0..25.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pdb_power_a_current_etc;

    /**
     * Range: 0..255 (0..25.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pdb_power_a_current_bps;

    /**
     * Range: 0..255 (0..25.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pdb_power_a_current_tractive;

    /**
     * Range: 0..255 (0..25.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pdb_power_a_current_bspd;
};

/**
 * Signals in message PDB_TPDO_POWER_B.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_pdb_tpdo_power_b_t {
    /**
     * Range: 0..255 (0..25.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pdb_power_b_current_telemetry;

    /**
     * Range: 0..255 (0..25.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pdb_power_b_current_pdb;

    /**
     * Range: 0..255 (0..25.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pdb_power_b_current_dash;

    /**
     * Range: 0..255 (0..25.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pdb_power_b_current_rtml;

    /**
     * Range: 0..255 (0..25.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pdb_power_b_current_extra_1;

    /**
     * Range: 0..255 (0..25.5 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t pdb_power_b_current_extra_2;
};

/**
 * Signals in message TMAIN_TPDO_DATA.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_tmain_tpdo_data_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t tmain_data_brakes_f;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t tmain_data_brakes_r;
};

/**
 * Signals in message TPERIPH_FL_TPDO_DATA.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_tperiph_fl_tpdo_data_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t tperiph_fl_data_wheelspeed;

    /**
     * Range: 0..65535 (0..655.35 mm)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t tperiph_fl_data_sustravel;

    /**
     * Range: -
     * Scale: 1e-07
     * Offset: 0
     */
    int16_t tperiph_fl_data_strain;

    /**
     * Range: 0..255 (0..255 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_fl_data_side_tire_temp;
};

/**
 * Signals in message TPERIPH_FR_TPDO_DATA.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_tperiph_fr_tpdo_data_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t tperiph_fr_data_wheelspeed;

    /**
     * Range: 0..65535 (0..655.35 mm)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t tperiph_fr_data_sustravel;

    /**
     * Range: -
     * Scale: 1e-07
     * Offset: 0
     */
    int16_t tperiph_fr_data_strain;

    /**
     * Range: 0..255 (0..255 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_fr_data_side_tire_temp;
};

/**
 * Signals in message TPERIPH_BL_TPDO_DATA.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_tperiph_bl_tpdo_data_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t tperiph_bl_data_wheelspeed;

    /**
     * Range: 0..65535 (0..655.35 mm)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t tperiph_bl_data_sustravel;

    /**
     * Range: -
     * Scale: 1e-07
     * Offset: 0
     */
    int16_t tperiph_bl_data_strain;

    /**
     * Range: 0..255 (0..255 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_bl_data_side_tire_temp;
};

/**
 * Signals in message TPERIPH_BR_TPDO_DATA.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_tperiph_br_tpdo_data_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t tperiph_br_data_wheelspeed;

    /**
     * Range: 0..65535 (0..655.35 mm)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t tperiph_br_data_sustravel;

    /**
     * Range: -
     * Scale: 1e-07
     * Offset: 0
     */
    int16_t tperiph_br_data_strain;

    /**
     * Range: 0..255 (0..255 C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_br_data_side_tire_temp;
};

/**
 * Signals in message TPERIPH_FL_TPDO_TIRETEMP.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_tperiph_fl_tpdo_tiretemp_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_fl_tiretemp_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_fl_tiretemp_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_fl_tiretemp_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_fl_tiretemp_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_fl_tiretemp_5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_fl_tiretemp_6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_fl_tiretemp_7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_fl_tiretemp_8;
};

/**
 * Signals in message TPERIPH_FR_TPDO_TIRETEMP.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_tperiph_fr_tpdo_tiretemp_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_fr_tiretemp_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_fr_tiretemp_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_fr_tiretemp_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_fr_tiretemp_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_fr_tiretemp_5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_fr_tiretemp_6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_fr_tiretemp_7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_fr_tiretemp_8;
};

/**
 * Signals in message TPERIPH_BL_TPDO_TIRETEMP.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_tperiph_bl_tpdo_tiretemp_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_bl_tiretemp_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_bl_tiretemp_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_bl_tiretemp_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_bl_tiretemp_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_bl_tiretemp_5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_bl_tiretemp_6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_bl_tiretemp_7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_bl_tiretemp_8;
};

/**
 * Signals in message TPERIPH_BR_TPDO_TIRETEMP.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_tperiph_br_tpdo_tiretemp_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_br_tiretemp_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_br_tiretemp_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_br_tiretemp_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_br_tiretemp_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_br_tiretemp_5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_br_tiretemp_6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_br_tiretemp_7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tperiph_br_tiretemp_8;
};

/**
 * Signals in message LSS_COMMAND.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_lss_command_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t command_command_specifier;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t command_mode;
};

/**
 * Signals in message LSS_RESPONSE.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_lss_response_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t response_command_specifier;
};

/**
 * Signals in message SMPC_RPDO_CONTROL.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_smpc_rpdo_control_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t smpc_control_dest_node_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t smpc_control_enable;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t smpc_control_current_10_x_mult;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t smpc_control_evse_override;

    /**
     * Range: 0..65535 (0..65535 mV)
     * Scale: 1
     * Offset: 0
     */
    uint32_t smpc_control_pack_voltage;
};

/**
 * Signals in message SMPC_RPDO_MAX_VOLTAGE_CURRENT.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_smpc_rpdo_max_voltage_current_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t smpc_max_dest_node_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t smpc_max_chrg_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t smpc_max_chrg_current;

    /**
     * Range: 0..255 (0..255 A)
     * Scale: 1
     * Offset: 0
     */
    uint8_t smpc_max_input_evse_override;
};

/**
 * Signals in message SMPC_TPDO_STATUS.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_smpc_tpdo_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t smpc_status_ready;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t smpc_status_charge_complete;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t smpc_status_overtemp_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t smpc_status_overcurrent_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t smpc_status_overvoltage_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t smpc_status_undervoltage_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t smpc_status_internal_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t smpc_status_charging;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t smpc_status_charger_unplugged;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t smpc_status_request_exclusive;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t smpc_status_j1772_disconn;

    /**
     * Range: 0..2704 (0..2704 mV)
     * Scale: 1
     * Offset: 0
     */
    uint32_t smpc_status_voltage_mv;

    /**
     * Range: 0..65535 (0..65535 mA)
     * Scale: 1
     * Offset: 0
     */
    uint16_t smpc_status_current_ma;
};

/**
 * Signals in message SMPC_TPDO_MAX_VOLTAGE_CURRENT.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_smpc_tpdo_max_voltage_current_t {
    /**
     * Range: 0..2704 (0..2704 mV)
     * Scale: 1
     * Offset: 0
     */
    uint32_t smpc_max2_max_voltage_mv;

    /**
     * Range: 0..65535 (0..65535 mA)
     * Scale: 1
     * Offset: 0
     */
    uint16_t smpc_max2_max_current_ma;

    /**
     * Range: 0..255 (0..255 A)
     * Scale: 1
     * Offset: 0
     */
    uint8_t smpc_max2_evse_current;

    /**
     * Range: 0..255 (0..255 A)
     * Scale: 1
     * Offset: 0
     */
    uint8_t smpc_max2_input_curr_lim;
};

/**
 * Signals in message SMPC_TPDO_INPUT_AC.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_smpc_tpdo_input_ac_t {
    /**
     * Range: 0..255 (0..255 Vac)
     * Scale: 1
     * Offset: 0
     */
    uint8_t smpc_input_ac_input_voltage;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t smpc_input_j1772_connected;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t smpc_input_j1772_disconnected;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t smpc_input_j1772_triggered;

    /**
     * Range: 0..65535 (0..65535 mA)
     * Scale: 1
     * Offset: 0
     */
    uint16_t smpc_input_ac_input_current_ma;

    /**
     * Range: 0..255 (0..255 HZ)
     * Scale: 1
     * Offset: 0
     */
    uint8_t smpc_input_ac_input_frequency_hz;

    /**
     * Range: 0..255 (-50..205 C)
     * Scale: 1
     * Offset: -50
     */
    uint8_t smpc_input_max_charger_temp_c;
};

/**
 * Signals in message SMPC_TPDO_SERIAL_PART_NUM.
 *
 * All signal values are as on the CAN bus.
 */
struct CANBus_smpc_tpdo_serial_part_num_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t smpc_ser_part_number;

    /**
     * Range: 0..2704 (0..2704 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t smpc_ser_serial_number;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t smpc_ser_firmware_ver;
};

/**
 * Pack message SYNC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_sync_pack(
    uint8_t *dst_p,
    const struct CANBus_sync_t *src_p,
    size_t size);

/**
 * Unpack message SYNC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_sync_unpack(
    struct CANBus_sync_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SYNC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_sync_init(struct CANBus_sync_t *msg_p);

/**
 * Pack message SME_RPDO_Throttle_Demand.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_sme_rpdo_throttle_demand_pack(
    uint8_t *dst_p,
    const struct CANBus_sme_rpdo_throttle_demand_t *src_p,
    size_t size);

/**
 * Unpack message SME_RPDO_Throttle_Demand.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_sme_rpdo_throttle_demand_unpack(
    struct CANBus_sme_rpdo_throttle_demand_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SME_RPDO_Throttle_Demand.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_sme_rpdo_throttle_demand_init(struct CANBus_sme_rpdo_throttle_demand_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_sme_rpdo_throttle_demand_sme_throtl_torque_demand_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_rpdo_throttle_demand_sme_throtl_torque_demand_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_rpdo_throttle_demand_sme_throtl_torque_demand_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_sme_rpdo_throttle_demand_sme_throtl_max_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_rpdo_throttle_demand_sme_throtl_max_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_rpdo_throttle_demand_sme_throtl_max_speed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_sme_rpdo_throttle_demand_sme_throtl_forward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_rpdo_throttle_demand_sme_throtl_forward_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_rpdo_throttle_demand_sme_throtl_forward_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_sme_rpdo_throttle_demand_sme_throtl_reverse_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_rpdo_throttle_demand_sme_throtl_reverse_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_rpdo_throttle_demand_sme_throtl_reverse_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_sme_rpdo_throttle_demand_sme_throtl_power_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_rpdo_throttle_demand_sme_throtl_power_ready_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_rpdo_throttle_demand_sme_throtl_power_ready_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_rpdo_throttle_demand_sme_throtl_mbb_alive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_rpdo_throttle_demand_sme_throtl_mbb_alive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_rpdo_throttle_demand_sme_throtl_mbb_alive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_bit_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_short_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_short_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_rpdo_throttle_demand_sme_throtl_unused_short_1_is_in_range(uint16_t value);

/**
 * Pack message SME_RPDO_Max_Currents.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_sme_rpdo_max_currents_pack(
    uint8_t *dst_p,
    const struct CANBus_sme_rpdo_max_currents_t *src_p,
    size_t size);

/**
 * Unpack message SME_RPDO_Max_Currents.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_sme_rpdo_max_currents_unpack(
    struct CANBus_sme_rpdo_max_currents_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SME_RPDO_Max_Currents.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_sme_rpdo_max_currents_init(struct CANBus_sme_rpdo_max_currents_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_sme_rpdo_max_currents_sme_currlim_charge_current_lim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_rpdo_max_currents_sme_currlim_charge_current_lim_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_rpdo_max_currents_sme_currlim_charge_current_lim_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_sme_rpdo_max_currents_sme_currlim_discharge_current_lim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_rpdo_max_currents_sme_currlim_discharge_current_lim_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_rpdo_max_currents_sme_currlim_discharge_current_lim_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t CANBus_sme_rpdo_max_currents_sme_currlim_unused_int_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_rpdo_max_currents_sme_currlim_unused_int_1_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_rpdo_max_currents_sme_currlim_unused_int_1_is_in_range(uint32_t value);

/**
 * Pack message SME_TPDO_Torque_speed.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_sme_tpdo_torque_speed_pack(
    uint8_t *dst_p,
    const struct CANBus_sme_tpdo_torque_speed_t *src_p,
    size_t size);

/**
 * Unpack message SME_TPDO_Torque_speed.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_sme_tpdo_torque_speed_unpack(
    struct CANBus_sme_tpdo_torque_speed_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SME_TPDO_Torque_speed.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_sme_tpdo_torque_speed_init(struct CANBus_sme_tpdo_torque_speed_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_sme_tpdo_torque_speed_sme_trqspd_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_torque_speed_sme_trqspd_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_torque_speed_sme_trqspd_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_sme_tpdo_torque_speed_sme_trqspd_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_torque_speed_sme_trqspd_torque_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_torque_speed_sme_trqspd_torque_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_torque_speed_sme_trqspd_soc_low_traction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_torque_speed_sme_trqspd_soc_low_traction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_torque_speed_sme_trqspd_soc_low_traction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_torque_speed_sme_trqspd_soc_low_hydraulic_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_torque_speed_sme_trqspd_soc_low_hydraulic_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_torque_speed_sme_trqspd_soc_low_hydraulic_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_torque_speed_sme_trqspd_reverse_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_torque_speed_sme_trqspd_reverse_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_torque_speed_sme_trqspd_reverse_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_torque_speed_sme_trqspd_forward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_torque_speed_sme_trqspd_forward_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_torque_speed_sme_trqspd_forward_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_torque_speed_sme_trqspd_park_brake_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_torque_speed_sme_trqspd_park_brake_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_torque_speed_sme_trqspd_park_brake_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_torque_speed_sme_trqspd_pedal_brake_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_torque_speed_sme_trqspd_pedal_brake_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_torque_speed_sme_trqspd_pedal_brake_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_torque_speed_sme_trqspd_controller_overtermp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_torque_speed_sme_trqspd_controller_overtermp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_torque_speed_sme_trqspd_controller_overtermp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_torque_speed_sme_trqspd_key_switch_overvolt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_torque_speed_sme_trqspd_key_switch_overvolt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_torque_speed_sme_trqspd_key_switch_overvolt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_torque_speed_sme_trqspd_key_switch_undervolt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_torque_speed_sme_trqspd_key_switch_undervolt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_torque_speed_sme_trqspd_key_switch_undervolt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_torque_speed_sme_trqspd_running_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_torque_speed_sme_trqspd_running_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_torque_speed_sme_trqspd_running_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_torque_speed_sme_trqspd_traction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_torque_speed_sme_trqspd_traction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_torque_speed_sme_trqspd_traction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_torque_speed_sme_trqspd_hydraulic_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_torque_speed_sme_trqspd_hydraulic_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_torque_speed_sme_trqspd_hydraulic_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_torque_speed_sme_trqspd_powering_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_torque_speed_sme_trqspd_powering_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_torque_speed_sme_trqspd_powering_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_torque_speed_sme_trqspd_powering_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_torque_speed_sme_trqspd_powering_ready_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_torque_speed_sme_trqspd_powering_ready_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_torque_speed_sme_trqspd_precharging_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_torque_speed_sme_trqspd_precharging_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_torque_speed_sme_trqspd_precharging_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_torque_speed_sme_trqspd_contactor_closed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_torque_speed_sme_trqspd_contactor_closed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_torque_speed_sme_trqspd_contactor_closed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_sme_tpdo_torque_speed_sme_trqspd_motor_flags_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_torque_speed_sme_trqspd_motor_flags_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_torque_speed_sme_trqspd_motor_flags_is_in_range(uint16_t value);

/**
 * Pack message SME_TPDO_Temperature.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_sme_tpdo_temperature_pack(
    uint8_t *dst_p,
    const struct CANBus_sme_tpdo_temperature_t *src_p,
    size_t size);

/**
 * Unpack message SME_TPDO_Temperature.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_sme_tpdo_temperature_unpack(
    struct CANBus_sme_tpdo_temperature_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SME_TPDO_Temperature.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_sme_tpdo_temperature_init(struct CANBus_sme_tpdo_temperature_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_temperature_sme_temp_motor_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_temperature_sme_temp_motor_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_temperature_sme_temp_motor_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_temperature_sme_temp_controller_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_temperature_sme_temp_controller_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_temperature_sme_temp_controller_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_sme_tpdo_temperature_sme_temp_dc_bus_v_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_temperature_sme_temp_dc_bus_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_temperature_sme_temp_dc_bus_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_temperature_sme_temp_fault_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_temperature_sme_temp_fault_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_temperature_sme_temp_fault_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_sme_tpdo_temperature_sme_temp_fault_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_temperature_sme_temp_fault_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_temperature_sme_temp_fault_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_sme_tpdo_temperature_sme_temp_bus_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_sme_tpdo_temperature_sme_temp_bus_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_sme_tpdo_temperature_sme_temp_bus_current_is_in_range(int16_t value);

/**
 * Pack message ACC_TPDO_STATUS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_acc_tpdo_status_pack(
    uint8_t *dst_p,
    const struct CANBus_acc_tpdo_status_t *src_p,
    size_t size);

/**
 * Unpack message ACC_TPDO_STATUS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_acc_tpdo_status_unpack(
    struct CANBus_acc_tpdo_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_TPDO_STATUS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_acc_tpdo_status_init(struct CANBus_acc_tpdo_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_status_acc_status_bms_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_status_acc_status_bms_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_status_acc_status_bms_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_status_acc_status_imd_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_status_acc_status_imd_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_status_acc_status_imd_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_status_acc_status_shutdown_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_status_acc_status_shutdown_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_status_acc_status_shutdown_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_status_acc_status_precharge_done_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_status_acc_status_precharge_done_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_status_acc_status_precharge_done_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_status_acc_status_precharging_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_status_acc_status_precharging_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_status_acc_status_precharging_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_status_acc_status_charging_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_status_acc_status_charging_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_status_acc_status_charging_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_status_acc_status_cell_too_low_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_status_acc_status_cell_too_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_status_acc_status_cell_too_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_status_acc_status_cell_too_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_status_acc_status_cell_too_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_status_acc_status_cell_too_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_status_acc_status_temp_too_low_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_status_acc_status_temp_too_low_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_status_acc_status_temp_too_low_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_status_acc_status_temp_too_high_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_status_acc_status_temp_too_high_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_status_acc_status_temp_too_high_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_status_acc_status_temp_too_high_crg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_status_acc_status_temp_too_high_crg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_status_acc_status_temp_too_high_crg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_status_acc_status_balancing_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_status_acc_status_balancing_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_status_acc_status_balancing_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_acc_tpdo_status_acc_status_glv_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_status_acc_status_glv_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_status_acc_status_glv_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t CANBus_acc_tpdo_status_acc_status_cell_fault_index_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_status_acc_status_cell_fault_index_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_status_acc_status_cell_fault_index_is_in_range(uint32_t value);

/**
 * Pack message ACC_TPDO_POWER.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_acc_tpdo_power_pack(
    uint8_t *dst_p,
    const struct CANBus_acc_tpdo_power_t *src_p,
    size_t size);

/**
 * Unpack message ACC_TPDO_POWER.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_acc_tpdo_power_unpack(
    struct CANBus_acc_tpdo_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_TPDO_POWER.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_acc_tpdo_power_init(struct CANBus_acc_tpdo_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_acc_tpdo_power_acc_power_pack_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_power_acc_power_pack_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_power_acc_power_pack_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_power_acc_power_soc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_power_acc_power_soc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_power_acc_power_soc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_acc_tpdo_power_acc_power_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_power_acc_power_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_power_acc_power_current_is_in_range(int16_t value);

/**
 * Pack message ACC_TPDO_SEG0_VOLTS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_acc_tpdo_seg0_volts_pack(
    uint8_t *dst_p,
    const struct CANBus_acc_tpdo_seg0_volts_t *src_p,
    size_t size);

/**
 * Unpack message ACC_TPDO_SEG0_VOLTS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_acc_tpdo_seg0_volts_unpack(
    struct CANBus_acc_tpdo_seg0_volts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_TPDO_SEG0_VOLTS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_acc_tpdo_seg0_volts_init(struct CANBus_acc_tpdo_seg0_volts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg0_volts_acc_seg0_volts_cell0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg0_volts_acc_seg0_volts_cell0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg0_volts_acc_seg0_volts_cell0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg0_volts_acc_seg0_volts_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg0_volts_acc_seg0_volts_cell1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg0_volts_acc_seg0_volts_cell1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg0_volts_acc_seg0_volts_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg0_volts_acc_seg0_volts_cell2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg0_volts_acc_seg0_volts_cell2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg0_volts_acc_seg0_volts_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg0_volts_acc_seg0_volts_cell3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg0_volts_acc_seg0_volts_cell3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg0_volts_acc_seg0_volts_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg0_volts_acc_seg0_volts_cell4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg0_volts_acc_seg0_volts_cell4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg0_volts_acc_seg0_volts_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg0_volts_acc_seg0_volts_cell5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg0_volts_acc_seg0_volts_cell5_is_in_range(uint8_t value);

/**
 * Pack message ACC_TPDO_SEG0_TEMPS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_acc_tpdo_seg0_temps_pack(
    uint8_t *dst_p,
    const struct CANBus_acc_tpdo_seg0_temps_t *src_p,
    size_t size);

/**
 * Unpack message ACC_TPDO_SEG0_TEMPS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_acc_tpdo_seg0_temps_unpack(
    struct CANBus_acc_tpdo_seg0_temps_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_TPDO_SEG0_TEMPS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_acc_tpdo_seg0_temps_init(struct CANBus_acc_tpdo_seg0_temps_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg0_temps_acc_seg0_temps_cell0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg0_temps_acc_seg0_temps_cell0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg0_temps_acc_seg0_temps_cell0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg0_temps_acc_seg0_temps_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg0_temps_acc_seg0_temps_cell1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg0_temps_acc_seg0_temps_cell1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg0_temps_acc_seg0_temps_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg0_temps_acc_seg0_temps_cell2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg0_temps_acc_seg0_temps_cell2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg0_temps_acc_seg0_temps_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg0_temps_acc_seg0_temps_cell3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg0_temps_acc_seg0_temps_cell3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg0_temps_acc_seg0_temps_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg0_temps_acc_seg0_temps_cell4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg0_temps_acc_seg0_temps_cell4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg0_temps_acc_seg0_temps_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg0_temps_acc_seg0_temps_cell5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg0_temps_acc_seg0_temps_cell5_is_in_range(int8_t value);

/**
 * Pack message ACC_TPDO_SEG1_VOLTS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_acc_tpdo_seg1_volts_pack(
    uint8_t *dst_p,
    const struct CANBus_acc_tpdo_seg1_volts_t *src_p,
    size_t size);

/**
 * Unpack message ACC_TPDO_SEG1_VOLTS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_acc_tpdo_seg1_volts_unpack(
    struct CANBus_acc_tpdo_seg1_volts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_TPDO_SEG1_VOLTS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_acc_tpdo_seg1_volts_init(struct CANBus_acc_tpdo_seg1_volts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg1_volts_acc_seg1_volts_cell0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg1_volts_acc_seg1_volts_cell0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg1_volts_acc_seg1_volts_cell0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg1_volts_acc_seg1_volts_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg1_volts_acc_seg1_volts_cell1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg1_volts_acc_seg1_volts_cell1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg1_volts_acc_seg1_volts_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg1_volts_acc_seg1_volts_cell2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg1_volts_acc_seg1_volts_cell2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg1_volts_acc_seg1_volts_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg1_volts_acc_seg1_volts_cell3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg1_volts_acc_seg1_volts_cell3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg1_volts_acc_seg1_volts_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg1_volts_acc_seg1_volts_cell4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg1_volts_acc_seg1_volts_cell4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg1_volts_acc_seg1_volts_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg1_volts_acc_seg1_volts_cell5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg1_volts_acc_seg1_volts_cell5_is_in_range(uint8_t value);

/**
 * Pack message ACC_TPDO_SEG1_TEMPS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_acc_tpdo_seg1_temps_pack(
    uint8_t *dst_p,
    const struct CANBus_acc_tpdo_seg1_temps_t *src_p,
    size_t size);

/**
 * Unpack message ACC_TPDO_SEG1_TEMPS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_acc_tpdo_seg1_temps_unpack(
    struct CANBus_acc_tpdo_seg1_temps_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_TPDO_SEG1_TEMPS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_acc_tpdo_seg1_temps_init(struct CANBus_acc_tpdo_seg1_temps_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg1_temps_acc_seg1_temps_cell0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg1_temps_acc_seg1_temps_cell0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg1_temps_acc_seg1_temps_cell0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg1_temps_acc_seg1_temps_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg1_temps_acc_seg1_temps_cell1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg1_temps_acc_seg1_temps_cell1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg1_temps_acc_seg1_temps_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg1_temps_acc_seg1_temps_cell2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg1_temps_acc_seg1_temps_cell2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg1_temps_acc_seg1_temps_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg1_temps_acc_seg1_temps_cell3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg1_temps_acc_seg1_temps_cell3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg1_temps_acc_seg1_temps_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg1_temps_acc_seg1_temps_cell4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg1_temps_acc_seg1_temps_cell4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg1_temps_acc_seg1_temps_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg1_temps_acc_seg1_temps_cell5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg1_temps_acc_seg1_temps_cell5_is_in_range(int8_t value);

/**
 * Pack message ACC_TPDO_SEG2_VOLTS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_acc_tpdo_seg2_volts_pack(
    uint8_t *dst_p,
    const struct CANBus_acc_tpdo_seg2_volts_t *src_p,
    size_t size);

/**
 * Unpack message ACC_TPDO_SEG2_VOLTS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_acc_tpdo_seg2_volts_unpack(
    struct CANBus_acc_tpdo_seg2_volts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_TPDO_SEG2_VOLTS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_acc_tpdo_seg2_volts_init(struct CANBus_acc_tpdo_seg2_volts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg2_volts_acc_seg2_volts_cell0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg2_volts_acc_seg2_volts_cell0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg2_volts_acc_seg2_volts_cell0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg2_volts_acc_seg2_volts_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg2_volts_acc_seg2_volts_cell1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg2_volts_acc_seg2_volts_cell1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg2_volts_acc_seg2_volts_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg2_volts_acc_seg2_volts_cell2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg2_volts_acc_seg2_volts_cell2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg2_volts_acc_seg2_volts_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg2_volts_acc_seg2_volts_cell3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg2_volts_acc_seg2_volts_cell3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg2_volts_acc_seg2_volts_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg2_volts_acc_seg2_volts_cell4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg2_volts_acc_seg2_volts_cell4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg2_volts_acc_seg2_volts_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg2_volts_acc_seg2_volts_cell5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg2_volts_acc_seg2_volts_cell5_is_in_range(uint8_t value);

/**
 * Pack message ACC_TPDO_SEG2_TEMPS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_acc_tpdo_seg2_temps_pack(
    uint8_t *dst_p,
    const struct CANBus_acc_tpdo_seg2_temps_t *src_p,
    size_t size);

/**
 * Unpack message ACC_TPDO_SEG2_TEMPS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_acc_tpdo_seg2_temps_unpack(
    struct CANBus_acc_tpdo_seg2_temps_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_TPDO_SEG2_TEMPS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_acc_tpdo_seg2_temps_init(struct CANBus_acc_tpdo_seg2_temps_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg2_temps_acc_seg2_temps_cell0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg2_temps_acc_seg2_temps_cell0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg2_temps_acc_seg2_temps_cell0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg2_temps_acc_seg2_temps_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg2_temps_acc_seg2_temps_cell1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg2_temps_acc_seg2_temps_cell1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg2_temps_acc_seg2_temps_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg2_temps_acc_seg2_temps_cell2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg2_temps_acc_seg2_temps_cell2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg2_temps_acc_seg2_temps_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg2_temps_acc_seg2_temps_cell3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg2_temps_acc_seg2_temps_cell3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg2_temps_acc_seg2_temps_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg2_temps_acc_seg2_temps_cell4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg2_temps_acc_seg2_temps_cell4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg2_temps_acc_seg2_temps_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg2_temps_acc_seg2_temps_cell5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg2_temps_acc_seg2_temps_cell5_is_in_range(int8_t value);

/**
 * Pack message ACC_TPDO_SEG3_VOLTS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_acc_tpdo_seg3_volts_pack(
    uint8_t *dst_p,
    const struct CANBus_acc_tpdo_seg3_volts_t *src_p,
    size_t size);

/**
 * Unpack message ACC_TPDO_SEG3_VOLTS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_acc_tpdo_seg3_volts_unpack(
    struct CANBus_acc_tpdo_seg3_volts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_TPDO_SEG3_VOLTS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_acc_tpdo_seg3_volts_init(struct CANBus_acc_tpdo_seg3_volts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg3_volts_acc_seg3_volts_cell0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg3_volts_acc_seg3_volts_cell0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg3_volts_acc_seg3_volts_cell0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg3_volts_acc_seg3_volts_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg3_volts_acc_seg3_volts_cell1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg3_volts_acc_seg3_volts_cell1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg3_volts_acc_seg3_volts_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg3_volts_acc_seg3_volts_cell2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg3_volts_acc_seg3_volts_cell2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg3_volts_acc_seg3_volts_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg3_volts_acc_seg3_volts_cell3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg3_volts_acc_seg3_volts_cell3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg3_volts_acc_seg3_volts_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg3_volts_acc_seg3_volts_cell4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg3_volts_acc_seg3_volts_cell4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg3_volts_acc_seg3_volts_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg3_volts_acc_seg3_volts_cell5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg3_volts_acc_seg3_volts_cell5_is_in_range(uint8_t value);

/**
 * Pack message ACC_TPDO_SEG3_TEMPS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_acc_tpdo_seg3_temps_pack(
    uint8_t *dst_p,
    const struct CANBus_acc_tpdo_seg3_temps_t *src_p,
    size_t size);

/**
 * Unpack message ACC_TPDO_SEG3_TEMPS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_acc_tpdo_seg3_temps_unpack(
    struct CANBus_acc_tpdo_seg3_temps_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_TPDO_SEG3_TEMPS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_acc_tpdo_seg3_temps_init(struct CANBus_acc_tpdo_seg3_temps_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg3_temps_acc_seg3_temps_cell0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg3_temps_acc_seg3_temps_cell0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg3_temps_acc_seg3_temps_cell0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg3_temps_acc_seg3_temps_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg3_temps_acc_seg3_temps_cell1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg3_temps_acc_seg3_temps_cell1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg3_temps_acc_seg3_temps_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg3_temps_acc_seg3_temps_cell2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg3_temps_acc_seg3_temps_cell2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg3_temps_acc_seg3_temps_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg3_temps_acc_seg3_temps_cell3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg3_temps_acc_seg3_temps_cell3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg3_temps_acc_seg3_temps_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg3_temps_acc_seg3_temps_cell4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg3_temps_acc_seg3_temps_cell4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg3_temps_acc_seg3_temps_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg3_temps_acc_seg3_temps_cell5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg3_temps_acc_seg3_temps_cell5_is_in_range(int8_t value);

/**
 * Pack message ACC_TPDO_SEG4_VOLTS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_acc_tpdo_seg4_volts_pack(
    uint8_t *dst_p,
    const struct CANBus_acc_tpdo_seg4_volts_t *src_p,
    size_t size);

/**
 * Unpack message ACC_TPDO_SEG4_VOLTS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_acc_tpdo_seg4_volts_unpack(
    struct CANBus_acc_tpdo_seg4_volts_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_TPDO_SEG4_VOLTS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_acc_tpdo_seg4_volts_init(struct CANBus_acc_tpdo_seg4_volts_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg4_volts_acc_seg4_volts_cell0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg4_volts_acc_seg4_volts_cell0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg4_volts_acc_seg4_volts_cell0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg4_volts_acc_seg4_volts_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg4_volts_acc_seg4_volts_cell1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg4_volts_acc_seg4_volts_cell1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg4_volts_acc_seg4_volts_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg4_volts_acc_seg4_volts_cell2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg4_volts_acc_seg4_volts_cell2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg4_volts_acc_seg4_volts_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg4_volts_acc_seg4_volts_cell3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg4_volts_acc_seg4_volts_cell3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg4_volts_acc_seg4_volts_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg4_volts_acc_seg4_volts_cell4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg4_volts_acc_seg4_volts_cell4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_acc_tpdo_seg4_volts_acc_seg4_volts_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg4_volts_acc_seg4_volts_cell5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg4_volts_acc_seg4_volts_cell5_is_in_range(uint8_t value);

/**
 * Pack message ACC_TPDO_SEG4_TEMPS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_acc_tpdo_seg4_temps_pack(
    uint8_t *dst_p,
    const struct CANBus_acc_tpdo_seg4_temps_t *src_p,
    size_t size);

/**
 * Unpack message ACC_TPDO_SEG4_TEMPS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_acc_tpdo_seg4_temps_unpack(
    struct CANBus_acc_tpdo_seg4_temps_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ACC_TPDO_SEG4_TEMPS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_acc_tpdo_seg4_temps_init(struct CANBus_acc_tpdo_seg4_temps_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg4_temps_acc_seg4_temps_cell0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg4_temps_acc_seg4_temps_cell0_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg4_temps_acc_seg4_temps_cell0_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg4_temps_acc_seg4_temps_cell1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg4_temps_acc_seg4_temps_cell1_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg4_temps_acc_seg4_temps_cell1_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg4_temps_acc_seg4_temps_cell2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg4_temps_acc_seg4_temps_cell2_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg4_temps_acc_seg4_temps_cell2_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg4_temps_acc_seg4_temps_cell3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg4_temps_acc_seg4_temps_cell3_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg4_temps_acc_seg4_temps_cell3_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg4_temps_acc_seg4_temps_cell4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg4_temps_acc_seg4_temps_cell4_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg4_temps_acc_seg4_temps_cell4_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_acc_tpdo_seg4_temps_acc_seg4_temps_cell5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_acc_tpdo_seg4_temps_acc_seg4_temps_cell5_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_acc_tpdo_seg4_temps_acc_seg4_temps_cell5_is_in_range(int8_t value);

/**
 * Pack message VDM_GPS_LAT_LONG.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_vdm_gps_lat_long_pack(
    uint8_t *dst_p,
    const struct CANBus_vdm_gps_lat_long_t *src_p,
    size_t size);

/**
 * Unpack message VDM_GPS_LAT_LONG.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_vdm_gps_lat_long_unpack(
    struct CANBus_vdm_gps_lat_long_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VDM_GPS_LAT_LONG.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_vdm_gps_lat_long_init(struct CANBus_vdm_gps_lat_long_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t CANBus_vdm_gps_lat_long_vdm_gps_latitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_gps_lat_long_vdm_gps_latitude_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_gps_lat_long_vdm_gps_latitude_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t CANBus_vdm_gps_lat_long_vdm_gps_longitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_gps_lat_long_vdm_gps_longitude_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_gps_lat_long_vdm_gps_longitude_is_in_range(int32_t value);

/**
 * Pack message VDM_GPS_DATA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_vdm_gps_data_pack(
    uint8_t *dst_p,
    const struct CANBus_vdm_gps_data_t *src_p,
    size_t size);

/**
 * Unpack message VDM_GPS_DATA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_vdm_gps_data_unpack(
    struct CANBus_vdm_gps_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VDM_GPS_DATA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_vdm_gps_data_init(struct CANBus_vdm_gps_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_vdm_gps_data_vdm_gps_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_gps_data_vdm_gps_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_gps_data_vdm_gps_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_vdm_gps_data_vdm_gps_altitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_gps_data_vdm_gps_altitude_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_gps_data_vdm_gps_altitude_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_vdm_gps_data_vdm_gps_true_course_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_gps_data_vdm_gps_true_course_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_gps_data_vdm_gps_true_course_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_vdm_gps_data_vdm_gps_satellites_in_use_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_gps_data_vdm_gps_satellites_in_use_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_gps_data_vdm_gps_satellites_in_use_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_vdm_gps_data_vdm_gps_valid1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_gps_data_vdm_gps_valid1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_gps_data_vdm_gps_valid1_is_in_range(uint8_t value);

/**
 * Pack message VDM_DATE_TIME.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_vdm_date_time_pack(
    uint8_t *dst_p,
    const struct CANBus_vdm_date_time_t *src_p,
    size_t size);

/**
 * Unpack message VDM_DATE_TIME.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_vdm_date_time_unpack(
    struct CANBus_vdm_date_time_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VDM_DATE_TIME.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_vdm_date_time_init(struct CANBus_vdm_date_time_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_vdm_date_time_vdm_gps_valid2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_date_time_vdm_gps_valid2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_date_time_vdm_gps_valid2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_vdm_date_time_vdm_utc_date_year_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_date_time_vdm_utc_date_year_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_date_time_vdm_utc_date_year_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_vdm_date_time_vdm_utc_date_month_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_date_time_vdm_utc_date_month_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_date_time_vdm_utc_date_month_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_vdm_date_time_vdm_utc_date_day_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_date_time_vdm_utc_date_day_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_date_time_vdm_utc_date_day_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_vdm_date_time_vdm_utc_time_hours_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_date_time_vdm_utc_time_hours_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_date_time_vdm_utc_time_hours_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_vdm_date_time_vdm_utc_time_minutes_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_date_time_vdm_utc_time_minutes_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_date_time_vdm_utc_time_minutes_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_vdm_date_time_vdm_utc_time_seconds_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_date_time_vdm_utc_time_seconds_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_date_time_vdm_utc_time_seconds_is_in_range(uint8_t value);

/**
 * Pack message VDM_ACCELERATION.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_vdm_acceleration_pack(
    uint8_t *dst_p,
    const struct CANBus_vdm_acceleration_t *src_p,
    size_t size);

/**
 * Unpack message VDM_ACCELERATION.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_vdm_acceleration_unpack(
    struct CANBus_vdm_acceleration_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VDM_ACCELERATION.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_vdm_acceleration_init(struct CANBus_vdm_acceleration_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_vdm_acceleration_vdm_x_axis_acceleration_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_acceleration_vdm_x_axis_acceleration_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_acceleration_vdm_x_axis_acceleration_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_vdm_acceleration_vdm_y_axis_acceleration_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_acceleration_vdm_y_axis_acceleration_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_acceleration_vdm_y_axis_acceleration_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_vdm_acceleration_vdm_z_axis_acceleration_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_acceleration_vdm_z_axis_acceleration_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_acceleration_vdm_z_axis_acceleration_is_in_range(int16_t value);

/**
 * Pack message VDM_YAW_RATE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_vdm_yaw_rate_pack(
    uint8_t *dst_p,
    const struct CANBus_vdm_yaw_rate_t *src_p,
    size_t size);

/**
 * Unpack message VDM_YAW_RATE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_vdm_yaw_rate_unpack(
    struct CANBus_vdm_yaw_rate_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from VDM_YAW_RATE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_vdm_yaw_rate_init(struct CANBus_vdm_yaw_rate_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_vdm_yaw_rate_vdm_x_axis_yaw_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_yaw_rate_vdm_x_axis_yaw_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_yaw_rate_vdm_x_axis_yaw_rate_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_vdm_yaw_rate_vdm_y_axis_yaw_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_yaw_rate_vdm_y_axis_yaw_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_yaw_rate_vdm_y_axis_yaw_rate_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_vdm_yaw_rate_vdm_z_axis_yaw_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_vdm_yaw_rate_vdm_z_axis_yaw_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_vdm_yaw_rate_vdm_z_axis_yaw_rate_is_in_range(int16_t value);

/**
 * Pack message ETC_TPDO_STATUS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_etc_tpdo_status_pack(
    uint8_t *dst_p,
    const struct CANBus_etc_tpdo_status_t *src_p,
    size_t size);

/**
 * Unpack message ETC_TPDO_STATUS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_etc_tpdo_status_unpack(
    struct CANBus_etc_tpdo_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ETC_TPDO_STATUS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_etc_tpdo_status_init(struct CANBus_etc_tpdo_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_etc_tpdo_status_etc_status_he1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_etc_tpdo_status_etc_status_he1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_etc_tpdo_status_etc_status_he1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_etc_tpdo_status_etc_status_he2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_etc_tpdo_status_etc_status_he2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_etc_tpdo_status_etc_status_he2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_etc_tpdo_status_etc_status_brake_sense_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_etc_tpdo_status_etc_status_brake_sense_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_etc_tpdo_status_etc_status_brake_sense_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_etc_tpdo_status_etc_status_pedal_travel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_etc_tpdo_status_etc_status_pedal_travel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_etc_tpdo_status_etc_status_pedal_travel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_etc_tpdo_status_etc_status_rtd_button_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_etc_tpdo_status_etc_status_rtd_button_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_etc_tpdo_status_etc_status_rtd_button_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_etc_tpdo_status_etc_status_rtds_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_etc_tpdo_status_etc_status_rtds_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_etc_tpdo_status_etc_status_rtds_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_etc_tpdo_status_etc_status_reverse_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_etc_tpdo_status_etc_status_reverse_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_etc_tpdo_status_etc_status_reverse_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_etc_tpdo_status_etc_status_brakelight_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_etc_tpdo_status_etc_status_brakelight_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_etc_tpdo_status_etc_status_brakelight_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_etc_tpdo_status_etc_status_rtd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_etc_tpdo_status_etc_status_rtd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_etc_tpdo_status_etc_status_rtd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_etc_tpdo_status_etc_status_implausibility_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_etc_tpdo_status_etc_status_implausibility_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_etc_tpdo_status_etc_status_implausibility_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_etc_tpdo_status_etc_status_ts_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_etc_tpdo_status_etc_status_ts_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_etc_tpdo_status_etc_status_ts_active_is_in_range(uint8_t value);

/**
 * Pack message PDB_TPDO_POWER_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_pdb_tpdo_power_a_pack(
    uint8_t *dst_p,
    const struct CANBus_pdb_tpdo_power_a_t *src_p,
    size_t size);

/**
 * Unpack message PDB_TPDO_POWER_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_pdb_tpdo_power_a_unpack(
    struct CANBus_pdb_tpdo_power_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PDB_TPDO_POWER_A.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_pdb_tpdo_power_a_init(struct CANBus_pdb_tpdo_power_a_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_pdb_tpdo_power_a_pdb_power_a_glv_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_pdb_tpdo_power_a_pdb_power_a_glv_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_pdb_tpdo_power_a_pdb_power_a_glv_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_pdb_tpdo_power_a_pdb_power_a_current_shutdown_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_pdb_tpdo_power_a_pdb_power_a_current_shutdown_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_pdb_tpdo_power_a_pdb_power_a_current_shutdown_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_pdb_tpdo_power_a_pdb_power_a_current_acc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_pdb_tpdo_power_a_pdb_power_a_current_acc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_pdb_tpdo_power_a_pdb_power_a_current_acc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_pdb_tpdo_power_a_pdb_power_a_current_etc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_pdb_tpdo_power_a_pdb_power_a_current_etc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_pdb_tpdo_power_a_pdb_power_a_current_etc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_pdb_tpdo_power_a_pdb_power_a_current_bps_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_pdb_tpdo_power_a_pdb_power_a_current_bps_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_pdb_tpdo_power_a_pdb_power_a_current_bps_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_pdb_tpdo_power_a_pdb_power_a_current_tractive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_pdb_tpdo_power_a_pdb_power_a_current_tractive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_pdb_tpdo_power_a_pdb_power_a_current_tractive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_pdb_tpdo_power_a_pdb_power_a_current_bspd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_pdb_tpdo_power_a_pdb_power_a_current_bspd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_pdb_tpdo_power_a_pdb_power_a_current_bspd_is_in_range(uint8_t value);

/**
 * Pack message PDB_TPDO_POWER_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_pdb_tpdo_power_b_pack(
    uint8_t *dst_p,
    const struct CANBus_pdb_tpdo_power_b_t *src_p,
    size_t size);

/**
 * Unpack message PDB_TPDO_POWER_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_pdb_tpdo_power_b_unpack(
    struct CANBus_pdb_tpdo_power_b_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PDB_TPDO_POWER_B.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_pdb_tpdo_power_b_init(struct CANBus_pdb_tpdo_power_b_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_pdb_tpdo_power_b_pdb_power_b_current_telemetry_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_pdb_tpdo_power_b_pdb_power_b_current_telemetry_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_pdb_tpdo_power_b_pdb_power_b_current_telemetry_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_pdb_tpdo_power_b_pdb_power_b_current_pdb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_pdb_tpdo_power_b_pdb_power_b_current_pdb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_pdb_tpdo_power_b_pdb_power_b_current_pdb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_pdb_tpdo_power_b_pdb_power_b_current_dash_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_pdb_tpdo_power_b_pdb_power_b_current_dash_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_pdb_tpdo_power_b_pdb_power_b_current_dash_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_pdb_tpdo_power_b_pdb_power_b_current_rtml_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_pdb_tpdo_power_b_pdb_power_b_current_rtml_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_pdb_tpdo_power_b_pdb_power_b_current_rtml_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_pdb_tpdo_power_b_pdb_power_b_current_extra_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_pdb_tpdo_power_b_pdb_power_b_current_extra_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_pdb_tpdo_power_b_pdb_power_b_current_extra_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_pdb_tpdo_power_b_pdb_power_b_current_extra_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_pdb_tpdo_power_b_pdb_power_b_current_extra_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_pdb_tpdo_power_b_pdb_power_b_current_extra_2_is_in_range(uint8_t value);

/**
 * Pack message TMAIN_TPDO_DATA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_tmain_tpdo_data_pack(
    uint8_t *dst_p,
    const struct CANBus_tmain_tpdo_data_t *src_p,
    size_t size);

/**
 * Unpack message TMAIN_TPDO_DATA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_tmain_tpdo_data_unpack(
    struct CANBus_tmain_tpdo_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TMAIN_TPDO_DATA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_tmain_tpdo_data_init(struct CANBus_tmain_tpdo_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_tmain_tpdo_data_tmain_data_brakes_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tmain_tpdo_data_tmain_data_brakes_f_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tmain_tpdo_data_tmain_data_brakes_f_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_tmain_tpdo_data_tmain_data_brakes_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tmain_tpdo_data_tmain_data_brakes_r_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tmain_tpdo_data_tmain_data_brakes_r_is_in_range(uint16_t value);

/**
 * Pack message TPERIPH_FL_TPDO_DATA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_tperiph_fl_tpdo_data_pack(
    uint8_t *dst_p,
    const struct CANBus_tperiph_fl_tpdo_data_t *src_p,
    size_t size);

/**
 * Unpack message TPERIPH_FL_TPDO_DATA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_tperiph_fl_tpdo_data_unpack(
    struct CANBus_tperiph_fl_tpdo_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TPERIPH_FL_TPDO_DATA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_tperiph_fl_tpdo_data_init(struct CANBus_tperiph_fl_tpdo_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_tperiph_fl_tpdo_data_tperiph_fl_data_wheelspeed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fl_tpdo_data_tperiph_fl_data_wheelspeed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fl_tpdo_data_tperiph_fl_data_wheelspeed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_tperiph_fl_tpdo_data_tperiph_fl_data_sustravel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fl_tpdo_data_tperiph_fl_data_sustravel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fl_tpdo_data_tperiph_fl_data_sustravel_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_tperiph_fl_tpdo_data_tperiph_fl_data_strain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fl_tpdo_data_tperiph_fl_data_strain_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fl_tpdo_data_tperiph_fl_data_strain_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_fl_tpdo_data_tperiph_fl_data_side_tire_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fl_tpdo_data_tperiph_fl_data_side_tire_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fl_tpdo_data_tperiph_fl_data_side_tire_temp_is_in_range(uint8_t value);

/**
 * Pack message TPERIPH_FR_TPDO_DATA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_tperiph_fr_tpdo_data_pack(
    uint8_t *dst_p,
    const struct CANBus_tperiph_fr_tpdo_data_t *src_p,
    size_t size);

/**
 * Unpack message TPERIPH_FR_TPDO_DATA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_tperiph_fr_tpdo_data_unpack(
    struct CANBus_tperiph_fr_tpdo_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TPERIPH_FR_TPDO_DATA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_tperiph_fr_tpdo_data_init(struct CANBus_tperiph_fr_tpdo_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_tperiph_fr_tpdo_data_tperiph_fr_data_wheelspeed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fr_tpdo_data_tperiph_fr_data_wheelspeed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fr_tpdo_data_tperiph_fr_data_wheelspeed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_tperiph_fr_tpdo_data_tperiph_fr_data_sustravel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fr_tpdo_data_tperiph_fr_data_sustravel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fr_tpdo_data_tperiph_fr_data_sustravel_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_tperiph_fr_tpdo_data_tperiph_fr_data_strain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fr_tpdo_data_tperiph_fr_data_strain_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fr_tpdo_data_tperiph_fr_data_strain_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_fr_tpdo_data_tperiph_fr_data_side_tire_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fr_tpdo_data_tperiph_fr_data_side_tire_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fr_tpdo_data_tperiph_fr_data_side_tire_temp_is_in_range(uint8_t value);

/**
 * Pack message TPERIPH_BL_TPDO_DATA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_tperiph_bl_tpdo_data_pack(
    uint8_t *dst_p,
    const struct CANBus_tperiph_bl_tpdo_data_t *src_p,
    size_t size);

/**
 * Unpack message TPERIPH_BL_TPDO_DATA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_tperiph_bl_tpdo_data_unpack(
    struct CANBus_tperiph_bl_tpdo_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TPERIPH_BL_TPDO_DATA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_tperiph_bl_tpdo_data_init(struct CANBus_tperiph_bl_tpdo_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_tperiph_bl_tpdo_data_tperiph_bl_data_wheelspeed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_bl_tpdo_data_tperiph_bl_data_wheelspeed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_bl_tpdo_data_tperiph_bl_data_wheelspeed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_tperiph_bl_tpdo_data_tperiph_bl_data_sustravel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_bl_tpdo_data_tperiph_bl_data_sustravel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_bl_tpdo_data_tperiph_bl_data_sustravel_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_tperiph_bl_tpdo_data_tperiph_bl_data_strain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_bl_tpdo_data_tperiph_bl_data_strain_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_bl_tpdo_data_tperiph_bl_data_strain_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_bl_tpdo_data_tperiph_bl_data_side_tire_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_bl_tpdo_data_tperiph_bl_data_side_tire_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_bl_tpdo_data_tperiph_bl_data_side_tire_temp_is_in_range(uint8_t value);

/**
 * Pack message TPERIPH_BR_TPDO_DATA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_tperiph_br_tpdo_data_pack(
    uint8_t *dst_p,
    const struct CANBus_tperiph_br_tpdo_data_t *src_p,
    size_t size);

/**
 * Unpack message TPERIPH_BR_TPDO_DATA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_tperiph_br_tpdo_data_unpack(
    struct CANBus_tperiph_br_tpdo_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TPERIPH_BR_TPDO_DATA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_tperiph_br_tpdo_data_init(struct CANBus_tperiph_br_tpdo_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_tperiph_br_tpdo_data_tperiph_br_data_wheelspeed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_br_tpdo_data_tperiph_br_data_wheelspeed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_br_tpdo_data_tperiph_br_data_wheelspeed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_tperiph_br_tpdo_data_tperiph_br_data_sustravel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_br_tpdo_data_tperiph_br_data_sustravel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_br_tpdo_data_tperiph_br_data_sustravel_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t CANBus_tperiph_br_tpdo_data_tperiph_br_data_strain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_br_tpdo_data_tperiph_br_data_strain_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_br_tpdo_data_tperiph_br_data_strain_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_br_tpdo_data_tperiph_br_data_side_tire_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_br_tpdo_data_tperiph_br_data_side_tire_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_br_tpdo_data_tperiph_br_data_side_tire_temp_is_in_range(uint8_t value);

/**
 * Pack message TPERIPH_FL_TPDO_TIRETEMP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_tperiph_fl_tpdo_tiretemp_pack(
    uint8_t *dst_p,
    const struct CANBus_tperiph_fl_tpdo_tiretemp_t *src_p,
    size_t size);

/**
 * Unpack message TPERIPH_FL_TPDO_TIRETEMP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_tperiph_fl_tpdo_tiretemp_unpack(
    struct CANBus_tperiph_fl_tpdo_tiretemp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TPERIPH_FL_TPDO_TIRETEMP.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_tperiph_fl_tpdo_tiretemp_init(struct CANBus_tperiph_fl_tpdo_tiretemp_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fl_tpdo_tiretemp_tperiph_fl_tiretemp_8_is_in_range(uint8_t value);

/**
 * Pack message TPERIPH_FR_TPDO_TIRETEMP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_tperiph_fr_tpdo_tiretemp_pack(
    uint8_t *dst_p,
    const struct CANBus_tperiph_fr_tpdo_tiretemp_t *src_p,
    size_t size);

/**
 * Unpack message TPERIPH_FR_TPDO_TIRETEMP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_tperiph_fr_tpdo_tiretemp_unpack(
    struct CANBus_tperiph_fr_tpdo_tiretemp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TPERIPH_FR_TPDO_TIRETEMP.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_tperiph_fr_tpdo_tiretemp_init(struct CANBus_tperiph_fr_tpdo_tiretemp_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_fr_tpdo_tiretemp_tperiph_fr_tiretemp_8_is_in_range(uint8_t value);

/**
 * Pack message TPERIPH_BL_TPDO_TIRETEMP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_tperiph_bl_tpdo_tiretemp_pack(
    uint8_t *dst_p,
    const struct CANBus_tperiph_bl_tpdo_tiretemp_t *src_p,
    size_t size);

/**
 * Unpack message TPERIPH_BL_TPDO_TIRETEMP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_tperiph_bl_tpdo_tiretemp_unpack(
    struct CANBus_tperiph_bl_tpdo_tiretemp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TPERIPH_BL_TPDO_TIRETEMP.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_tperiph_bl_tpdo_tiretemp_init(struct CANBus_tperiph_bl_tpdo_tiretemp_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_bl_tpdo_tiretemp_tperiph_bl_tiretemp_8_is_in_range(uint8_t value);

/**
 * Pack message TPERIPH_BR_TPDO_TIRETEMP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_tperiph_br_tpdo_tiretemp_pack(
    uint8_t *dst_p,
    const struct CANBus_tperiph_br_tpdo_tiretemp_t *src_p,
    size_t size);

/**
 * Unpack message TPERIPH_BR_TPDO_TIRETEMP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_tperiph_br_tpdo_tiretemp_unpack(
    struct CANBus_tperiph_br_tpdo_tiretemp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TPERIPH_BR_TPDO_TIRETEMP.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_tperiph_br_tpdo_tiretemp_init(struct CANBus_tperiph_br_tpdo_tiretemp_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_tperiph_br_tpdo_tiretemp_tperiph_br_tiretemp_8_is_in_range(uint8_t value);

/**
 * Pack message LSS_COMMAND.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_lss_command_pack(
    uint8_t *dst_p,
    const struct CANBus_lss_command_t *src_p,
    size_t size);

/**
 * Unpack message LSS_COMMAND.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_lss_command_unpack(
    struct CANBus_lss_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LSS_COMMAND.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_lss_command_init(struct CANBus_lss_command_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_lss_command_command_command_specifier_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_lss_command_command_command_specifier_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_lss_command_command_command_specifier_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_lss_command_command_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_lss_command_command_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_lss_command_command_mode_is_in_range(uint8_t value);

/**
 * Pack message LSS_RESPONSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_lss_response_pack(
    uint8_t *dst_p,
    const struct CANBus_lss_response_t *src_p,
    size_t size);

/**
 * Unpack message LSS_RESPONSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_lss_response_unpack(
    struct CANBus_lss_response_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LSS_RESPONSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_lss_response_init(struct CANBus_lss_response_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_lss_response_response_command_specifier_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_lss_response_response_command_specifier_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_lss_response_response_command_specifier_is_in_range(uint8_t value);

/**
 * Pack message SMPC_RPDO_CONTROL.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_smpc_rpdo_control_pack(
    uint8_t *dst_p,
    const struct CANBus_smpc_rpdo_control_t *src_p,
    size_t size);

/**
 * Unpack message SMPC_RPDO_CONTROL.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_smpc_rpdo_control_unpack(
    struct CANBus_smpc_rpdo_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SMPC_RPDO_CONTROL.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_smpc_rpdo_control_init(struct CANBus_smpc_rpdo_control_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_smpc_rpdo_control_smpc_control_dest_node_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_rpdo_control_smpc_control_dest_node_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_rpdo_control_smpc_control_dest_node_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_smpc_rpdo_control_smpc_control_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_rpdo_control_smpc_control_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_rpdo_control_smpc_control_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_smpc_rpdo_control_smpc_control_current_10_x_mult_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_rpdo_control_smpc_control_current_10_x_mult_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_rpdo_control_smpc_control_current_10_x_mult_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_smpc_rpdo_control_smpc_control_evse_override_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_rpdo_control_smpc_control_evse_override_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_rpdo_control_smpc_control_evse_override_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t CANBus_smpc_rpdo_control_smpc_control_pack_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_rpdo_control_smpc_control_pack_voltage_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_rpdo_control_smpc_control_pack_voltage_is_in_range(uint32_t value);

/**
 * Pack message SMPC_RPDO_MAX_VOLTAGE_CURRENT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_smpc_rpdo_max_voltage_current_pack(
    uint8_t *dst_p,
    const struct CANBus_smpc_rpdo_max_voltage_current_t *src_p,
    size_t size);

/**
 * Unpack message SMPC_RPDO_MAX_VOLTAGE_CURRENT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_smpc_rpdo_max_voltage_current_unpack(
    struct CANBus_smpc_rpdo_max_voltage_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SMPC_RPDO_MAX_VOLTAGE_CURRENT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_smpc_rpdo_max_voltage_current_init(struct CANBus_smpc_rpdo_max_voltage_current_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_smpc_rpdo_max_voltage_current_smpc_max_dest_node_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_rpdo_max_voltage_current_smpc_max_dest_node_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_rpdo_max_voltage_current_smpc_max_dest_node_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t CANBus_smpc_rpdo_max_voltage_current_smpc_max_chrg_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_rpdo_max_voltage_current_smpc_max_chrg_voltage_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_rpdo_max_voltage_current_smpc_max_chrg_voltage_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_smpc_rpdo_max_voltage_current_smpc_max_chrg_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_rpdo_max_voltage_current_smpc_max_chrg_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_rpdo_max_voltage_current_smpc_max_chrg_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_smpc_rpdo_max_voltage_current_smpc_max_input_evse_override_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_rpdo_max_voltage_current_smpc_max_input_evse_override_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_rpdo_max_voltage_current_smpc_max_input_evse_override_is_in_range(uint8_t value);

/**
 * Pack message SMPC_TPDO_STATUS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_smpc_tpdo_status_pack(
    uint8_t *dst_p,
    const struct CANBus_smpc_tpdo_status_t *src_p,
    size_t size);

/**
 * Unpack message SMPC_TPDO_STATUS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_smpc_tpdo_status_unpack(
    struct CANBus_smpc_tpdo_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SMPC_TPDO_STATUS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_smpc_tpdo_status_init(struct CANBus_smpc_tpdo_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_smpc_tpdo_status_smpc_status_ready_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_status_smpc_status_ready_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_status_smpc_status_ready_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_smpc_tpdo_status_smpc_status_charge_complete_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_status_smpc_status_charge_complete_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_status_smpc_status_charge_complete_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_smpc_tpdo_status_smpc_status_overtemp_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_status_smpc_status_overtemp_fault_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_status_smpc_status_overtemp_fault_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_smpc_tpdo_status_smpc_status_overcurrent_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_status_smpc_status_overcurrent_fault_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_status_smpc_status_overcurrent_fault_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_smpc_tpdo_status_smpc_status_overvoltage_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_status_smpc_status_overvoltage_fault_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_status_smpc_status_overvoltage_fault_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_smpc_tpdo_status_smpc_status_undervoltage_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_status_smpc_status_undervoltage_fault_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_status_smpc_status_undervoltage_fault_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_smpc_tpdo_status_smpc_status_internal_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_status_smpc_status_internal_fault_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_status_smpc_status_internal_fault_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_smpc_tpdo_status_smpc_status_charging_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_status_smpc_status_charging_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_status_smpc_status_charging_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_smpc_tpdo_status_smpc_status_charger_unplugged_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_status_smpc_status_charger_unplugged_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_status_smpc_status_charger_unplugged_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_smpc_tpdo_status_smpc_status_request_exclusive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_status_smpc_status_request_exclusive_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_status_smpc_status_request_exclusive_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_smpc_tpdo_status_smpc_status_j1772_disconn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_status_smpc_status_j1772_disconn_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_status_smpc_status_j1772_disconn_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t CANBus_smpc_tpdo_status_smpc_status_voltage_mv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_status_smpc_status_voltage_mv_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_status_smpc_status_voltage_mv_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_smpc_tpdo_status_smpc_status_current_ma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_status_smpc_status_current_ma_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_status_smpc_status_current_ma_is_in_range(uint16_t value);

/**
 * Pack message SMPC_TPDO_MAX_VOLTAGE_CURRENT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_smpc_tpdo_max_voltage_current_pack(
    uint8_t *dst_p,
    const struct CANBus_smpc_tpdo_max_voltage_current_t *src_p,
    size_t size);

/**
 * Unpack message SMPC_TPDO_MAX_VOLTAGE_CURRENT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_smpc_tpdo_max_voltage_current_unpack(
    struct CANBus_smpc_tpdo_max_voltage_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SMPC_TPDO_MAX_VOLTAGE_CURRENT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_smpc_tpdo_max_voltage_current_init(struct CANBus_smpc_tpdo_max_voltage_current_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t CANBus_smpc_tpdo_max_voltage_current_smpc_max2_max_voltage_mv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_max_voltage_current_smpc_max2_max_voltage_mv_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_max_voltage_current_smpc_max2_max_voltage_mv_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_smpc_tpdo_max_voltage_current_smpc_max2_max_current_ma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_max_voltage_current_smpc_max2_max_current_ma_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_max_voltage_current_smpc_max2_max_current_ma_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_smpc_tpdo_max_voltage_current_smpc_max2_evse_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_max_voltage_current_smpc_max2_evse_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_max_voltage_current_smpc_max2_evse_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_smpc_tpdo_max_voltage_current_smpc_max2_input_curr_lim_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_max_voltage_current_smpc_max2_input_curr_lim_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_max_voltage_current_smpc_max2_input_curr_lim_is_in_range(uint8_t value);

/**
 * Pack message SMPC_TPDO_INPUT_AC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_smpc_tpdo_input_ac_pack(
    uint8_t *dst_p,
    const struct CANBus_smpc_tpdo_input_ac_t *src_p,
    size_t size);

/**
 * Unpack message SMPC_TPDO_INPUT_AC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_smpc_tpdo_input_ac_unpack(
    struct CANBus_smpc_tpdo_input_ac_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SMPC_TPDO_INPUT_AC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_smpc_tpdo_input_ac_init(struct CANBus_smpc_tpdo_input_ac_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_smpc_tpdo_input_ac_smpc_input_ac_input_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_input_ac_smpc_input_ac_input_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_input_ac_smpc_input_ac_input_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_smpc_tpdo_input_ac_smpc_input_j1772_connected_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_input_ac_smpc_input_j1772_connected_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_input_ac_smpc_input_j1772_connected_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_smpc_tpdo_input_ac_smpc_input_j1772_disconnected_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_input_ac_smpc_input_j1772_disconnected_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_input_ac_smpc_input_j1772_disconnected_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t CANBus_smpc_tpdo_input_ac_smpc_input_j1772_triggered_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_input_ac_smpc_input_j1772_triggered_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_input_ac_smpc_input_j1772_triggered_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_smpc_tpdo_input_ac_smpc_input_ac_input_current_ma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_input_ac_smpc_input_ac_input_current_ma_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_input_ac_smpc_input_ac_input_current_ma_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_smpc_tpdo_input_ac_smpc_input_ac_input_frequency_hz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_input_ac_smpc_input_ac_input_frequency_hz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_input_ac_smpc_input_ac_input_frequency_hz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t CANBus_smpc_tpdo_input_ac_smpc_input_max_charger_temp_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_input_ac_smpc_input_max_charger_temp_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_input_ac_smpc_input_max_charger_temp_c_is_in_range(uint8_t value);

/**
 * Pack message SMPC_TPDO_SERIAL_PART_NUM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int CANBus_smpc_tpdo_serial_part_num_pack(
    uint8_t *dst_p,
    const struct CANBus_smpc_tpdo_serial_part_num_t *src_p,
    size_t size);

/**
 * Unpack message SMPC_TPDO_SERIAL_PART_NUM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int CANBus_smpc_tpdo_serial_part_num_unpack(
    struct CANBus_smpc_tpdo_serial_part_num_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SMPC_TPDO_SERIAL_PART_NUM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int CANBus_smpc_tpdo_serial_part_num_init(struct CANBus_smpc_tpdo_serial_part_num_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_smpc_tpdo_serial_part_num_smpc_ser_part_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_serial_part_num_smpc_ser_part_number_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_serial_part_num_smpc_ser_part_number_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t CANBus_smpc_tpdo_serial_part_num_smpc_ser_serial_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_serial_part_num_smpc_ser_serial_number_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_serial_part_num_smpc_ser_serial_number_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t CANBus_smpc_tpdo_serial_part_num_smpc_ser_firmware_ver_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double CANBus_smpc_tpdo_serial_part_num_smpc_ser_firmware_ver_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool CANBus_smpc_tpdo_serial_part_num_smpc_ser_firmware_ver_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
